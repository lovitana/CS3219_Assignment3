<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000138">
<title confidence="0.995395">
On the Universal Generation Problem for
Unification Grammars
</title>
<author confidence="0.999295">
J¨urgen Wedekind*
</author>
<affiliation confidence="0.984827">
University of Copenhagen
</affiliation>
<bodyText confidence="0.999881923076923">
The universal generation problem for unification grammars is the problem of determining
whether a given grammar derives any terminal string with a given feature structure. It is known
that the problem is decidable for LFG and PATR grammars if only acyclic feature structures are
taken into consideration. In this brief note, we show that the problem is undecidable for cyclic
structures. This holds even for grammars that are off-line parsable.
The universal generation problem for unification grammars is the problem of determin-
ing for an arbitrary grammar G and an arbitrary feature structure F whether there exists
at least one sentence that G derives with F. If F is acyclic, Wedekind and Kaplan (2012)
have shown that the problem is decidable for LFG (Kaplan and Bresnan 1982) and PATR
(Shieber et al. 1983) grammars. They prove that the set of strings that a grammar relates
to an acyclic feature structure can be described by a context-free grammar. Decidability
of the problem then follows because the emptiness problem is decidable for context-
free languages. For cyclic feature structures they demonstrated by example that the set
of strings that a grammar relates to an input might not be context-free, but they did not
further investigate the formal properties of the languages that are in general related to
cyclic structures.
In this brief note, we show the undecidability of the universal generation prob-
lem by reduction from the undecidable emptiness problem for the intersection of two
context-free languages. We provide a proof for LFG- or PATR-style grammars that asso-
ciate feature structures with trees derived in accordance with a context-free grammar.
Our result also applies to other systems such as HPSG (Pollard and Sag 1994) whose
formal devices are powerful enough to simulate, albeit indirectly, the effect of context-
free derivation.
To state the universal generation problem more formally, recall that a unification
grammar G defines a binary derivation relation ΔG between terminal strings and feature
structures, as given in (1).
</bodyText>
<listItem confidence="0.478324">
(1) ΔG(s, F) iff G derives terminal string s with feature structure F
</listItem>
<bodyText confidence="0.999229666666667">
The universal generation problem is then the problem of deciding for an arbitrary
unification grammar G and an arbitrary feature structure F whether {s  |ΔG(s, F)} is
empty or not.
</bodyText>
<footnote confidence="0.806806">
* Center for Language Technology, University of Copenhagen, Njalsgade 140, 2300 Copenhagen S,
Denmark.E-mail: jwedekind@hum.ku.dk.
Submission received: 29 October 2013; accepted for publication: 27 January 2014.
doi:10.1162/COLI a 00191
© 2014 Association for Computational Linguistics
</footnote>
<figure confidence="0.996582894736842">
Computational Linguistics Volume 40, Number 3
S
A D
B C
b c d
root
B E
L R
B E
L R
B E B E B E
b c d
root
B E&apos;
L&apos; R&apos;
B E&apos;
L&apos; R&apos;
B E&apos; B E&apos; B E&apos;
b c d
</figure>
<figureCaption confidence="0.997133">
Figure 1
</figureCaption>
<bodyText confidence="0.9988603125">
A sample c-structure and the f-structures associated with it by type 1 (top) and type 2 (bottom)
string grammar derivations.
For the reduction of the emptiness problem for the intersection of two context-free
languages, we can, without loss of generality, assume that the context-free languages are
c-free. These languages can be described by grammars in Chomsky normal form, that
is, by context-free grammars G = (N, T, S, P) with nonterminal vocabulary N, terminal
vocabulary T, and start symbol S where every rule in P is of the form A → BC with
B, C ∈ N, or A → a with a ∈ T.
For the proof we first define for each context-free grammar G in Chomsky normal
form two LFG grammars that both derive L(G) and that associate with each derivable
terminal string feature structures (f-structures) that provide slightly different encodings
of the derivable string.
Let G = (N, T, S, P) be a context-free grammar in Chomsky normal form. A type
1 string grammar String1(G) for G is an LFG grammar (N, T, S, P~) whose rule set P~
includes for each rule A → BC in P a rule of the form (2a) and for each rule A → a in P
a rule of the form (2b).
</bodyText>
<listItem confidence="0.982499">
(2) a. A → B C b. A → a
</listItem>
<equation confidence="0.995819">
(↑ L) = ↓ (↑ R) = ↓ (↑ B a) = (↑ E)
(↑ B) = (↓ B) (↑ E) = (↓ E)
(↑ L E) = (↓ B)
</equation>
<bodyText confidence="0.677765">
A type 2 string grammar String2(G) for G is an LFG grammar (N, T, S, P~) whose rule
set P~ includes a rule of the form (3a) for each A → BC in P and a rule of the form (3b)
</bodyText>
<listItem confidence="0.4032825">
for each A → a in P.
(3) a. A → B C b. A → a
</listItem>
<equation confidence="0.969865333333333">
(↑ L&apos;) = ↓ (↑ R&apos;) = ↓ (↑ B a) = (↑ E&apos;)
(↑ B) = (↓ B) (↑ E&apos;) = (↓ E&apos;)
(↑ L&apos; E&apos;) = (↓ B)
</equation>
<bodyText confidence="0.971465333333333">
Figure 1 illustrates a c-structure and the f-structures associated with it by type 1
and type 2 string grammar derivations.1 The attributes L, R, B, and E are mnemonic
1 Note that the terminal symbols also occur as attributes in the annotations of the terminal rules. This
“abuse” of the terminal symbols is not essential to our argument (a set of new attributes that is in
one-to-one correspondence with the set of terminals would also suffice), but it makes the encoding
of the terminal strings in the f-structures more perspicuous.
</bodyText>
<page confidence="0.944503">
534
</page>
<bodyText confidence="0.990676803921569">
Wedekind On the Universal Generation Problem
for ‘left’, ‘right’, ‘begin’, and ‘end’, respectively. For later reference, we also depicted
the constant root that we uniformly use to instantiate the T of a derivation that refers
to the c-structure root; root then labels the f-structure element to which it refers in
the minimal model of the f-description. (In Kaplan and Bresnan’s [1982] terminology,
root corresponds to the f-structure variable associated with the c-structure root, usually
notated by f1.)
Both types of string grammars have in common that they have G as their context-
free skeleton and that for every string in L(G), the f-structure for each string grammar
encodes both the string itself and also the branching structure of a derivation in G that
leads to that terminal string. The f-structures derived by the two types of grammars
vary only slightly in the labels that they use to encode those properties. An f-structure
of a type 2 grammar derivation for a given string shares the ‘begin’ attribute (B) with
the f-structure of a corresponding type 1 grammar derivation, but it has distinct ‘left’,
‘right’, and ‘end’ attributes (L&apos;, R&apos;, E&apos;).
Because the derived f-descriptions can never be unsatisfiable (the string grammars
do not contain atomic values), the f-structure constraints of the string grammars do not
actually filter the language of the context-free grammar. Thus G and its string grammars
must have the same language L(G) = L(String1(G)) = L(String2(G)). By induction on
the depth of the derivation trees it is also easy to see that the minimal solution of the
f-description of a derivation of a terminal string s is acyclic and single-rooted, and
satisfies (root B s&apos;) = (root E) and (root B s&apos;) = (root E&apos;), respectively, if and only if s&apos; = s.
That is, these grammars both encode their terminal strings in their respective (root B) to
(root E)/(root E&apos;) paths.
Before going into the details of the undecidability proof, we first give an out-
line of the proof idea. For the reduction, we have to construct for two arbitrary
e-free context-free languages L1 and L2 an LFG grammar G and an input structure
F such that the set of terminal strings that G derives with F is empty if and only
if the intersection of L1 and L2 is empty. Because every a-free context-free language
is derivable by a context-free grammar in Chomsky normal form, we can make
the LFG grammar G by combining the productions of String1(G1) and String2(G2),
for two arbitrary context-free grammars G1 = (N1, T1, S1, P1) and G2 = (N2, T2, S2, P2)
in Chomsky normal form. To avoid undesired interactions between the rules of
the two string grammars, we assume that the sets of nonterminals of G1 and G2
are disjoint (this is without loss of generality because nonterminals can always be
renamed).
We observed already that the string grammars String1(G1) and String2(G2) asso-
ciate with any c-structure derivation of a terminal string s1 in G1 and any c-structure
derivation of a terminal string s2 in G2 f-structures that encode s1 and s2 as their
respective (root B) values. By construction of the string grammars, the only paths that
the two f-structures share are the paths (root B s&apos;) where s&apos; is a common prefix of s1
and s2. Thus, if we define G to consist of the rules of String1(G1) and String2(G2),
and a start rule that expands S to S1S2 and forces the f-structures for s1 and s2 to
unify, their (root E) and (root E&apos;) paths become reentrant ((root E) = (rootE&apos;)) if and
only if s1 and s2 are identical. G then assigns to a terminal string an f-structure with
reentrant (root E) and (root E&apos;) paths if and only if it has the form s&apos;s&apos; and s&apos; is in
L(G1) n L(G2).
If all we do is unification on the top level the f-structures for the strings s1s2
would still record information on the structure of their derivation. Thus distinct strings
in {s&apos;s&apos;  |s&apos; E L(G1) n L(G2)1 would get assigned distinct f-structures. However, the
proof requires that there be a single f-structure that is assigned to all strings s&apos;s&apos; with
</bodyText>
<page confidence="0.983656">
535
</page>
<figure confidence="0.785044">
Computational Linguistics Volume 40, Number 3
</figure>
<figureCaption confidence="0.992192">
Figure 2
</figureCaption>
<bodyText confidence="0.984015333333333">
The functional contribution of the S rule to a derivation in G.
s&apos; in L(G1) ∩ L(G2). We achieve that by annotating the start rule so that the unified
f-structures derived by the string grammars are folded up into one and the same cyclic
f-structure F. This f-structure consists of a single element (node) and |T1 ∩ T2 |+ 7 cycles
of length 1, each one labeled with one of the attributes in {B, L, R, L&apos;, R&apos;, E, E&apos;} ∪ (T1 ∩ T2).
F thus has the following form.2
</bodyText>
<equation confidence="0.5415414">
(4) L
R B
cycles for the attributes in T1 ∩ T2
E&apos;
E
</equation>
<bodyText confidence="0.993699692307692">
F must contain cycles for all terminals in T1 ∩ T2, so that it imposes no constraints on
the strings that may appear in L(G1) ∩ L(G2).
The folding into F is accomplished by annotations of G’s start rule whose contribu-
tion to a derivation in G is depicted in Figure 2. As earlier, we include root for later use.
Obviously, if (root E) = (root E&apos;) holds in the unified f-structures of the string grammars,
then the unification of the string grammar f-structures and the structure in Figure 2
yields F. Otherwise, their unification results in a structure that only properly subsumes
F. This is because neither (root E E) nor (root E&apos; E) exists in the unified f-structures of the
two string grammars, and therefore their values in the structure in Figure 2 are not
merged when the structures are unified. Thus G derives with F exactly the set of strings
s/s&apos; with s&apos; in L(G1) ∩ L(G2). Hence, this set is empty if and only if L(G1) ∩ L(G2) is
empty.
We now give a rigorous statement and proof of our undecidability theorem.
</bodyText>
<subsectionHeader confidence="0.594739">
Theorem
</subsectionHeader>
<bodyText confidence="0.9191726">
For an arbitrary LFG grammar G and an arbitrary f-structure F it is undecidable whether
{s  |ΔG(s, F)} = ∅.
2 This f-structure may look peculiar in that it does not contain atomic feature values. However, this is not
relevant to the proof. To make the f-structure look more “natural,” we can, for example, expand G by an
annotation (↑ D) = V at the start rule and F by a feature D with value V.
</bodyText>
<figure confidence="0.996397363636364">
root
E&apos;
E
L E B
E
cycles for the attributes in T1 ∩ T2
R
L&apos;
R&apos;
L&apos;
R&apos;
</figure>
<page confidence="0.945581">
536
</page>
<note confidence="0.790148">
Wedekind On the Universal Generation Problem
</note>
<subsectionHeader confidence="0.367567">
Proof
</subsectionHeader>
<bodyText confidence="0.9995634">
Let G1 = (N1, T1, S1, P1) and G2 = (N2, T2, S2, P2) be two arbitrary context-free gram-
mars in Chomsky normal form. Without loss of generality, we can assume that
N1 ∩ N2 = 0. On the basis of String1(G1) and String2(G2) we construct an LFG grammar
G = (N, T, S, P) with N = N1 ∪ N2 ∪ {S}, S ∈�N1 ∪ N2, and T = T1 ∪ T2. The rule set P
consists of the rules of String1(G1) and String2(G2) and the following start rule.
</bodyText>
<equation confidence="0.963214666666667">
S → S1 S2
↑ = ↓ ↑ = ↓
(↑
E E) = ↑ (↑ E&apos; E) = (↑ E&apos; E B)
(↑ E&apos; E) = (↑ E&apos; E L)
(↑ E&apos; E) = (↑ E&apos; E R)
(↑ E&apos; E) = (↑ E&apos; E L&apos;)
(↑ E&apos; E) = (↑ E&apos; E R&apos;)
�annotations (↑ E&apos; E) = (↑ E&apos; E x)
</equation>
<bodyText confidence="0.981176294117647">
for all x in T1 ∩ T2
The functional contribution of this start rule to a derivation in G is depicted in Figure 2.
The (↑ E E) = ↑ annotation at S1 introduces the left cycle and the annotations at S2
account for the rest. Now let F be the f-structure in (4) and consider an arbitrary
derivation of a terminal string s with f-description FD in G. By construction of G, s must
have the form s1s2, with s1 derived from S1 and s2 derived from S2. We claim s1 = s2 iff
F is the f-structure for FD. Note first that also G does not contain atomic values. Thus,
FD cannot be unsatisfiable and must have an f-structure.
If s1= s2, then FD [- (root E) = (root E&apos;), since (root B s1) = (root E) and (root B s2) = (root E&apos;)
follow from FD. From (root E) = (root E&apos;) and the instantiated annotations of the S rule,
we get (root x) = root, for all x ∈ {B, L, R, L&apos;, R&apos;}∪ (T1 ∩ T2). With these equations we can
then derive from (root B s1) = (root E) and (root B s2) = (root E&apos;) equations root = (root x),
for x ∈ {E, E&apos;}. Thus F must be the f-structure that we obtain from a minimal model
of FD.
Now suppose s1 =Y� s2. Let FD1 and FD2 be the f-descriptions of the string grammars,
FD&apos; 1 = FD1 ∪ {root = n1}, FDz = FD2 ∪ {root = n2}, with n1 and n2 instantiating ↓ in the
annotations at S1 and S2, and FD&apos; = FD&apos; ∪ FDz. By construction of G, the only terms
shared by the deductive closures of FD&apos; and FD&apos; are the common subterms of (root B s1)
and (root B s2). Thus FD&apos; V (root E) = (root E&apos;), because otherwise FD&apos; [- (root B s&apos;) = (root E)
and FDz I- (root B s&apos;) = (root E&apos;) would imply s&apos;= s1 and s&apos;= s2, as we saw earlier. Because
obviously (root E E) and (root E&apos; E) do not occur in any equation derivable from FD,
(root E) = (root E&apos;) cannot follow from FD either, and F cannot be the f-structure
for FD.
Thus {s  |ΔG(s, F)} = {s&apos;s&apos;  |s&apos; ∈ L(G1) ∩ L(G2)} and hence {s  |ΔG(s, F)} = 0 if and only
if L(G1) ∩ L(G2) = 0. Since the emptiness problem for the intersection of context-free
languages is in general undecidable, the generation problem must be undecidable
too.
As a consequence of this theorem we know that there does not exist a general gen-
eration algorithm, at least if cyclic input structures are considered as legitimate inputs.
We note that the grammars constructed in this proof are off-line parsable (cf.,
e.g., Kaplan and Bresnan 1982; Johnson 1988; Jaeger, Francez, and Wintner 2005). Off-
line parsability is sufficient to guarantee the decidability of the recognition/parsing
problem even for cyclic f-structures. But Wedekind and Kaplan (2012) have shown that
off-line parsability is not necessary to guarantee that generation from acyclic structures
</bodyText>
<page confidence="0.979746">
537
</page>
<note confidence="0.60867">
Computational Linguistics Volume 40, Number 3
</note>
<bodyText confidence="0.999239909090909">
is decidable, and the grammars in this proof demonstrate that it is not sufficient for
cyclic structures.
Off-line parsability typically bounds the size of the c-structures of a string by a func-
tion of the length of that string. This works for parsing because the size of the f-structure
is bounded by the size of the c-structure, but it is insufficient for generation because it
does not constrain the structural correspondence between the c- and f-structure (see also
Dymetman 1991). A single constraint that guarantees decidability for both parsing and
generation must not only bound the size of the f-structures for a terminal string by the
length of the string, but it must also ensure, as we have learned from the proof herein,
that the determination of the terminal strings for an f-structure can be achieved with
finite control.
</bodyText>
<sectionHeader confidence="0.998464" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.9997062">
The author wishes to thank Ron Kaplan
for his insightful comments and helpful
suggestions during the preparation of this
paper, and the four anonymous reviewers for
their valuable feedback on an earlier draft.
</bodyText>
<sectionHeader confidence="0.997193" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999911885714286">
Dymetman, Marc. 1991. Inherently reversible
grammars, logic programming and
computability. In Proceedings of the ACL
Workshop: Reversible Grammar in Natural
Language Processing, pages 20–30, Berkeley,
CA.
Jaeger, Efrat, Nissim Francez, and Shuly
Wintner. 2005. Unification grammars and
off-line parsability. Journal of Logic,
Language, and Information, 14(2):199–234.
Johnson, Mark. 1988. Attribute–Value Logic
and the Theory of Grammar. CSLI
Publications, Stanford, CA.
Kaplan, Ronald M. and Joan Bresnan. 1982.
Lexical-Functional Grammar: A formal
system for grammatical representation.
In Joan Bresnan, editor, The Mental
Representation of Grammatical Relations. MIT
Press, Cambridge, MA, pages 173–281.
Pollard, Carl and Ivan Sag. 1994. Head-Driven
Phrase Structure Grammar. The University
of Chicago Press, Chicago, IL.
Shieber, Stuart M., Hans Uszkoreit,
Fernando C. N. Pereira, Jane Robinson,
and Mabry Tyson. 1983. The formalism
and implementation of PATR-II. In
Barbara J. Grosz and Mark E. Stickel,
editors, Research on Interactive Acquisition
and Use of Knowledge. SRI Final Report
1894. SRI International, Menlo Park, CA,
pages 39–79.
Wedekind, J¨urgen and Ronald M. Kaplan.
2012. LFG generation by grammar
specialization. Computational Linguistics,
38(4):867–915.
</reference>
<page confidence="0.996804">
538
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000464">
<title confidence="0.947626">On the Universal Generation Problem for Unification Grammars</title>
<affiliation confidence="0.937879">University of Copenhagen</affiliation>
<abstract confidence="0.997654666666667">The universal generation problem for unification grammars is the problem of determining whether a given grammar derives any terminal string with a given feature structure. It is known that the problem is decidable for LFG and PATR grammars if only acyclic feature structures are taken into consideration. In this brief note, we show that the problem is undecidable for cyclic structures. This holds even for grammars that are off-line parsable. The universal generation problem for unification grammars is the problem of determinfor an arbitrary grammar an arbitrary feature structure there exists least one sentence that with If acyclic, Wedekind and Kaplan (2012) have shown that the problem is decidable for LFG (Kaplan and Bresnan 1982) and PATR (Shieber et al. 1983) grammars. They prove that the set of strings that a grammar relates to an acyclic feature structure can be described by a context-free grammar. Decidability of the problem then follows because the emptiness problem is decidable for contextfree languages. For cyclic feature structures they demonstrated by example that the set of strings that a grammar relates to an input might not be context-free, but they did not further investigate the formal properties of the languages that are in general related to cyclic structures. In this brief note, we show the undecidability of the universal generation problem by reduction from the undecidable emptiness problem for the intersection of two context-free languages. We provide a proof for LFGor PATR-style grammars that associate feature structures with trees derived in accordance with a context-free grammar. Our result also applies to other systems such as HPSG (Pollard and Sag 1994) whose formal devices are powerful enough to simulate, albeit indirectly, the effect of contextfree derivation. To state the universal generation problem more formally, recall that a unification a binary derivation relation terminal strings and feature structures, as given in (1). terminal string feature structure The universal generation problem is then the problem of deciding for an arbitrary grammar an arbitrary feature structure empty or not.</abstract>
<note confidence="0.9699666">for Language Technology, University of Copenhagen, Njalsgade 140, 2300 Copenhagen S, Submission received: 29 October 2013; accepted for publication: 27 January 2014. doi:10.1162/COLI a 00191 © 2014 Association for Computational Linguistics Computational Linguistics Volume 40, Number 3</note>
<title confidence="0.703984777777778">S A D B C b c d root B E L R B E L R</title>
<author confidence="0.333214">B E B E B E</author>
<abstract confidence="0.992379380952381">b c d root b c d Figure 1 A sample c-structure and the f-structures associated with it by type 1 (top) and type 2 (bottom) string grammar derivations. For the reduction of the emptiness problem for the intersection of two context-free languages, we can, without loss of generality, assume that the context-free languages are These languages can be described by grammars in Chomsky normal form, that by context-free grammars S, nonterminal vocabulary terminal and start symbol S where every rule in of the form or the proof we first define for each context-free grammar Chomsky normal two LFG grammars that both derive that associate with each derivable terminal string feature structures (f-structures) that provide slightly different encodings of the derivable string. S, a context-free grammar in Chomsky normal form. A string grammar an LFG grammar S, rule set for each rule rule of the form (2a) and for each rule a rule of the form (2b). a. C = = = = = = 2 string grammar an LFG grammar S, rule a rule of the form (3a) for each a rule of the form (3b) each a. C = = = = = = Figure 1 illustrates a c-structure and the f-structures associated with it by type 1 type 2 string grammar attributes and mnemonic 1 Note that the terminal symbols also occur as attributes in the annotations of the terminal rules. This “abuse” of the terminal symbols is not essential to our argument (a set of new attributes that is in one-to-one correspondence with the set of terminals would also suffice), but it makes the encoding of the terminal strings in the f-structures more perspicuous. 534 Wedekind On the Universal Generation Problem for ‘left’, ‘right’, ‘begin’, and ‘end’, respectively. For later reference, we also depicted constant we uniformly use to instantiate the a derivation that refers the c-structure root; labels the f-structure element to which it refers in the minimal model of the f-description. (In Kaplan and Bresnan’s [1982] terminology, to the f-structure variable associated with the c-structure root, usually by types of string grammars have in common that they have their contextskeleton and that for every string in the f-structure for each string grammar both the string itself and also the branching structure of a derivation in leads to that terminal string. The f-structures derived by the two types of grammars vary only slightly in the labels that they use to encode those properties. An f-structure a type 2 grammar derivation for a given string shares the ‘begin’ attribute with the f-structure of a corresponding type 1 grammar derivation, but it has distinct ‘left’, and ‘end’ attributes Because the derived f-descriptions can never be unsatisfiable (the string grammars do not contain atomic values), the f-structure constraints of the string grammars do not filter the language of the context-free grammar. Thus its string grammars have the same language = = By induction on the depth of the derivation trees it is also easy to see that the minimal solution of the of a derivation of a terminal string acyclic and single-rooted, and = = respectively, if and only if is, these grammars both encode their terminal strings in their respective Before going into the details of the undecidability proof, we first give an outline of the proof idea. For the reduction, we have to construct for two arbitrary context-free languages LFG grammar an input structure that the set of terminal strings that with empty if and only the intersection of empty. Because every context-free language is derivable by a context-free grammar in Chomsky normal form, we can make LFG grammar combining the productions of two arbitrary context-free grammars in Chomsky normal form. To avoid undesired interactions between the rules of two string grammars, we assume that the sets of nonterminals of are disjoint (this is without loss of generality because nonterminals can always be renamed). observed already that the string grammars assowith any c-structure derivation of a terminal string any c-structure of a terminal string that encode their By construction of the string grammars, the only paths that two f-structures share are the paths a common prefix of Thus, if we define consist of the rules of a start rule that expands S to and forces the f-structures for their become reentrant = if and if identical. assigns to a terminal string an f-structure with if and only if it has the form in all we do is unification on the top level the f-structures for the strings would still record information on the structure of their derivation. Thus distinct strings get assigned distinct f-structures. However, the requires that there be a single f-structure that is assigned to all strings 535 Computational Linguistics Volume 40, Number 3 Figure 2 functional contribution of the S rule to a derivation in We achieve that by annotating the start rule so that the unified f-structures derived by the string grammars are folded up into one and the same cyclic This f-structure consists of a single element (node) and cycles length 1, each one labeled with one of the attributes in ∪ has the following R B for the attributes in E contain cycles for all terminals in so that it imposes no constraints on strings that may appear in folding into accomplished by annotations of start rule whose contributo a derivation in depicted in Figure 2. As earlier, we include later use. if = in the unified f-structures of the string grammars, then the unification of the string grammar f-structures and the structure in Figure 2 Otherwise, their unification results in a structure that only properly subsumes This is because neither in the unified f-structures of the two string grammars, and therefore their values in the structure in Figure 2 are not when the structures are unified. Thus with the set of strings Hence, this set is empty if and only if empty. We now give a rigorous statement and proof of our undecidability theorem. Theorem For an arbitrary LFG grammar G and an arbitrary f-structure F it is undecidable whether 2 This f-structure may look peculiar in that it does not contain atomic feature values. However, this is not to the proof. To make the f-structure look more “natural,” we can, for example, expand an = the start rule and a feature value root E L E B E for the attributes in R 536 Wedekind On the Universal Generation Problem Proof two arbitrary context-free grammars in Chomsky normal form. Without loss of generality, we can assume that On the basis of construct an LFG grammar S, S and The rule set of the rules of the following start rule. ↑ = = = = = = = all functional contribution of this start rule to a derivation in depicted in Figure 2. = at the left cycle and the annotations at for the rest. Now let the f-structure in (4) and consider an arbitrary of a terminal string f-description By construction of the form with from from We claim the f-structure for Note first that also not contain atomic values. Thus, be unsatisfiable and must have an f-structure. then = since = = from From = the instantiated annotations of the S rule, get = for all With these equations we can derive from = = Thus be the f-structure that we obtain from a minimal model suppose Let the f-descriptions of the string grammars, with the at and By construction of the only terms by the deductive closures of the common subterms of Thus = because otherwise = = imply as we saw earlier. Because not occur in any equation derivable from = follow from and be the f-structure hence and only = Since the emptiness problem for the intersection of context-free languages is in general undecidable, the generation problem must be undecidable too. As a consequence of this theorem we know that there does not exist a general generation algorithm, at least if cyclic input structures are considered as legitimate inputs. We note that the grammars constructed in this proof are off-line parsable (cf., e.g., Kaplan and Bresnan 1982; Johnson 1988; Jaeger, Francez, and Wintner 2005). Offline parsability is sufficient to guarantee the decidability of the recognition/parsing problem even for cyclic f-structures. But Wedekind and Kaplan (2012) have shown that off-line parsability is not necessary to guarantee that generation from acyclic structures 537 Computational Linguistics Volume 40, Number 3 is decidable, and the grammars in this proof demonstrate that it is not sufficient for cyclic structures. Off-line parsability typically bounds the size of the c-structures of a string by a function of the length of that string. This works for parsing because the size of the f-structure is bounded by the size of the c-structure, but it is insufficient for generation because it does not constrain the structural correspondence between the cand f-structure (see also Dymetman 1991). A single constraint that guarantees decidability for both parsing and generation must not only bound the size of the f-structures for a terminal string by the length of the string, but it must also ensure, as we have learned from the proof herein, that the determination of the terminal strings for an f-structure can be achieved with finite control. Acknowledgments The author wishes to thank Ron Kaplan for his insightful comments and helpful suggestions during the preparation of this paper, and the four anonymous reviewers for their valuable feedback on an earlier draft.</abstract>
<note confidence="0.832594130434783">References Dymetman, Marc. 1991. Inherently reversible grammars, logic programming and In of the ACL Workshop: Reversible Grammar in Natural pages 20–30, Berkeley, CA. Jaeger, Efrat, Nissim Francez, and Shuly Wintner. 2005. Unification grammars and parsability. of Logic, and 14(2):199–234. Mark. 1988. Logic the Theory of CSLI Publications, Stanford, CA. Kaplan, Ronald M. and Joan Bresnan. 1982. Lexical-Functional Grammar: A formal system for grammatical representation. Joan Bresnan, editor, Mental of Grammatical MIT Press, Cambridge, MA, pages 173–281. Carl and Ivan Sag. 1994. Structure The University of Chicago Press, Chicago, IL.</note>
<title confidence="0.324602">Shieber, Stuart M., Hans Uszkoreit,</title>
<author confidence="0.989202">The formalism</author>
<author confidence="0.989202">implementation of PATR-II In Barbara J Grosz</author>
<author confidence="0.989202">Mark E Stickel</author>
<affiliation confidence="0.638133">on Interactive Acquisition</affiliation>
<note confidence="0.843805142857143">Use of SRI Final Report 1894. SRI International, Menlo Park, CA, pages 39–79. Wedekind, J¨urgen and Ronald M. Kaplan. 2012. LFG generation by grammar 38(4):867–915. 538</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Marc Dymetman</author>
</authors>
<title>Inherently reversible grammars, logic programming and computability.</title>
<date>1991</date>
<booktitle>In Proceedings of the ACL Workshop: Reversible Grammar in Natural Language Processing,</booktitle>
<pages>20--30</pages>
<location>Berkeley, CA.</location>
<marker>Dymetman, 1991</marker>
<rawString>Dymetman, Marc. 1991. Inherently reversible grammars, logic programming and computability. In Proceedings of the ACL Workshop: Reversible Grammar in Natural Language Processing, pages 20–30, Berkeley, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Efrat Jaeger</author>
<author>Nissim Francez</author>
<author>Shuly Wintner</author>
</authors>
<title>Unification grammars and off-line parsability.</title>
<date>2005</date>
<journal>Journal of Logic, Language, and Information,</journal>
<volume>14</volume>
<issue>2</issue>
<marker>Jaeger, Francez, Wintner, 2005</marker>
<rawString>Jaeger, Efrat, Nissim Francez, and Shuly Wintner. 2005. Unification grammars and off-line parsability. Journal of Logic, Language, and Information, 14(2):199–234.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Johnson</author>
</authors>
<title>Attribute–Value Logic and the Theory of Grammar.</title>
<date>1988</date>
<publisher>CSLI Publications,</publisher>
<location>Stanford, CA.</location>
<contexts>
<context position="14027" citStr="Johnson 1988" startWordPosition="2630" endWordPosition="2631"> from FD either, and F cannot be the f-structure for FD. Thus {s |ΔG(s, F)} = {s&apos;s&apos; |s&apos; ∈ L(G1) ∩ L(G2)} and hence {s |ΔG(s, F)} = 0 if and only if L(G1) ∩ L(G2) = 0. Since the emptiness problem for the intersection of context-free languages is in general undecidable, the generation problem must be undecidable too. As a consequence of this theorem we know that there does not exist a general generation algorithm, at least if cyclic input structures are considered as legitimate inputs. We note that the grammars constructed in this proof are off-line parsable (cf., e.g., Kaplan and Bresnan 1982; Johnson 1988; Jaeger, Francez, and Wintner 2005). Offline parsability is sufficient to guarantee the decidability of the recognition/parsing problem even for cyclic f-structures. But Wedekind and Kaplan (2012) have shown that off-line parsability is not necessary to guarantee that generation from acyclic structures 537 Computational Linguistics Volume 40, Number 3 is decidable, and the grammars in this proof demonstrate that it is not sufficient for cyclic structures. Off-line parsability typically bounds the size of the c-structures of a string by a function of the length of that string. This works for p</context>
</contexts>
<marker>Johnson, 1988</marker>
<rawString>Johnson, Mark. 1988. Attribute–Value Logic and the Theory of Grammar. CSLI Publications, Stanford, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronald M Kaplan</author>
<author>Joan Bresnan</author>
</authors>
<title>Lexical-Functional Grammar: A formal system for grammatical representation.</title>
<date>1982</date>
<booktitle>The Mental Representation of Grammatical Relations.</booktitle>
<pages>173--281</pages>
<editor>In Joan Bresnan, editor,</editor>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA,</location>
<contexts>
<context position="885" citStr="Kaplan and Bresnan 1982" startWordPosition="136" endWordPosition="139">ure structure. It is known that the problem is decidable for LFG and PATR grammars if only acyclic feature structures are taken into consideration. In this brief note, we show that the problem is undecidable for cyclic structures. This holds even for grammars that are off-line parsable. The universal generation problem for unification grammars is the problem of determining for an arbitrary grammar G and an arbitrary feature structure F whether there exists at least one sentence that G derives with F. If F is acyclic, Wedekind and Kaplan (2012) have shown that the problem is decidable for LFG (Kaplan and Bresnan 1982) and PATR (Shieber et al. 1983) grammars. They prove that the set of strings that a grammar relates to an acyclic feature structure can be described by a context-free grammar. Decidability of the problem then follows because the emptiness problem is decidable for contextfree languages. For cyclic feature structures they demonstrated by example that the set of strings that a grammar relates to an input might not be context-free, but they did not further investigate the formal properties of the languages that are in general related to cyclic structures. In this brief note, we show the undecidabi</context>
<context position="14013" citStr="Kaplan and Bresnan 1982" startWordPosition="2626" endWordPosition="2629">= (root E&apos;) cannot follow from FD either, and F cannot be the f-structure for FD. Thus {s |ΔG(s, F)} = {s&apos;s&apos; |s&apos; ∈ L(G1) ∩ L(G2)} and hence {s |ΔG(s, F)} = 0 if and only if L(G1) ∩ L(G2) = 0. Since the emptiness problem for the intersection of context-free languages is in general undecidable, the generation problem must be undecidable too. As a consequence of this theorem we know that there does not exist a general generation algorithm, at least if cyclic input structures are considered as legitimate inputs. We note that the grammars constructed in this proof are off-line parsable (cf., e.g., Kaplan and Bresnan 1982; Johnson 1988; Jaeger, Francez, and Wintner 2005). Offline parsability is sufficient to guarantee the decidability of the recognition/parsing problem even for cyclic f-structures. But Wedekind and Kaplan (2012) have shown that off-line parsability is not necessary to guarantee that generation from acyclic structures 537 Computational Linguistics Volume 40, Number 3 is decidable, and the grammars in this proof demonstrate that it is not sufficient for cyclic structures. Off-line parsability typically bounds the size of the c-structures of a string by a function of the length of that string. Th</context>
</contexts>
<marker>Kaplan, Bresnan, 1982</marker>
<rawString>Kaplan, Ronald M. and Joan Bresnan. 1982. Lexical-Functional Grammar: A formal system for grammatical representation. In Joan Bresnan, editor, The Mental Representation of Grammatical Relations. MIT Press, Cambridge, MA, pages 173–281.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Carl Pollard</author>
<author>Ivan Sag</author>
</authors>
<title>Head-Driven Phrase Structure Grammar.</title>
<date>1994</date>
<publisher>The University of Chicago Press,</publisher>
<location>Chicago, IL.</location>
<contexts>
<context position="1853" citStr="Pollard and Sag 1994" startWordPosition="291" endWordPosition="294">hat the set of strings that a grammar relates to an input might not be context-free, but they did not further investigate the formal properties of the languages that are in general related to cyclic structures. In this brief note, we show the undecidability of the universal generation problem by reduction from the undecidable emptiness problem for the intersection of two context-free languages. We provide a proof for LFG- or PATR-style grammars that associate feature structures with trees derived in accordance with a context-free grammar. Our result also applies to other systems such as HPSG (Pollard and Sag 1994) whose formal devices are powerful enough to simulate, albeit indirectly, the effect of contextfree derivation. To state the universal generation problem more formally, recall that a unification grammar G defines a binary derivation relation ΔG between terminal strings and feature structures, as given in (1). (1) ΔG(s, F) iff G derives terminal string s with feature structure F The universal generation problem is then the problem of deciding for an arbitrary unification grammar G and an arbitrary feature structure F whether {s |ΔG(s, F)} is empty or not. * Center for Language Technology, Unive</context>
</contexts>
<marker>Pollard, Sag, 1994</marker>
<rawString>Pollard, Carl and Ivan Sag. 1994. Head-Driven Phrase Structure Grammar. The University of Chicago Press, Chicago, IL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stuart M Shieber</author>
<author>Hans Uszkoreit</author>
<author>Fernando C N Pereira</author>
<author>Jane Robinson</author>
<author>Mabry Tyson</author>
</authors>
<title>The formalism and implementation of PATR-II.</title>
<date>1983</date>
<booktitle>Research on Interactive Acquisition and Use of Knowledge. SRI Final Report 1894. SRI International,</booktitle>
<pages>39--79</pages>
<editor>In Barbara J. Grosz and Mark E. Stickel, editors,</editor>
<location>Menlo Park, CA,</location>
<contexts>
<context position="916" citStr="Shieber et al. 1983" startWordPosition="142" endWordPosition="145"> problem is decidable for LFG and PATR grammars if only acyclic feature structures are taken into consideration. In this brief note, we show that the problem is undecidable for cyclic structures. This holds even for grammars that are off-line parsable. The universal generation problem for unification grammars is the problem of determining for an arbitrary grammar G and an arbitrary feature structure F whether there exists at least one sentence that G derives with F. If F is acyclic, Wedekind and Kaplan (2012) have shown that the problem is decidable for LFG (Kaplan and Bresnan 1982) and PATR (Shieber et al. 1983) grammars. They prove that the set of strings that a grammar relates to an acyclic feature structure can be described by a context-free grammar. Decidability of the problem then follows because the emptiness problem is decidable for contextfree languages. For cyclic feature structures they demonstrated by example that the set of strings that a grammar relates to an input might not be context-free, but they did not further investigate the formal properties of the languages that are in general related to cyclic structures. In this brief note, we show the undecidability of the universal generatio</context>
</contexts>
<marker>Shieber, Uszkoreit, Pereira, Robinson, Tyson, 1983</marker>
<rawString>Shieber, Stuart M., Hans Uszkoreit, Fernando C. N. Pereira, Jane Robinson, and Mabry Tyson. 1983. The formalism and implementation of PATR-II. In Barbara J. Grosz and Mark E. Stickel, editors, Research on Interactive Acquisition and Use of Knowledge. SRI Final Report 1894. SRI International, Menlo Park, CA, pages 39–79.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J¨urgen Wedekind</author>
<author>Ronald M Kaplan</author>
</authors>
<title>LFG generation by grammar specialization.</title>
<date>2012</date>
<journal>Computational Linguistics,</journal>
<volume>38</volume>
<issue>4</issue>
<contexts>
<context position="810" citStr="Wedekind and Kaplan (2012)" startWordPosition="123" endWordPosition="126">rmining whether a given grammar derives any terminal string with a given feature structure. It is known that the problem is decidable for LFG and PATR grammars if only acyclic feature structures are taken into consideration. In this brief note, we show that the problem is undecidable for cyclic structures. This holds even for grammars that are off-line parsable. The universal generation problem for unification grammars is the problem of determining for an arbitrary grammar G and an arbitrary feature structure F whether there exists at least one sentence that G derives with F. If F is acyclic, Wedekind and Kaplan (2012) have shown that the problem is decidable for LFG (Kaplan and Bresnan 1982) and PATR (Shieber et al. 1983) grammars. They prove that the set of strings that a grammar relates to an acyclic feature structure can be described by a context-free grammar. Decidability of the problem then follows because the emptiness problem is decidable for contextfree languages. For cyclic feature structures they demonstrated by example that the set of strings that a grammar relates to an input might not be context-free, but they did not further investigate the formal properties of the languages that are in gener</context>
<context position="14224" citStr="Wedekind and Kaplan (2012)" startWordPosition="2655" endWordPosition="2658">ess problem for the intersection of context-free languages is in general undecidable, the generation problem must be undecidable too. As a consequence of this theorem we know that there does not exist a general generation algorithm, at least if cyclic input structures are considered as legitimate inputs. We note that the grammars constructed in this proof are off-line parsable (cf., e.g., Kaplan and Bresnan 1982; Johnson 1988; Jaeger, Francez, and Wintner 2005). Offline parsability is sufficient to guarantee the decidability of the recognition/parsing problem even for cyclic f-structures. But Wedekind and Kaplan (2012) have shown that off-line parsability is not necessary to guarantee that generation from acyclic structures 537 Computational Linguistics Volume 40, Number 3 is decidable, and the grammars in this proof demonstrate that it is not sufficient for cyclic structures. Off-line parsability typically bounds the size of the c-structures of a string by a function of the length of that string. This works for parsing because the size of the f-structure is bounded by the size of the c-structure, but it is insufficient for generation because it does not constrain the structural correspondence between the c</context>
</contexts>
<marker>Wedekind, Kaplan, 2012</marker>
<rawString>Wedekind, J¨urgen and Ronald M. Kaplan. 2012. LFG generation by grammar specialization. Computational Linguistics, 38(4):867–915.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>