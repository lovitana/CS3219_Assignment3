<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.987812">
Monads as a Solution for Generalized Opacity
</title>
<author confidence="0.992062">
Gianluca Giorgolo Ash Asudeh
</author>
<affiliation confidence="0.999521">
University of Oxford University of Oxford and Carleton University
</affiliation>
<email confidence="0.649638">
{gianluca.giorgolo,ash.asudeh}@ling-phil.ox.ac.uk
</email>
<sectionHeader confidence="0.969044" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999808272727273">
In this paper we discuss a conservative ex-
tension of the simply-typed lambda calcu-
lus in order to model a class of expres-
sions that generalize the notion of opaque
contexts. Our extension is based on previ-
ous work in the semantics of programming
languages aimed at providing a mathemat-
ical characterization of computations that
produce some kind of side effect (Moggi,
1989), and is based on the notion of mon-
ads, a construction in category theory that,
intuitively, maps a collection of “simple”
values and “simple” functions into a more
complex value space, in a canonical way.
The main advantages of our approach with
respect to traditional analyses of opacity
are the fact that we are able to explain in
a uniform way a set of different but re-
lated phenomena, and that we do so in a
principled way that has been shown to also
explain other linguistic phenomena (Shan,
2001).
</bodyText>
<sectionHeader confidence="0.992523" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999698">
Opaque contexts have been an active area of re-
search in natural language semantics since Frege’s
original discussion of the puzzle (Frege, 1892). A
sentence like (1) has a non-contradictory interpre-
tation despite the fact that the two referring expres-
sions Hesperus and Phosphorus refer to the same
entity, the planet we know as Venus.
</bodyText>
<listItem confidence="0.769963">
(1) Reza doesn’t believe Hesperus is Phos-
</listItem>
<bodyText confidence="0.983704733333333">
phorus.
The fact that a sentence like (1) includes the
modal believe has influenced much of the analy-
ses proposed in the literature, and has linked the
phenomenon with the notion of modality. In this
paper we challenge this view and try to position
data like (1) inside a larger framework that also
includes other types of expressions.
We decompose examples like (1) along two di-
mensions: the presence or absence of a modal ex-
pression, and the way in which we multiply re-
fer to the same individual. In the case of (1), we
have a modal and we use two different co-referring
expressions. Examples (2)-(4) complete the land-
scape of possible combinations:
</bodyText>
<listItem confidence="0.9994374">
(2) Dr. Octopus punched Spider-Man but he
didn’t punch Spider-Man.
(3) Mary Jane loves Peter Parker but she
doesn’t love Spider-Man.
(4) Reza doesn’t believe Jesus is Jesus.
</listItem>
<bodyText confidence="0.961472695652174">
(2) is clearly a contradictory statement, as we
predicate of Dr. Octopus that he has the property
of having punched Spider-Man and its negation.
Notice that in this example there is no modal and
the exact same expression is used twice to refer
to the object individual. In the case of (3) we
still have no modal and we use two different but
co-referring expressions to refer to the same in-
dividual. However in this case the statement has
a non-contradictory reading. Similarly (4) has a
non-contradictory reading, which states that, ac-
cording to the speaker, Reza doesn’t believe that
the entity he (Reza) calls Jesus is the entity that the
speaker calls Jesus (e.g., is not the same individual
or does not have the same properties). This case is
symmetrical to (3), as here we have a modal ex-
pression but the same expression is used twice to
refer to the same individual.
If the relevant reading of (4) is difficult to get,
consider an alternative kind of scenario, as in (5),
in which the subject of the sentence, Kim, suffers
from Capgras Syndrome1 and thinks that Sandy is
an impostor. The speaker says:
</bodyText>
<note confidence="0.6086695">
1From Wikipedia: “[Capgras syndrome] is a disorder in
which a person holds a delusion that a friend, spouse, par-
</note>
<page confidence="0.567369">
19
</page>
<note confidence="0.998152">
Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 19–27,
Gothenburg, Sweden, April 26-30 2014. c�2014 Association for Computational Linguistics
</note>
<bodyText confidence="0.981318034482759">
(5) Kim doesn’t believe Sandy is Sandy
Given the definition of Capgras Syndrome (in
fn. 1), there is a clear non-contradictory reading
available here, in which the speaker is stating that
Kim does not believe that the entity in question,
that the speaker and (other non-Capgras-sufferers)
would call Sandy, is the entity that she associate
with the name Sandy.
We propose an analysis of the non-contradictory
cases based on the intuition that the apparently co-
referential expressions are in fact interpreted us-
ing different interpretation functions, which cor-
respond to different perspectives that are pitted
against each other in the sentences. Furthermore,
we propose that modal expressions are not the only
ones capable of introducing a shift of perspective,
but also that verbs that involve some kind of men-
tal attitude of the subject towards the object have
the same effect.
Notice that this last observation distinguishes
our approach from one where a sentence like (3) is
interpreted as simply saying that Mary Jane loves
only one guise of the entity that corresponds to Pe-
ter Parker but not another one. The problem with
this interpretation is that if it is indeed the case
that different co-referring expressions simply pick
out different guises of the same individual, then a
sentence like (6) should have a non-contradictory
reading, while this seems not to be the case.
</bodyText>
<listItem confidence="0.5098855">
(6) Dr. Octopus killed Spider-Man but he
didn’t kill Peter Parker.
</listItem>
<bodyText confidence="0.983187695652174">
While a guise-based interpretation is compatible
with our analysis2, it is also necessary to correctly
model the different behaviour of verbs like love
with respect to others like punch or kill. In fact,
we need to model the difference between, for ex-
ample, kill and murder, since murder does involve
a mental attitude of intention and the correspond-
ing sentence to (6) is not necessarily contradictory:
(7) Dr. Octopus murdered Spider-Man but he
didn’t murder Peter Parker.
The implementation of our analysis is based on
monads. Monads are a construction in category
theory that defines a canonical way to map a set
of objects and functions that we may consider as
ent, or other close family member has been replaced by an
identical-looking impostor.”
2Indeed, one way to understand guises is as different ways
in which we interpret a referring term (Heim, 1998).
simple into a more complex object and function
space. They have been successfully used in the
semantics of programming languages to charac-
terise computations that are not “pure”. By pure
we mean code objects that are totally referentially
transparent (i.e. do not depend on external factors
and return the same results given the same input
independently of their execution context), and also
that do not have effects on the “real world”. In
contrast, monads are used to model computations
that for example read from or write to a file, that
depend on some random process or whose return
value is non-deterministic.
In our case we will use the monad that describe
values that are made dependent on some exter-
nal factor, commonly known in the functional pro-
gramming literature as the Reader monad.3 We
will represent linguistic expressions that can be as-
signed potentially different interpretations as func-
tions from interpretation indices to values. Effec-
tively we will construct a different type of lexicon
that does not represent only the linguistic knowl-
edge of a single speaker but also her (possibly par-
tial) knowledge of the language of other speak-
ers. So, for example, we will claim that (4) can
be assigned a non-contradictory reading because
the speaker’s lexicon also includes the information
regarding Reza’s interpretation of the name Jesus
and therefore makes it possible for the speaker to
use the same expression, in combination with a
verb such as believe, to actually refer to two dif-
ferent entities. In one case we will argue that the
name Jesus is interpreted using the speaker’s inter-
pretation while in the other case it is Reza’s inter-
pretation that is used.
Notice that we can apply our analysis to any
natural language expression that may have differ-
ent interpretations. This means that, for exam-
ple, we can extend our analysis, which is limited
to referring expressions here for space reasons, to
other cases, such as the standard examples involv-
ing ideally synonymous predicates like groundhog
and woodchuck (see, e.g., Fox and Lappin (2005)).
The paper is organised as follows: in section
2 we discuss the technical details of our analysis;
in section 3 we discuss our analyses of the moti-
vating examples; section 4 compares our approach
with a standard approach to opacity; we conclude
in section 5.
3Shan (2001) was the first to sketch the idea of using the
Reader monad to model intensional phenomena.
</bodyText>
<page confidence="0.406368">
20
</page>
<sectionHeader confidence="0.620672" genericHeader="introduction">
2 Monads and interpretation functions
</sectionHeader>
<bodyText confidence="0.984453307692308">
To avoid introducing the complexities of the cat-
egorical formalism, we introduce monads as they
are usually encountered in the computer science
literature. A monad is defined as a triple h♦, q, *i.
♦ is what we call a functor, in our case a mapping
between types and functions. We call the com-
ponent of ♦ that maps between types ♦1, while
the one that maps between functions ♦2. In our
case ♦1 will map each type to a new type that
corresponds to the original type with an added
interpretation index parameter. Formally, if i is
the type of interpretation indices, then ♦1 maps
any type T to i → T. In terms of functions,
</bodyText>
<listItem confidence="0.928373333333333">
♦2 maps any function f : T → S to a function
f&apos; : (i → T) → i → S. ♦2 corresponds to func-
tion composition:
</listItem>
<equation confidence="0.996398">
♦2(f) = Ag.Ai.f(g(i)) (8)
</equation>
<bodyText confidence="0.9999872">
In what follows the component ♦2 will not be used
so we will use ♦ as an abbreviation for ♦1. This
means that we will write ♦T for the type i → T.
q (pronounced “unit”) is a polymorphic func-
tion that maps inhabitants of a type T to inhabitants
of its image under ♦, formally q : ∀T.T → ♦T.
Using the computational metaphor, q should em-
bed a value in a computation that returns that value
without any side-effect. In our case q should sim-
ply add a vacuous parameter to the value:
</bodyText>
<equation confidence="0.999254">
q(x) = Ai.x (9)
</equation>
<bodyText confidence="0.99320675">
* (pronounced “bind”) is a polymorphic func-
tion of type ∀T.∀S.♦T → (T → ♦S) → ♦S, and
acts as a sort of enhanced functional application.4
Again using the computational metaphor, * takes
care of combining the side effects of the argument
and the function and returns the resulting compu-
tation. In the case of the monad we are interested
in, * is defined as in (10).
</bodyText>
<equation confidence="0.922232">
a * f = Ai.f(a(i))(i) (10)
</equation>
<bodyText confidence="0.985373">
Another fundamental property of * is that, by
imposing an order of evaluation, it will provide
us with an additional scoping mechanism distinct
from standard functional application. This will al-
low us to correctly capture the multiple readings
4We use for * the argument order as it is normally used in
functional programming. We could swap the arguments and
make it look more like standard functional application. Also,
we write * in infix notation.
associated with the expressions under considera-
tion.
We thus add two operators, q and *, to the
lambda calculus and the reductions work as ex-
pected for (9) and (10). These reductions are im-
plicit in our analyses in section 3.
</bodyText>
<subsectionHeader confidence="0.995434">
2.1 Compositional logic
</subsectionHeader>
<bodyText confidence="0.981188236842105">
For composing the meanings of linguistic re-
sources we use a logical calculus adapted for the
linear case5 from the one introduced by Benton et
al. (1998). The calculus is based on a language
with two connectives corresponding to our type
constructors: (, a binary connective, that corre-
sponds to (linear) functional types, and ♦, a unary
connective, that represents monadic types.
The logical calculus is described by the proof
rules in figure 1. The rules come annotated with
lambda terms that characterise the Curry-Howard
correspondence between proofs and meaning
terms. Here we assume a Lexical Functional
Grammar-like setup (Dalrymple, 2001), where
a syntactic and functional grammar component
feeds the semantic component with lexical re-
sources already marked with respect to their
predicate-argument relationships. Alternatively
we could modify the calculus to a categorial set-
ting, by introducing a structural connective, and
using directional versions of the implication con-
nective together with purely structural rules to
control the compositional process.
We can prove that the Cut rule is admissible,
therefore the calculus becomes an effective (al-
though inefficient) way of computing the meaning
of a linguistic expression.
A key advantage we gain from the monadic ap-
proach is that we are not forced to generalize all
lexical entries to the “worst case”. With the log-
ical setup we have just described we can in fact
freely mix monadic and non monadic resources.
For example, in our logic we can combine a pure
version of a binary function with arguments that
are either pure or monadic, as the following are all
5Linearity is a property that has been argued for in the
context of natural language semantics by various researchers
(Moortgat (2011), Asudeh (2012), among others).
</bodyText>
<figure confidence="0.943506818181818">
21
id
F&apos; �- B B,A �- C
Cut
F&apos;, A � C
x:A�-x:A
F&apos;,x : A �- t : B ( R A � t : A F&apos;,x : B �- u : C ( L
F&apos; - λx.t : A ( B F&apos;, A, y : A ( B �- u[y(t)/x] : C
F&apos; [- x : A ♦R F&apos;,x : A �- t : ♦B
F&apos; � q(x) : ♦A ♦L
F&apos;, y : ♦A � y � λx.t : ♦B
</figure>
<figureCaption confidence="0.978784">
Figure 1: Sequent calculus for a fragment of multiplicative linear logic enriched with a monadic modality,
together with a Curry-Howard correspondence between formulae and meaning terms.
</figureCaption>
<table confidence="0.8796958">
provable theorems in this logic.
A ( B ( C,A,B �- ♦C
A ( B ( C,♦A,B ♦C
A ( B ( C,A,♦B ♦C
A ( B ( C, ♦A, ♦B �- ♦C
</table>
<bodyText confidence="0.959289055555556">
In contrast, the following is not a theorem in the
logic:
A ( B ( C,I ( A,I ( B VI ( C (15)
In general, then, if we were to simply lift the type
of the lexical resources whose interpretation may
be dependent on a specific point of view, we would
be forced to lift all linguistic expressions that may
combine with them, thus generalizing to the worst
case after all.
The monadic machinery also achieves a higher
level of compositionality. In principle we could
directly encode our monad using the → type con-
structor, with linear implication, (, on the logical
side. However this alternative encoding wouldn’t
have the same deductive properties. Compare the
pattern of inferences we have for the monadic
type, in (11)–(14), with the equivalent one for the
simple type:
</bodyText>
<equation confidence="0.7362646">
A ( B ( C,A,B �- C (16)
A ( B ( C,I ( A,B �- I ( C (17)
A ( B ( C,A,I ( B �- I ( C (18)
A ( B ( C,I ( A,I ( B �- (19)
I ( I ( C
</equation>
<bodyText confidence="0.999942545454545">
In the case of the simple type, the final formula we
derive depends in some non-trivial way on the en-
tire collection of resources on the left-hand side of
the sequent. In contrast in the case of the monadic
type, the same type can be derived for all config-
urations. What is important is that we can pre-
dict the final formula without having to consider
the entire set of resources available. This shows
that the compositionality of our monadic approach
cannot be equivalently recapitulated in a simple
type theory.
</bodyText>
<sectionHeader confidence="0.997603" genericHeader="method">
3 Examples
</sectionHeader>
<bodyText confidence="0.999984941176471">
The starting point for the analysis of examples (1)-
(4) is the lexicon in table 1. The lexicon represents
the linguistic knowledge of the speaker, and at
the same time her knowledge about other agents’
grammars.
Most lexical entries are standard, since we do
not need to change the type and denotation of lex-
ical items that are not involved in the phenomena
under discussion. So, for instance, logical opera-
tors such as not and but are interpreted in the stan-
dard non-monadic way, as is a verb like punch or
kill. Referring expressions that are possibly con-
tentious, in the sense that they can be interpreted
differently by the speaker and other agents, instead
have the monadic type ♦e. This is reflected in
their denotation by the fact that their value varies
according to an interpretation index. We use a
special index Q to refer to the speaker’s own per-
spective, and assume that this is the default index
used whenever no other index is specifically in-
troduced. For example, in the case of the name
Spider-Man, the speaker is aware of his secret
identity and therefore interprets it as another name
for the individual Peter Parker, while Mary Jane
and Dr. Octopus consider Spider-Man a different
entity from Peter Parker.
We assume that sentences are interpreted in a
model in which all entities are mental entities, i.e.
that there is no direct reference to entities in the
world, but only to mental representations. Enti-
ties are therefore relativized with respect to the
agent that mentally represents them, where non-
contentious entities are always relativized accord-
ing to the speaker. This allows us to represent the
</bodyText>
<figure confidence="0.923301">
22
WORD DENOTATION TYPE
Reza rσ e
Kim kσ e
Dr. Octopus oσ e
Mary Jane mjσ e
Peter Parker ppσ e
not λp.-p t —* t
but λp.λq.p n q t —* t —* t
</figure>
<equation confidence="0.930855">
is λx.λy.x = y e — *e — *t
punch λo.λs.punch(s)(o) e —* e —* t
believe λc.λs.λi.B(s)(c(κ(s))) ♦t —* e —* ♦t
love λo.λs.λi.love(s)(o(κ(s))) ♦e —* e —* ♦t
�
esr if i = r,
Hesperus λi. ♦e
vσ if i = σ
Phosphorus λi. msr if i = r, ♦e
� vσ if i = σ
smi if i = o or i = mj,
Spider-Man λi. ♦e
� ppσ if i = σ
jr if i = r,
Jesus λi. ♦e
� jσ if i = σ
impk if i = k,
Sandy λi. ♦e
sσ if i = σ
</equation>
<tableCaption confidence="0.943484">
Table 1: Speaker’s lexicon
</tableCaption>
<bodyText confidence="0.974662291666667">
fact that different agents may have distinct equiv-
alencies between entities. For example, Reza in
our model does not equate the evening star and
the morning star, but the speaker equates them
with each other and with Venus. Therefore, the
speaker’s lexicon in table 1 represents the fact
that the speaker’s epistemic model includes what
the speaker knows about other agents’ models,
e.g. that Reza has a distinct denotation (from the
speaker) for Hesperus, that Mary Jane has a dis-
tinct representation for Spider-Man, that Kim has
a distinct representation for Sandy, etc.
The other special lexical entries in our lexicon
are those for verbs like believe and love. The two
entries are similar in the sense that they both take
an already monadic resource and actively supply
a specific interpretation index that corresponds to
the subject of the verbs. The function κ maps each
entity to the corresponding interpretation index,
i.e. κ : e —* i. For example, in the lexical en-
tries for believe and love, κ maps the subject to the
interpretation index of the subject. Thus, the entry
for believe uses the subject’s point of view as the
perspective used to evaluate its entire complement,
while love changes the interpretation of its object
relative to the perspective of its subject. However
we will see that the interaction of these lexical en-
tries and the evaluation order imposed by ? will al-
low us to let the complement of a verb like believe
and the object of a verb like love escape the spe-
cific effect of forcing the subject point of view, and
instead we will be able to derive readings in which
the arguments of the verb are interpreted using the
speaker’s point of view.
Figure 2 reports the four non-equivalent read-
ings that we derive in our system for example (1),
repeated here as (20).6
(20) Reza doesn’t believe that Hesperus is
Phosphorus.
Reading (21) assigns to both Hesperus and
Phosphorus the subject interpretation and results,
after contextualising the sentence by applying it
to the standard σ interpretation index, in the truth
conditions in (25), i.e. that Reza does not be-
lieve that the evening star is the morning star. This
6The logic generates six different readings but the monad
we are using here has a commutative behaviour, so four of
these readings are pairwise equivalent.
</bodyText>
<figure confidence="0.8588674">
23
JbelieveK (JHesperusK *Ax. JPhosphorusK * Ay.,7(JisK (x)(y)))(JRezaK) * Az.,7(JnotK (z)) (21)
JHesperusK *Ax. JbelieveK (JPhosphorusK * Ay.,7(JisK (x)(y)))(JRezaK) * Az.,7(JnotK (z)) (22)
JPhosphorusK *Ax. JbelieveK (JHesperusK * Ay.,7(JisK (y)(x)))(JRezaK) * Az.,7(JnotK (z)) (23)
JHesperusK * Ax. JPhosphorusK * Ay. JbelieveK (,7(JisK (x)(y)))(JRezaK) * Az.,7(JnotK (z)) (24)
</figure>
<figureCaption confidence="0.995297">
Figure 2: Non-equivalent readings for Reza doesn’t believe Hesperus is Phosphorus.
</figureCaption>
<bodyText confidence="0.999866666666667">
reading would not be contradictory in an epistemic
model (such as Reza’s model) where the evening
star and the morning star are not the same entity.
</bodyText>
<equation confidence="0.983424">
¬B(r)(esr = msr) (25)
</equation>
<bodyText confidence="0.999973">
In the case of (22) and (23) we get a similar ef-
fect although here we mix the epistemic models,
and one of the referring expressions is interpreted
under the speaker perspective while the other is
again interpreted under Reza’s perspective. For
these two readings we obtain respectively the truth
conditions in (26) and (27).
</bodyText>
<equation confidence="0.9997285">
¬B(r)(vσ = msr) (26)
¬B(r)(vσ = esr) (27)
</equation>
<bodyText confidence="0.9948385">
Finally for (24) we get the contradictory reading
that Reza does not believe that Venus is Venus, as
both referring expressions are evaluated using the
speaker’s interpretation index.
</bodyText>
<equation confidence="0.956392">
¬B(r)(vσ = vσ) (28)
</equation>
<bodyText confidence="0.995410214285714">
The different contexts for the interpretation of
referring expressions are completely determined
by the order in which we evaluate monadic re-
sources. This means that, just by looking at the
linear order of the lambda order, we can check
whether a referring expression is evaluated inside
the scope of a perspective changing operator such
as believe, or if it is interpreted using the standard
interpretation.
If we consider a case like sentence (2), we ought
to get only a contradictory reading as the statement
is intuitively contradictory. Our analysis produces
a single reading that indeed corresponds to a con-
tradictory interpretation:
</bodyText>
<equation confidence="0.898995">
JSpider-ManK * Ax. JSpider-ManK *
Ay.,7(JbutK (JpunchK (JDr. OctopusK)(x))
(JnotK (JpunchK (JDr. OctopusK)(y)))) (29)
</equation>
<bodyText confidence="0.999785333333333">
The verb punch is not a verb that can change
the interpretation perspective and therefore the po-
tentially controversial name Spider-Man is inter-
preted in both instances using the speaker’s inter-
pretation index. The result are unsatisfiable truth
conditions, as expected:
</bodyText>
<equation confidence="0.945062">
punch(oσ)(ppσ) ∧ ¬punch(oσ)(ppσ) (30)
</equation>
<bodyText confidence="0.968621">
In contrast a verb like love is defined in our lex-
icon as possibly changing the interpretation per-
spective of its object to that of its subject. There-
fore in the case of a sentence like (3), we ex-
pect one reading where the potentially contentious
name Spider-Man is interpreted according to the
subject of love, Mary Jane. This is in fact the re-
sult we obtain. Figure 3 reports the two readings
that our framework generates for (3).
Reading (31), corresponds to the non contradic-
tory interpretation of sentence (3), where Spider-
Man is interpreted according to Mary Jane’s per-
spective and therefore is assigned an entity differ-
ent from Peter Parker:
love(mjσ)(ppσ) ∧ ¬love(mjσ)(smmj) (33)
Reading (32) instead generates unsatisfiable truth
conditions, as Spider-Man is identified with Peter
Parker according to the speaker’s interpretation:
</bodyText>
<equation confidence="0.984046">
love(mjσ)(ppσ) ∧ ¬love(mjσ)(ppσ) (34)
</equation>
<bodyText confidence="0.99745975">
Our last example, (4), repeated here as (35), is
particularly interesting as we are not aware of pre-
vious work that discusses this type of sentence.
The non-contradictory reading that this sentence
has seems to be connected specifically to two dif-
ferent interpretations of the same name, Jesus,
both under the syntactic scope of the modal be-
lieve.
</bodyText>
<figure confidence="0.8031095">
(35) Reza doesn’t believe Jesus is Jesus.
24
JloveK (,q(JPeter ParkerK))(JMary JaneK) * Ap. JloveK (JSpider-ManK)(JMary JaneK) �
Aq.,q(JbutK (p)(JnotK (q))) (31)
JloveK (,q(JPeter ParkerK))(JMary JaneK) * Ap. JSpider-ManK * Ax. JloveK (,q(x))(JMary JaneK) *
Aq.,q(JbutK (p)(JnotK (q))) (32)
</figure>
<figureCaption confidence="0.861835">
Figure 3: Non-equivalent readings for Mary Jane loves Peter Parker but she doesn’t love Spider-Man.
</figureCaption>
<figure confidence="0.4777">
JbelieveK (JJesusK * Ax. JJesusK * Ay.,q(JisK (x)(y)))(JRezaK) Az.,q(JnotK (z)) (36)
JJesusK * Ax. JJesusK * Ay. JbelieveK (,q(JisK (x)(y)))(JRezaK) Az.,q(JnotK (z)) (37)
JJesusK * Ax. JbelieveK (JJesusK * Ay.,q(JisK (x)(y)))(JRezaK) Az.,q(JnotK (z)) (38)
</figure>
<figureCaption confidence="0.983949">
Figure 4: Non-equivalent readings for Reza doesn’t believe Jesus is Jesus.
</figureCaption>
<bodyText confidence="0.999653142857143">
Our system generates three non-equivalent read-
ings, reported here in figure 4.7
Reading (36) and (37) corresponds to two con-
tradictory readings of the sentence: in the first
case both instances of the name Jesus are inter-
preted from the subject perspective and therefore
attribute to Reza the non-belief in a tautology, sim-
ilarly in the second case, even though in this case
the two names are interpreted from the perspec-
tive of the speaker. In contrast the reading in (38)
corresponds to the interpretation that assigns two
different referents to the two instances of the name
Jesus, producing the truth conditions in (39) which
are satisfiable in a suitable model.
</bodyText>
<equation confidence="0.991948">
¬B(r)(jσ = jr) (39)
</equation>
<bodyText confidence="0.8905955">
The analysis of the Capgras example (5), re-
peated in (40), is equivalent; the non-contradictory
reading is shown in (41).
(40) Kim doesn’t believe Sandy is Sandy.
</bodyText>
<equation confidence="0.979199">
¬B(k)(sσ = impk) (41)
</equation>
<bodyText confidence="0.999855416666667">
We use impk as the speaker’s representation of
the “impostor” that Kim thinks has taken the place
of Sandy.
More generally, there are again three non-
equivalent readings, including the one above,
which are just those in figure 4, with JJesusK re-
placed by JSandyK and JRezaK replaced by JKimK.
7Again, there are six readings that correspond to different
proofs, but given the commutative behaviour of the Reader
monad, the fact that equality is commutative, and the fact that
we have in this case two identical lexical items, only three of
them are non-equivalent readings.
</bodyText>
<sectionHeader confidence="0.939751" genericHeader="method">
4 Comparison with traditional
approaches
</sectionHeader>
<bodyText confidence="0.999990451612903">
In this section we try to sketch how a traditional
approach to opaque contexts, such as one based
on a de dicto/de re ambiguity with respect to a
modal operator, would fare in the analysis of (4),
our most challenging example.
To try to explain the two readings in the con-
text of a standard possible worlds semantics, we
could take (4) to be ambiguous with respect to a
de dicto/de re reading. In the case of the de dicto
reading (which corresponds to the non-satisfiable
reading) the two names are evaluated under the
scope of the doxastic operator believe, i.e. they
both refer to the same entity that is assigned to the
name Jesus in each accessible world. Clearly this
is always the case, and so (4) is not satisfiable. In
the case of the de re reading, we assume that the
two names are evaluated at different worlds that
assign different referents to the two names. One
of these two worlds will be the actual world and
the other one of the accesible worlds. The reading
is satisfiable if the doxastic modality links the ac-
tual world with one in which the name Jesus refers
to a different entity. Notice that for this analysis to
work we need to make two assumptions: 1. that
names behave as quantifiers with the property of
escaping modal contexts, 2. that names can be as-
signed different referents in different worlds, i.e.
we have to abandon the standard notion that names
are rigid designators (Kripke, 1972). In contrast,
in our approach we do not need to abandon the
idea of rigid designation for names (within each
</bodyText>
<page confidence="0.701128">
25
</page>
<bodyText confidence="0.994398903846154">
agent’s model).
However, such an approach would present a
number of rather serious problems. The first is
connected with the assumption that names are
scopeless. This is a common hypothesis in natural
language semantics and indeed if we model names
as generalized quantifiers they can be proven to be
scopeless (Zimmermann, 1993). But this is prob-
lematic for our example. In fact we would predict
that both instances of the name Jesus escape the
scope of believe. The resulting reading would bind
the quantified individual to the interpretation of Je-
sus in the actual world. In this way we only cap-
ture the non-satisfiable reading. To save the sco-
pal approach we would need to assume that names
in fact are sometimes interpreted in the scope of
modal operators.
One way to do this would be to set up our se-
mantic derivations so that they allow different sco-
pal relations between quantifiers and other opera-
tors. The problem with this solution is that for sen-
tences like (4) we generate twelve different deriva-
tions, some of which do not correspond to valid
readings of the sentence.
Even assuming that we find a satisfactory solu-
tion for these problems, the scopal approach can-
not really capture the intuitions behind opacity in
all contexts. Consider again (4) and assume that
there are two views about Jesus: Jesus as a divine
being and Jesus as a human being. Assume that Je-
sus is a human being in the actual world and that
Reza is an atheist, then the only possible reading
is the non-satisfiable one, as the referent for Jesus
will be the same in the actual world and all acces-
sible Reza-belief-worlds. The problem is that the
scopal approach assumes a single modal model,
while in this case it seems that there are two doxas-
tic models, Reza’s model and the speaker’s model,
under discussion. In contrast, in our approach the
relevant part of Reza’s model is embedded inside
the speaker’s model and interpretation indices in-
dicate which interpretation belongs to Reza and
which to the speaker.
Finally an account of modality in terms of sco-
pal properties is necessarily limited to cases in
which modal operators are present. While this
may be a valid position in the case of typical in-
tensional verbs like seek or want, it would not be
clear how we could extend this approach to cases
like 3, as the verb love has no clear modal con-
notation. Thus, the scopal approach would not be
sufficiently general.
</bodyText>
<sectionHeader confidence="0.992972" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999997551724138">
We started by discussing a diverse collection of
expressions that share the common property of
showing nontrivial referential behaviours. We
have proposed a common analysis of all these
expressions in terms of a combination of differ-
ent interpretation contexts. We have claimed that
the switch to a different interpretation context is
triggered by specific lexical items, such as modal
verbs but also verbs that express some kind of
mental attitude of the subject of the verb towards
its object. The context switch is not obligatory,
as witnessed by the multiple readings that the sen-
tences discussed seem to have. We implemented
our analysis using monads. The main idea of
our formal implementation is that referring ex-
pressions that have a potential dependency from
an interpretation context can be implemented as
functions from interpretation indices to fully in-
terpreted values. Similarly, the linguistic triggers
for context switch are implemented in the lexi-
con as functions that can modify the interpreta-
tion context of their arguments. Monads allow
us to freely combine these “lifted” meanings with
standard ones, avoiding in this way to generalize
our lexicon to the worst case. We have also seen
how more traditional approaches, while capable of
dealing with some of the examples we discuss, are
not capable of providing a generalised explanation
of the observed phenomena.
</bodyText>
<sectionHeader confidence="0.993975" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.99594125">
The authors would like to thank our anonymous
reviewers for their comments. This research is
supported by a Marie Curie Intra-European Fel-
lowship from the Europoean Commision under
contract number 327811 (Giorgolo) and an Early
Researcher Award from the Ontario Ministry of
Research and Innovation and NSERC Discovery
Grant #371969 (Asudeh).
</bodyText>
<page confidence="0.713095">
26
</page>
<sectionHeader confidence="0.991888" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999925581395349">
Ash Asudeh. 2012. The Logic of Pronominal Resump-
tion. Oxford Studies in Theoretical Linguistics. Ox-
ford University Press, New York.
Nick Benton, G. M. Bierman, and Valeria de Paiva.
1998. Computational types from a logical per-
spective. Journal of Functional Programming,
8(2):177–193.
Mary Dalrymple. 2001. Lexical Functional Grammar.
Academic Press, San Diego, CA.
Chris Fox and Shalom Lappin. 2005. Foundations of
Intensional Semantics. Blackwell, Oxford.
Gottlob Frege. 1892. ¨Uber Sinn und Bedeutung.
Zeitschrift f¨ur Philosophie und philosophische Kri-
tik, 100:25–50.
Gottlob Frege. 1952. On sense and reference. In Pe-
ter T. Geach and Max Black, editors, Translations
from the Philosophical Writings of Gottlob Frege,
pages 56–78. Blackwell, Oxford. Translation of
Frege (1892).
Irene Heim. 1998. Anaphora and semantic interpreta-
tion: A reinterpretation of Reinhart’s approach. In
Uli Sauerland and Orin Percus, editors, The Inter-
pretive Tract, volume 25 of MIT Working Papers in
Linguistics, pages 205–246. MITWPL, Cambridge,
MA.
Saul Kripke. 1972. Naming and necessity. In Donald
Davidson and Gilbert Harman, editors, Semantics of
Natural Language, pages 253–355. Reidel.
Eugenio Moggi. 1989. Computational lambda-
calculus and monads. In LICS, pages 14–23. IEEE
Computer Society.
Michael Moortgat. 2011. Categorial type logics. In
Johan van Benthem and Alice ter Meulen, editors,
Handbook of Logic and Language, pages 95–179.
Elsevier, second edition.
Chung-chieh Shan. 2001. Monads for natural lan-
guage semantics. In Kristina Striegnitz, editor, Pro-
ceedings of the ESSLLI-2001 Student Session, pages
285–298. 13th European Summer School in Logic,
Language and Information.
Thomas Ede Zimmermann. 1993. Scopeless quanti-
fiers and operators. Journal of Philosophical Logic,
22(5):545–561, October.
</reference>
<page confidence="0.93139">
27
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.299944">
<title confidence="0.999286">Monads as a Solution for Generalized Opacity</title>
<author confidence="0.999406">Gianluca Giorgolo Ash Asudeh</author>
<affiliation confidence="0.999569">University of Oxford University of Oxford and Carleton University</affiliation>
<abstract confidence="0.997388727272727">In this paper we discuss a conservative extension of the simply-typed lambda calculus in order to model a class of expressions that generalize the notion of opaque contexts. Our extension is based on previous work in the semantics of programming languages aimed at providing a mathematical characterization of computations that some kind of effect and is based on the notion of mona construction in category theory that, intuitively, maps a collection of “simple” values and “simple” functions into a more complex value space, in a canonical way. The main advantages of our approach with respect to traditional analyses of opacity are the fact that we are able to explain in a uniform way a set of different but related phenomena, and that we do so in a principled way that has been shown to also explain other linguistic phenomena (Shan,</abstract>
<intro confidence="0.304271">2001).</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Ash Asudeh</author>
</authors>
<title>The Logic of Pronominal Resumption. Oxford Studies in Theoretical Linguistics.</title>
<date>2012</date>
<publisher>Oxford University Press,</publisher>
<location>New York.</location>
<contexts>
<context position="12614" citStr="Asudeh (2012)" startWordPosition="2128" endWordPosition="2129">hough inefficient) way of computing the meaning of a linguistic expression. A key advantage we gain from the monadic approach is that we are not forced to generalize all lexical entries to the “worst case”. With the logical setup we have just described we can in fact freely mix monadic and non monadic resources. For example, in our logic we can combine a pure version of a binary function with arguments that are either pure or monadic, as the following are all 5Linearity is a property that has been argued for in the context of natural language semantics by various researchers (Moortgat (2011), Asudeh (2012), among others). 21 id F&apos; �- B B,A �- C Cut F&apos;, A � C x:A�-x:A F&apos;,x : A �- t : B ( R A � t : A F&apos;,x : B �- u : C ( L F&apos; - λx.t : A ( B F&apos;, A, y : A ( B �- u[y(t)/x] : C F&apos; [- x : A ♦R F&apos;,x : A �- t : ♦B F&apos; � q(x) : ♦A ♦L F&apos;, y : ♦A � y � λx.t : ♦B Figure 1: Sequent calculus for a fragment of multiplicative linear logic enriched with a monadic modality, together with a Curry-Howard correspondence between formulae and meaning terms. provable theorems in this logic. A ( B ( C,A,B �- ♦C A ( B ( C,♦A,B ♦C A ( B ( C,A,♦B ♦C A ( B ( C, ♦A, ♦B �- ♦C In contrast, the following is not a theorem in the l</context>
</contexts>
<marker>Asudeh, 2012</marker>
<rawString>Ash Asudeh. 2012. The Logic of Pronominal Resumption. Oxford Studies in Theoretical Linguistics. Oxford University Press, New York.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nick Benton</author>
<author>G M Bierman</author>
<author>Valeria de Paiva</author>
</authors>
<title>Computational types from a logical perspective.</title>
<date>1998</date>
<journal>Journal of Functional Programming,</journal>
<volume>8</volume>
<issue>2</issue>
<marker>Benton, Bierman, de Paiva, 1998</marker>
<rawString>Nick Benton, G. M. Bierman, and Valeria de Paiva. 1998. Computational types from a logical perspective. Journal of Functional Programming, 8(2):177–193.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mary Dalrymple</author>
</authors>
<title>Lexical Functional Grammar.</title>
<date>2001</date>
<publisher>Academic Press,</publisher>
<location>San Diego, CA.</location>
<contexts>
<context position="11486" citStr="Dalrymple, 2001" startWordPosition="1947" endWordPosition="1948">linguistic resources we use a logical calculus adapted for the linear case5 from the one introduced by Benton et al. (1998). The calculus is based on a language with two connectives corresponding to our type constructors: (, a binary connective, that corresponds to (linear) functional types, and ♦, a unary connective, that represents monadic types. The logical calculus is described by the proof rules in figure 1. The rules come annotated with lambda terms that characterise the Curry-Howard correspondence between proofs and meaning terms. Here we assume a Lexical Functional Grammar-like setup (Dalrymple, 2001), where a syntactic and functional grammar component feeds the semantic component with lexical resources already marked with respect to their predicate-argument relationships. Alternatively we could modify the calculus to a categorial setting, by introducing a structural connective, and using directional versions of the implication connective together with purely structural rules to control the compositional process. We can prove that the Cut rule is admissible, therefore the calculus becomes an effective (although inefficient) way of computing the meaning of a linguistic expression. A key adv</context>
</contexts>
<marker>Dalrymple, 2001</marker>
<rawString>Mary Dalrymple. 2001. Lexical Functional Grammar. Academic Press, San Diego, CA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chris Fox</author>
<author>Shalom Lappin</author>
</authors>
<title>Foundations of Intensional Semantics.</title>
<date>2005</date>
<publisher>Blackwell,</publisher>
<location>Oxford.</location>
<contexts>
<context position="8091" citStr="Fox and Lappin (2005)" startWordPosition="1338" endWordPosition="1341">ith a verb such as believe, to actually refer to two different entities. In one case we will argue that the name Jesus is interpreted using the speaker’s interpretation while in the other case it is Reza’s interpretation that is used. Notice that we can apply our analysis to any natural language expression that may have different interpretations. This means that, for example, we can extend our analysis, which is limited to referring expressions here for space reasons, to other cases, such as the standard examples involving ideally synonymous predicates like groundhog and woodchuck (see, e.g., Fox and Lappin (2005)). The paper is organised as follows: in section 2 we discuss the technical details of our analysis; in section 3 we discuss our analyses of the motivating examples; section 4 compares our approach with a standard approach to opacity; we conclude in section 5. 3Shan (2001) was the first to sketch the idea of using the Reader monad to model intensional phenomena. 20 2 Monads and interpretation functions To avoid introducing the complexities of the categorical formalism, we introduce monads as they are usually encountered in the computer science literature. A monad is defined as a triple h♦, q, </context>
</contexts>
<marker>Fox, Lappin, 2005</marker>
<rawString>Chris Fox and Shalom Lappin. 2005. Foundations of Intensional Semantics. Blackwell, Oxford.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gottlob Frege</author>
</authors>
<date>1892</date>
<booktitle>Uber Sinn und Bedeutung. Zeitschrift f¨ur Philosophie und philosophische Kritik,</booktitle>
<pages>100--25</pages>
<contexts>
<context position="1237" citStr="Frege, 1892" startWordPosition="198" endWordPosition="199">on in category theory that, intuitively, maps a collection of “simple” values and “simple” functions into a more complex value space, in a canonical way. The main advantages of our approach with respect to traditional analyses of opacity are the fact that we are able to explain in a uniform way a set of different but related phenomena, and that we do so in a principled way that has been shown to also explain other linguistic phenomena (Shan, 2001). 1 Introduction Opaque contexts have been an active area of research in natural language semantics since Frege’s original discussion of the puzzle (Frege, 1892). A sentence like (1) has a non-contradictory interpretation despite the fact that the two referring expressions Hesperus and Phosphorus refer to the same entity, the planet we know as Venus. (1) Reza doesn’t believe Hesperus is Phosphorus. The fact that a sentence like (1) includes the modal believe has influenced much of the analyses proposed in the literature, and has linked the phenomenon with the notion of modality. In this paper we challenge this view and try to position data like (1) inside a larger framework that also includes other types of expressions. We decompose examples like (1) </context>
</contexts>
<marker>Frege, 1892</marker>
<rawString>Gottlob Frege. 1892. ¨Uber Sinn und Bedeutung. Zeitschrift f¨ur Philosophie und philosophische Kritik, 100:25–50.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gottlob Frege</author>
</authors>
<title>On sense and reference.</title>
<date>1952</date>
<journal>Translation of Frege</journal>
<booktitle>Translations from the Philosophical Writings of Gottlob Frege,</booktitle>
<pages>56--78</pages>
<editor>In Peter T. Geach and Max Black, editors,</editor>
<publisher>Blackwell,</publisher>
<location>Oxford.</location>
<marker>Frege, 1952</marker>
<rawString>Gottlob Frege. 1952. On sense and reference. In Peter T. Geach and Max Black, editors, Translations from the Philosophical Writings of Gottlob Frege, pages 56–78. Blackwell, Oxford. Translation of Frege (1892).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Irene Heim</author>
</authors>
<title>Anaphora and semantic interpretation: A reinterpretation of Reinhart’s approach.</title>
<date>1998</date>
<booktitle>In Uli Sauerland and Orin Percus, editors, The Interpretive Tract,</booktitle>
<volume>25</volume>
<pages>205--246</pages>
<publisher>MITWPL,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="6024" citStr="Heim, 1998" startWordPosition="999" endWordPosition="1000">mple, kill and murder, since murder does involve a mental attitude of intention and the corresponding sentence to (6) is not necessarily contradictory: (7) Dr. Octopus murdered Spider-Man but he didn’t murder Peter Parker. The implementation of our analysis is based on monads. Monads are a construction in category theory that defines a canonical way to map a set of objects and functions that we may consider as ent, or other close family member has been replaced by an identical-looking impostor.” 2Indeed, one way to understand guises is as different ways in which we interpret a referring term (Heim, 1998). simple into a more complex object and function space. They have been successfully used in the semantics of programming languages to characterise computations that are not “pure”. By pure we mean code objects that are totally referentially transparent (i.e. do not depend on external factors and return the same results given the same input independently of their execution context), and also that do not have effects on the “real world”. In contrast, monads are used to model computations that for example read from or write to a file, that depend on some random process or whose return value is no</context>
</contexts>
<marker>Heim, 1998</marker>
<rawString>Irene Heim. 1998. Anaphora and semantic interpretation: A reinterpretation of Reinhart’s approach. In Uli Sauerland and Orin Percus, editors, The Interpretive Tract, volume 25 of MIT Working Papers in Linguistics, pages 205–246. MITWPL, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Saul Kripke</author>
</authors>
<title>Naming and necessity.</title>
<date>1972</date>
<booktitle>Semantics of Natural Language,</booktitle>
<pages>253--355</pages>
<editor>In Donald Davidson and Gilbert Harman, editors,</editor>
<publisher>Reidel.</publisher>
<contexts>
<context position="26183" citStr="Kripke, 1972" startWordPosition="4500" endWordPosition="4501"> different worlds that assign different referents to the two names. One of these two worlds will be the actual world and the other one of the accesible worlds. The reading is satisfiable if the doxastic modality links the actual world with one in which the name Jesus refers to a different entity. Notice that for this analysis to work we need to make two assumptions: 1. that names behave as quantifiers with the property of escaping modal contexts, 2. that names can be assigned different referents in different worlds, i.e. we have to abandon the standard notion that names are rigid designators (Kripke, 1972). In contrast, in our approach we do not need to abandon the idea of rigid designation for names (within each 25 agent’s model). However, such an approach would present a number of rather serious problems. The first is connected with the assumption that names are scopeless. This is a common hypothesis in natural language semantics and indeed if we model names as generalized quantifiers they can be proven to be scopeless (Zimmermann, 1993). But this is problematic for our example. In fact we would predict that both instances of the name Jesus escape the scope of believe. The resulting reading w</context>
</contexts>
<marker>Kripke, 1972</marker>
<rawString>Saul Kripke. 1972. Naming and necessity. In Donald Davidson and Gilbert Harman, editors, Semantics of Natural Language, pages 253–355. Reidel.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eugenio Moggi</author>
</authors>
<title>Computational lambdacalculus and monads.</title>
<date>1989</date>
<booktitle>In LICS,</booktitle>
<pages>14--23</pages>
<publisher>IEEE Computer Society.</publisher>
<marker>Moggi, 1989</marker>
<rawString>Eugenio Moggi. 1989. Computational lambdacalculus and monads. In LICS, pages 14–23. IEEE Computer Society.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Moortgat</author>
</authors>
<title>Categorial type logics.</title>
<date>2011</date>
<booktitle>In Johan van Benthem and Alice ter Meulen, editors, Handbook of Logic and Language,</booktitle>
<pages>95--179</pages>
<publisher>Elsevier,</publisher>
<note>second edition.</note>
<contexts>
<context position="12599" citStr="Moortgat (2011)" startWordPosition="2126" endWordPosition="2127">an effective (although inefficient) way of computing the meaning of a linguistic expression. A key advantage we gain from the monadic approach is that we are not forced to generalize all lexical entries to the “worst case”. With the logical setup we have just described we can in fact freely mix monadic and non monadic resources. For example, in our logic we can combine a pure version of a binary function with arguments that are either pure or monadic, as the following are all 5Linearity is a property that has been argued for in the context of natural language semantics by various researchers (Moortgat (2011), Asudeh (2012), among others). 21 id F&apos; �- B B,A �- C Cut F&apos;, A � C x:A�-x:A F&apos;,x : A �- t : B ( R A � t : A F&apos;,x : B �- u : C ( L F&apos; - λx.t : A ( B F&apos;, A, y : A ( B �- u[y(t)/x] : C F&apos; [- x : A ♦R F&apos;,x : A �- t : ♦B F&apos; � q(x) : ♦A ♦L F&apos;, y : ♦A � y � λx.t : ♦B Figure 1: Sequent calculus for a fragment of multiplicative linear logic enriched with a monadic modality, together with a Curry-Howard correspondence between formulae and meaning terms. provable theorems in this logic. A ( B ( C,A,B �- ♦C A ( B ( C,♦A,B ♦C A ( B ( C,A,♦B ♦C A ( B ( C, ♦A, ♦B �- ♦C In contrast, the following is not a t</context>
</contexts>
<marker>Moortgat, 2011</marker>
<rawString>Michael Moortgat. 2011. Categorial type logics. In Johan van Benthem and Alice ter Meulen, editors, Handbook of Logic and Language, pages 95–179. Elsevier, second edition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Chung-chieh Shan</author>
</authors>
<title>Monads for natural language semantics.</title>
<date>2001</date>
<booktitle>Proceedings of the ESSLLI-2001 Student Session,</booktitle>
<pages>285--298</pages>
<editor>In Kristina Striegnitz, editor,</editor>
<contexts>
<context position="1076" citStr="Shan, 2001" startWordPosition="173" endWordPosition="174">roviding a mathematical characterization of computations that produce some kind of side effect (Moggi, 1989), and is based on the notion of monads, a construction in category theory that, intuitively, maps a collection of “simple” values and “simple” functions into a more complex value space, in a canonical way. The main advantages of our approach with respect to traditional analyses of opacity are the fact that we are able to explain in a uniform way a set of different but related phenomena, and that we do so in a principled way that has been shown to also explain other linguistic phenomena (Shan, 2001). 1 Introduction Opaque contexts have been an active area of research in natural language semantics since Frege’s original discussion of the puzzle (Frege, 1892). A sentence like (1) has a non-contradictory interpretation despite the fact that the two referring expressions Hesperus and Phosphorus refer to the same entity, the planet we know as Venus. (1) Reza doesn’t believe Hesperus is Phosphorus. The fact that a sentence like (1) includes the modal believe has influenced much of the analyses proposed in the literature, and has linked the phenomenon with the notion of modality. In this paper </context>
<context position="8364" citStr="Shan (2001)" startWordPosition="1387" endWordPosition="1388">ural language expression that may have different interpretations. This means that, for example, we can extend our analysis, which is limited to referring expressions here for space reasons, to other cases, such as the standard examples involving ideally synonymous predicates like groundhog and woodchuck (see, e.g., Fox and Lappin (2005)). The paper is organised as follows: in section 2 we discuss the technical details of our analysis; in section 3 we discuss our analyses of the motivating examples; section 4 compares our approach with a standard approach to opacity; we conclude in section 5. 3Shan (2001) was the first to sketch the idea of using the Reader monad to model intensional phenomena. 20 2 Monads and interpretation functions To avoid introducing the complexities of the categorical formalism, we introduce monads as they are usually encountered in the computer science literature. A monad is defined as a triple h♦, q, *i. ♦ is what we call a functor, in our case a mapping between types and functions. We call the component of ♦ that maps between types ♦1, while the one that maps between functions ♦2. In our case ♦1 will map each type to a new type that corresponds to the original type wi</context>
</contexts>
<marker>Shan, 2001</marker>
<rawString>Chung-chieh Shan. 2001. Monads for natural language semantics. In Kristina Striegnitz, editor, Proceedings of the ESSLLI-2001 Student Session, pages 285–298. 13th European Summer School in Logic, Language and Information.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Thomas Ede Zimmermann</author>
</authors>
<title>Scopeless quantifiers and operators.</title>
<date>1993</date>
<journal>Journal of Philosophical Logic,</journal>
<volume>22</volume>
<issue>5</issue>
<contexts>
<context position="26625" citStr="Zimmermann, 1993" startWordPosition="4573" endWordPosition="4574">al contexts, 2. that names can be assigned different referents in different worlds, i.e. we have to abandon the standard notion that names are rigid designators (Kripke, 1972). In contrast, in our approach we do not need to abandon the idea of rigid designation for names (within each 25 agent’s model). However, such an approach would present a number of rather serious problems. The first is connected with the assumption that names are scopeless. This is a common hypothesis in natural language semantics and indeed if we model names as generalized quantifiers they can be proven to be scopeless (Zimmermann, 1993). But this is problematic for our example. In fact we would predict that both instances of the name Jesus escape the scope of believe. The resulting reading would bind the quantified individual to the interpretation of Jesus in the actual world. In this way we only capture the non-satisfiable reading. To save the scopal approach we would need to assume that names in fact are sometimes interpreted in the scope of modal operators. One way to do this would be to set up our semantic derivations so that they allow different scopal relations between quantifiers and other operators. The problem with </context>
</contexts>
<marker>Zimmermann, 1993</marker>
<rawString>Thomas Ede Zimmermann. 1993. Scopeless quantifiers and operators. Journal of Philosophical Logic, 22(5):545–561, October.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>