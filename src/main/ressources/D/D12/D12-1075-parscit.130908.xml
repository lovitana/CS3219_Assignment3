<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.030606">
<title confidence="0.9983745">
Type-Supervised Hidden Markov Models for Part-of-Speech Tagging
with Incomplete Tag Dictionaries
</title>
<author confidence="0.998775">
Dan Garrette
</author>
<affiliation confidence="0.9997325">
Department of Computer Science
The University of Texas at Austin
</affiliation>
<email confidence="0.992235">
dhg@cs.utexas.edu
</email>
<author confidence="0.996734">
Jason Baldridge
</author>
<affiliation confidence="0.9995375">
Department of Linguistics
The University of Texas at Austin
</affiliation>
<email confidence="0.996843">
jbaldrid@utexas.edu
</email>
<sectionHeader confidence="0.997373" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999859684210526">
Past work on learning part-of-speech taggers
from tag dictionaries and raw data has re-
ported good results, but the assumptions made
about those dictionaries are often unrealistic:
due to historical precedents, they assume ac-
cess to information about labels in the raw
and test sets. Here, we demonstrate ways to
learn hidden Markov model taggers from in-
complete tag dictionaries. Taking the MIN-
GREEDY algorithm (Ravi et al., 2010) as a
starting point, we improve it with several intu-
itive heuristics. We also define a simple HMM
emission initialization that takes advantage of
the tag dictionary and raw data to capture both
the openness of a given tag and its estimated
prevalence in the raw data. Altogether, our
augmentations produce improvements to per-
formance over the original MIN-GREEDY al-
gorithm for both English and Italian data.
</bodyText>
<sectionHeader confidence="0.999516" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999959">
Learning accurate part-of-speech (POS) taggers
based on plentiful labeled training material is gener-
ally considered a solved problem. The best taggers
obtain accuracies of over 97% for English newswire
text in the Penn Treebank, which can be consid-
ered as an upper-bound that matches human perfor-
mance on the same task (Manning, 2011). How-
ever, as Manning notes, this story changes as soon
as one is working with different assumptions and
data, including having less training data, different
kinds of training data, other languages, and other
domains. Such POS tagging work has been plen-
tiful and includes efforts to induce POS tags without
labels (Christodoulopoulos et al., 2010); learn from
POS-tag dictionaries (Ravi et al., 2010), incom-
plete dictionaries (Hasan and Ng, 2009) and human-
constructed dictionaries (Goldberg et al., 2008);
bootstrap taggers for a language based on knowl-
edge about other languages (Das and Petrov, 2011),
and creating supervised taggers for new, challenging
domains such as Twitter (Gimpel et al., 2011).
Here, we focus on learning from tag dictionar-
ies. This is often characterized as unsupervised or
weakly supervised training. We adopt the terminol-
ogy type-supervised training to distinguish it from
unsupervised training from raw text and supervised
training from word tokens labeled with their parts-
of-speech. Work on type-supervision goes back to
(Merialdo, 1994), who introduced the still standard
procedure of using a bigram Hidden Markov Model
(HMM) trained via Expectation Maximization.
Early research appeared to show that learning
from types works nearly as well as learning from
tokens, with researchers in the 1990s obtaining ac-
curacies up to 96% on English (e.g. Kupiec (1992)).
However, the tag dictionaries in these cases were ob-
tained from labeled tokens. While replicating earlier
experiments, Banko and Moore (2004) discovered
that performance was highly dependent on clean-
ing tag dictionaries using statistics gleaned from the
tokens. This greatly simplifies the job of a type-
supervised HMM: it no longer must entertain entries
for uncommon word-tag pairs (or mistaken pairs
due to annotation errors), which otherwise stand on
equal footing with the common ones. When the
full, noisy tag dictionary was employed, Banko and
Moore found accuracies dropped from 96% to 77%.
Banko and Moore’s observations spurred a new
line of research that sought to improve performance
in the face of full, noisy dictionaries; see Ravi and
</bodyText>
<page confidence="0.974382">
821
</page>
<note confidence="0.846737">
Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, pages 821–831, Jeju Island, Korea, 12–14 July 2012. c�2012 Association for Computational Linguistics
</note>
<bodyText confidence="0.99981837037037">
Knight (2009) for an overview. The highest accu-
racy achieved to date under these assumptions is
91.6% (Ravi et al., 2010). However, as is often
noted (including by the authors themselves), many
papers that work on learning taggers from tag dic-
tionaries make unrealistic assumptions about the tag
dictionaries they use as input (Toutanova and John-
son, 2008; Ravi and Knight, 2009; Hasan and Ng,
2009). For example, tag dictionaries are typically
constructed with every token-tag pair in the data, in-
cluding those that appear only in the test set. This
means that the evaluation of these taggers does not
measure how they perform on sentences that contain
unseen words or unseen word-tag pairs, a likely oc-
currence in real use of a trained tagger.
We show that it is possible to achieve good tag-
ging accuracy using a noisy and incomplete tag dic-
tionary that has no access to the tags of the raw and
test data and no access to the tag frequency infor-
mation of the labeled training data from which the
dictionary is drawn. We build on Ravi et al.’s (2010)
model minimization approach, which reduces dic-
tionary noise by greedily approximating the mini-
mum set of tag bigrams needed to cover the raw data
and exploits that information as a constraint on the
initialization of the model before running EM. We
extend their method in four distinct ways.
</bodyText>
<listItem confidence="0.91029825">
1. Enable the algorithm to be used with incomplete
dictionaries by exploiting the type-based infor-
mation provided by the tag dictionary and raw
text to initialize EM, and by training a standard
supervised HMM on the output of EM.
2. Improve the greedy procedure to find a better
minimized set of tag-tag bigrams.
3. Modify the method to return only the set of bi-
grams required to tag sentences instead of keep-
ing all bigrams chosen by minimization.
4. Exploit the paths found during minimization as a
direct initialization for EM.
</listItem>
<bodyText confidence="0.999929285714286">
Together, these improvements make it possible to
use model minimization in a realistic context, and
obtain higher performance: on English, results go
from 63.5% for a vanilla HMM to 82.1% for an
HMM that uses strategies to deal with unknowns,
then to 85.0% with Ravi and Knight’s minimization
and finally to 88.5% with our enhancements.
</bodyText>
<sectionHeader confidence="0.992373" genericHeader="method">
2 Supervision for HMMs
</sectionHeader>
<bodyText confidence="0.9994072">
Hidden Markov Models (HMMs) are well-known
generative probabilistic sequence models commonly
used for POS-tagging. The probability of a tag se-
quence given a word sequence is determined from
the product of emission and transition probabilities:
</bodyText>
<equation confidence="0.995232">
N
P(t|w) a P(wi|ti) - P(ti|ti−1)
i=1
</equation>
<bodyText confidence="0.960169">
HMMs can be trained directly from labeled data by
calculating maximum likelihood estimates or from
incomplete data using Expectation Maximization
(EM) (Dempster et al., 1977). We use both strate-
gies in this work: EM is used to estimate models
that can automatically label raw tokens, and then a
new HMM is estimated from that auto-labeled data.
</bodyText>
<subsectionHeader confidence="0.952514">
2.1 Token-supervised training
</subsectionHeader>
<bodyText confidence="0.999747">
We use a simple but effective smoothing regime to
account for unknown words and unseen tag-tag tran-
sitions. For emissions:
</bodyText>
<equation confidence="0.999948666666667">
C(ti, wi) + α(ti)Puni(wi)
P(wi|ti) =
C(ti) + α(ti)
</equation>
<bodyText confidence="0.999701">
where Puni(wi) is the unigram probability of wi,
and α(ti) is a tag specific amount of mass for
smoothing. We use one-count smoothing (Chen and
Goodman, 1996), where α(ti) is based on the num-
ber of words that occur with ti once:
</bodyText>
<equation confidence="0.973844">
α(ti) = |wi : C(ti, wi) = 1|
</equation>
<bodyText confidence="0.9987362">
Since open-class tags occur more frequently with
words that appear once, they will reserve more mass
for unknown words than closed-class tags will. The
transition distributions are smoothed in a similar
fashion:
</bodyText>
<equation confidence="0.983459">
A(ti−1) = |ti : C(ti−1, ti) = 1|
</equation>
<bodyText confidence="0.999968166666667">
This simple scheme is quite effective: an HMM
trained on the Penn Treebank sections 0-18 and eval-
uated on sections 19-21 and smoothed in this way
obtains 96.5% accuracy. We do not use gold stan-
dard labels elsewhere for this paper, but do use this
model on the output of type-supervised HMMs.
</bodyText>
<equation confidence="0.999957">
C(ti−1, ti) + A(ti−1)Puni(ti)
P(ti|ti−1) =
C(ti−1) + A(ti−1)
</equation>
<page confidence="0.990511">
822
</page>
<subsectionHeader confidence="0.989934">
2.2 Type-supervised training
</subsectionHeader>
<bodyText confidence="0.999995608695652">
We are primarily interested in learning taggers from
tag dictionaries combined with unlabeled text. As is
standard, we use EM to iteratively estimate the tran-
sition and emission probability parameters to maxi-
mize the likelihood of unlabeled data. It is known,
however, that EM has particular problems learning a
good HMM for POS tagging (Johnson, 2007; Ravi
and Knight, 2009). One reason is that EM gener-
ally tries to learn probability distributions that are
fairly uniform while POS tag frequencies are quite
skewed. For example, “a” appears in the training
data with seven different tags, but 99.9% of “a” to-
kens are determiners. Thus, the accuracy of anything
approaching a uniform distribution for “a” tags will
suffer greatly. In the context of unsupervised POS
tagging models, modeling this distinction greatly
improves results (Moon et al., 2010). Here, we can
simply exploit the tag dictionary and raw data.
An initial set of parameters for the transitions
and emissions must be supplied as the input to EM.
Given just a tag dictionary, the simplest initializa-
tion is to set all tag transitions to be uniform, rang-
ing over all tag continuations, while for emissions, a
uniform distribution over all words that occur with
the tag is assigned. This may be appropriate when a
complete tag dictionary is available, including com-
plete information for words that appear only in the
test data. This is because there will never be any un-
known words during model estimation or inference.
Likewise, there will never be a situation where the
tag dictionary rules out all possible tag transitions
between two adjacent tokens in training or testing.
As a result, no smoothing is needed in this scenario.
The problem with this is that estimating a model
based on type-supervision requires raw text, and if
we have an incomplete tag dictionary, some of the
words in that text will be missing from the tag dic-
tionary. In a Bayesian setting, priors provide mass
for such tokens; models are estimated using either
Gibbs sampling or variational inference (Johnson,
2007). However, we use vanilla EM here; as a con-
sequence, once a parameter is zero, it is always zero.
We thus need to ensure that mass is reserved for
words outside the tag dictionary at the start of EM.
(For transitions, uniform distributions are sufficient
since the set of tags is closed.)
</bodyText>
<subsectionHeader confidence="0.99898">
2.3 Emission probability initialization
</subsectionHeader>
<bodyText confidence="0.999796743589744">
The simplest way to initialize the emission distribu-
tions is to assign a count of one to every entry in the
tag dictionary, and one count for unknowns. Then,
during each iteration of EM, the expectation step is
able to estimate new non-zero counts for all possible
emissions encountered in the raw corpus. This basic
strategy allows one to train an HMM with EM us-
ing only an incomplete tag dictionary and raw text.
However, this basic approach for emission proba-
bilities produces bad unknown-word probabilities.
Specifically, if for each tag we simply assume one
count for each entry in the tag dictionary and one
count for unknowns and then normalize, the proba-
bility of an unknown word having a specific tag is
inversely correlated with the number of word types
associated with the tag in the tag dictionary. In other
words, a tag that appears with a smaller number of
distinct words will be seen by the HMM as being a
better candidate tag for an unknown word. Unfor-
tunately this is the opposite behavior we want since
closed-class tags like determiner and preposition are
bad candidates for tagging novel words.
For type-supervised training, we can do much bet-
ter. Note that C(w, t) comes in two varieties: w
is either found in the tag dictionary (known word
types), or it is not (unknown word types). We refer
to the later as td-unknown: these are words that oc-
cur in the raw word sequence used for EM but which
do not occur in the tag dictionary. These are thus
different unknowns from words have not been ob-
served in the dictionary or in the raw set but which
may be encountered at test time. Computing the full
C(w, t) is necessary since we want P(w1t) to cover
known and td-unknown words. We must thus deter-
mine both Cknown(w, t) and Cnnktd(w, t).
First, we focus on calculating Cknown(w, t). If a
word w appears C(w) times in the raw corpus, and
is seen with |TD(w) |tags in the tag dictionary, then
assume for each t in TD(w):
</bodyText>
<equation confidence="0.983178">
Cknown(w,t) = C(w) / ITD(w)I
</equation>
<bodyText confidence="0.9995652">
and Cknown(w, t) = 0 for all other t. In other words,
we split C(w), the count of w tokens in the corpus,
evenly among each of w’s possible tags. This pro-
vides us with an estimate of the true C(w, t) by ap-
proximating the portion of the counts of each word
</bodyText>
<page confidence="0.993026">
823
</page>
<bodyText confidence="0.999928">
type that may be associated with that tag. Note that
while this will give us zeros for any words that don’t
appear in the raw corpus, this is not a problem be-
cause EM training is based only on that corpus.
Second, we look at td-unknown word types: those
in the raw data that are not found in the tag dic-
tionary. Given the value P(unktd|t) for the like-
lihood of an unknown word given a tag t, we can
compute estimated counts Cunktd(w, t) for a td-
unknown word w using
</bodyText>
<equation confidence="0.876635">
Cunktd(w, t) = C(w) · P(unktd|t)
</equation>
<bodyText confidence="0.9999905">
where C(w), again, comes from the raw corpus.
This has the effect of spreading C(w), the count of
tokens of that unknown word w, across all of the
possible tags, with each tag receiving a proportion
of the total count as determined by P(unktd|t).
The challenge, then, is to compute P(unktd|t).
For this, we have two potential sources of knowl-
edge, the tag dictionary and the raw token sequence,
each telling us complementary information.
First, the tag dictionary tells us about the openness
of a tag—the likelihood that an unseen word will
have that label—based on our previously-discussed
intuition that we are more likely to see a new word
with a tag that is known to be associated with many
words already. Thus, we can estimate Ptd(unktd|t)
by simply normalizing the |TD(t) |values:
</bodyText>
<equation confidence="0.9730055">
Ptd(unktd|t) = |TD(t)|2
Et&apos;∈Tags |TD(t0)|2
</equation>
<bodyText confidence="0.98817725">
We exaggerate the differences between tags by
squaring the |TD(t) |terms to draw an even larger
distinction between open and closed class types.
Unfortunately, if we calculate an estimated word
</bodyText>
<equation confidence="0.644857333333333">
td(w, t) =
count directly from this using Cunk
C(w) · Ptd(unktd|t), the Cunktd(w, t) values would
</equation>
<bodyText confidence="0.995138090909091">
be taken without any regard to the overall like-
lihood of tag t. Since Cknown(NN) is very
high, Cunktd(NN) will seem very low by compar-
ison. Likewise, since Cknown(RB) is much lower,
Cunktd(RB) will seem very high by comparison.
P(unktd|t) must account for the overall likeli-
hood of t so that the Cunktd(w, t) values will be
scaled appropriately according to the overall likeli-
hood of t. For this, we use our second knowledge
source: the raw data. Based on the Cknown(w, t)
values as given above, the raw data tells us about the
overall expectation of a word having a particular tag.
From this, we can estimate the tag distribution for
known words: Cknown(t) = Ew&apos;∈V Cknown(w0, t)
and then normalize to get Pknown(t).
Finally, we need to combine Ptd(unktd|t) and
Pknown(t) into a single P(unktd|t) that accounts
for both the openness of a tag and its overall preva-
lence. We would like this combination to use the
high Pknown(NN) to boost P(unktd|NN) and the
low Pknown(RB) to dampen P(unktd|RB). So, we
compute and normalize:
</bodyText>
<equation confidence="0.9996835">
P(unktd|t) oc |TD(t)|2 · Pknown(t)
Et&apos;∈Tags  |TD (t0) |2
</equation>
<subsectionHeader confidence="0.968338">
2.4 Auto-supervised post-EM smoothing
</subsectionHeader>
<bodyText confidence="0.999917285714286">
The initialization accounting for td-unknown words
given above allows EM to be run on the raw token
sequence, but it provides no probability for words
that are truly unseen (in either the tag dictionary or
the raw data). Consequently, any novel words in the
test set will have zero emission probabilities, leading
to extremely low unknown-word accuracies.
To overcome this problem, we perform a sim-
ple post-processing step after EM, which we refer
to as auto-supervised training. We take the HMM
trained by EM and use it to label the raw corpus.
This gives us an automatically-labeled corpus that
can be used for standard supervised training (with-
out EM) to produce a new HMM. The effect of this
post-processing step is to smooth the counts learned
from EM onto any new words encountered during
testing. This procedure significantly improves the
ability of the HMM to label unknown words.
As a final note, it would of course be possible to
use other models at this stage, such as a Conditional
Random Field (Lafferty et al., 2001).
</bodyText>
<sectionHeader confidence="0.999192" genericHeader="method">
3 Enhancing MIN-GREEDY
</sectionHeader>
<bodyText confidence="0.999991285714286">
As was discussed above, one of the major prob-
lems for type-supervised POS-tagger training with
EM is a tag dictionary with low-frequency entries
such as the word “a” being associated with the for-
eign word tag when nearly all of its instances are
as a determiner. To avoid the need for manually
pruning the tag dictionary, Ravi and Knight (2009)
</bodyText>
<page confidence="0.989566">
824
</page>
<figure confidence="0.9994105">
(b) The boy sees a dog (\b)
(\b)
</figure>
<figureCaption confidence="0.998301">
Figure 1: MIN-GREEDY graph showing a state in the
first phase. Numbered, solid arrows: order of chosen
bigrams; dotted: potential choices.
</figureCaption>
<figure confidence="0.99972225">
(b) The boy sees a dog (\b)
(b)
DT DT
(\b)
</figure>
<figureCaption confidence="0.999983">
Figure 2: Start of the second MIN-GREEDY phase.
</figureCaption>
<bodyText confidence="0.999896">
proposed that low-probability tags might be auto-
matically filtered from the tag dictionary through a
model minimization procedure applied to the raw
text and constrained by the full tag dictionary. Ravi
et al. (2010) develop a faster approach for model
minimization using a greedy algorithm that they call
MIN-GREEDY. It is this algorithm that we extend.
</bodyText>
<subsectionHeader confidence="0.999564">
3.1 The original MIN-GREEDY algorithm
</subsectionHeader>
<bodyText confidence="0.9999894">
The MIN-GREEDY algorithm starts by initializing a
graph with a vertex for each possible tag of each to-
ken in the raw data. The set of possible tags for each
token is the set of tags associated with that word
in the tag dictionary.Special sentence start and sen-
tence end vertices are added to the graph for each
sentence to mark its beginning and end. Unlike Ravi
et al. (2010), we allow for an incomplete tag dic-
tionary, meaning that our scenario has the additional
complication that the tag set for some raw-corpus
</bodyText>
<figure confidence="0.999433">
(b) The boy sees a dog (\b)
(b)
��
DT DT
(\b)
</figure>
<figureCaption confidence="0.999941">
Figure 3: Potential MIN-GREEDY conclusion.
</figureCaption>
<bodyText confidence="0.999941705882353">
words will not be known. For these words, the full
set of tags is used. Note that this increases the ambi-
guity and overall number of edges in the graph.
The MIN-GREEDY algorithm works in three
phases: Greedy Set Cover, Greedy Path Comple-
tion, and Iterative Model-Fitting. In the first two
phases, the algorithm chooses tag bigrams that form
the edges of the graph. The goal of these phases is to
select a set of edges that is sufficient to allow a path
through every sentence in the raw corpus. The al-
gorithm greedily selects these edges in an attempt to
quickly approximate the minimal set of tag bigrams
needed to accomplish this goal. In the final phase,
the algorithm runs several iterations of EM in order
to fit the bigram set to the raw data.
In the first phase, Greedy Set Cover, the algorithm
selects tag bigrams in an effort to cover all of the
word tokens. A word token is considered covered
if there is at least one tag bigram edge connected
to at least one of its vertices. At each iteration, the
algorithm examines the entire graph, across all sen-
tences, to find the tag bigram that, if added, would
maximize the number of newly covered words.
Consider the graph in Figure 1. Assume, for the
example, that this sentence comprises the entire raw
corpus. At the start of the first phase, no tag bigrams
are selected. On the first iteration, the algorithm
chooses the tag bigram DT—*NN because this tag
bigram describes two edges for a total of four words
newly covered: The, boy, a, and dog. On the second
iteration, there are only three word tokens left un-
covered: the start symbol, sees, and the end symbol.
At this point, as the figure shows, there are five tag
bigrams that would each result in covering one addi-
</bodyText>
<figure confidence="0.999089184210526">
NN NN
(b)
DT
DT
1
��
1
��
��
3
Nk
V B
-a
FW
S
2
��
��
NN NN
��
a
V B
��
FW
��
��
��
41
4
��
��
��
Nk
��
NN
V B
FW
NN
</figure>
<page confidence="0.992218">
825
</page>
<bodyText confidence="0.999981479452055">
tional token. Since there are no tag bigrams whose
choosing would result in covering more than one ad-
ditional token, the algorithm randomly chooses one
of these five. The algorithm iterates like this until all
words are covered, as in, for example, Figure 2.
The second phase of the MIN-GREEDY algorithm,
Greedy Path Completion, seeks to fill holes in the
tag paths found in the graph. A hole is a poten-
tial edge that, if added, would connect two existing
edges. At each iteration, the algorithm finds the tag
bigram that, if selected, would maximize the number
of holes that would be filled across all raw sentences.
The example graph in Figure 2 shows a potential
start of the second phase. At this point, there are
three tag bigrams that each fill one hole if selected,
and the algorithm randomly selects one. Iteration
continues until there is a complete tag path through
each sentence in the raw corpus. One potential reso-
lution for the example is given in Figure 3.
Once a set of tag bigrams has been generated that
allows for a complete tag path through every sen-
tence of the raw corpus, MIN-GREEDY begins its
final phase: Iterative Model-Fitting. In this phase,
the algorithm trains a succession of type-supervised
HMM models. Each iteration trains an HMM and
then uses it to tag the raw corpus, the result of which
is used to prepare inputs for the next iteration.
Iterative Model-Fitting begins with the minimized
set of bigrams returned from the second phase of
MIN-GREEDY. This set is used as a hard constraint
on the allowable tag bigrams during type-supervised
HMM training. While EM is running, the only tag
transitions that are counted are those that fall into the
minimized tag bigram set; all other transition counts
are ignored. Once an HMM has been trained, it is
immediately used to tag the raw corpus, producing a
set of auto-labeled sentences. For the second itera-
tion of the phase, we extract a constrained tag dictio-
nary from the auto-labeled corpus by simply taking
every word/tag pair appearing in the data. This new
tag dictionary is a subset of the original, full, tag
dictionary, and hopefully has fewer low-frequency
entries that would cause problems for EM.
We use this constrained tag dictionary to again
perform type-supervised HMM training, but without
any constraints on the allowable tag bigrams. This
produces our third HMM. Using this HMM, we can,
again, tag the raw corpus, producing another set of
auto-labeled sentences. We can then extract the set
of tag bigrams appearing in this data to produce a
new set of tag transition constraints, similar to what
was returned by the second phase. With this set of
tag transition constraints, and the full tag dictionary,
we can perform another round of type-supervised
HMM training, and repeat the entire process.
The third MIN-GREEDY phase continues iterating,
alternating between training an HMM using a con-
strained set of tag transitions and training one using
a constrained tag dictionary. The size of the set of
constrained tag bigrams produced is tracked on each
iteration, and the algorithm is considered to have
converged when this value changes by less than five
percent. The final result of the MIN-GREEDY algo-
rithm is a trained HMM.
The evaluation of the MIN-GREEDY algorithm, as
described in Ravi et al. (2010), was performed only
for scenarios with a complete tag dictionary (includ-
ing all raw and test word types). As such, no tech-
niques were described for handling unknown words.
Because we are interested in the more realistic sce-
nario of an incomplete tag dictionary, we augment
the original MIN-GREEDY setup with the smoothing
techniques described above.
</bodyText>
<subsectionHeader confidence="0.999584">
3.2 Improving tag bigram selection
</subsectionHeader>
<bodyText confidence="0.999638476190476">
One of the major problems with the MIN-GREEDY
algorithm is that its heuristics for choosing the next
tag bigram frequently result in many-way ties. In the
first two phases of MIN-GREEDY, the greedy pro-
cedure looks for the tag bigram that will have the
most positive impact. In the Greedy Set Cover phase
this means choosing the tag bigram that would cover
the most new tokens, and in the Greedy Path Com-
pletion phase this means choosing the tag bigram
that would fill the most holes. However, it is fre-
quently the case that there are many distinct tag bi-
grams that would cover the most new tokens or fill
the most holes, leaving the MIN-GREEDY algorithm
with no choice but to randomly select from these
options. Since there are frequently cases of having
many dozens of options, it is clear that some of those
choices must be better than others, even though MIN-
GREEDY does not make a distinction and considers
them all to be equally good choices.
Consider the example in Figure 1 representing a
possible state of the minimization graph. To have
</bodyText>
<page confidence="0.996826">
826
</page>
<bodyText confidence="0.999948975">
reached this stage, tag bigram DT—*NN would have
been chosen since it covered the highest number of
tokens: four. Additionally, (b)—*DT and NN—*(\b)
could have been chosen as the second and third tag
bigrams since they tied for the most new tokens cov-
ered: one. For the state shown in this figure, there
is only one uncovered token, sees, but three tag bi-
grams that cover it. Since each of these tag bigrams
covers exactly one new word, they are all considered
by MIN-GREEDY to be equally good choices as the
next tag bigram for inclusion, and the algorithm will
choose one at random. However, it should be clear
that the VB—*FW tag bigram is wrong while the
other two would lead to a correct answer. As such,
we would like for the algorithm to avoid choosing
VB—*FW, and to pick one of the others.
In order to push the algorithm into choosing the
right tag bigrams in these otherwise ambiguous sit-
uations, we have added an additional criterion to the
bigram-choosing heuristic: after narrowing down
the set of tag bigrams to those that cover the most
new tokens, we further narrow the choice of bigrams
by minimizing the number of new word-type/tag
pairs that would be added to the result. Consider
our example. If we choose the tag bigram NN—*VB
or VB—*DT, then exactly one new word-type/tag
pair would be added to our result: sees/VB (since
boy/NN and a/DT would already have been added
by the incorporation of previous selected tag bi-
grams). By contrast if we choose the tag bigram
VB—*FW then two new word-type/tag pairs would
be added: sees/VB and a/FW.
Minimizing the number of new word/tag pairs
added by the algorithm has two main advantages.
First, it keeps the selected bigrams focused on the
same vertices, which results in fewer holes that the
Greedy Path Completion phase must deal with. Sec-
ondly, it keeps the selected bigrams focused on more
common tags for each word type, such as a/DT, and
keeps it away from rare tags, such as a/FW.
</bodyText>
<subsectionHeader confidence="0.995558">
3.3 Only tag bigrams on minimization paths
</subsectionHeader>
<bodyText confidence="0.999983192307693">
As was described above, the output of MIN-
GREEDY’s second stage is a minimized set of tag
bigrams which is used as a constraint on the first
iteration of the third stage, Iterative Model-Fitting.
However, in order to determine when to stop adding
new bigrams during the first two phases, the MIN-
GREEDY algorithm must try to find complete tag
paths through each sentence in the raw corpus, stop-
ping once a tag path has been found for each one.
While the algorithm is trying to select only the tag
bigrams that are necessary for a complete tagging, it
happens frequently that bigrams are selected that are
not actually used on any tag path.
Consider the example shown in Figure 3. The
graph has a complete path through the sentence, but
also contains an extraneous edge, VB—*FW, that is
not used on the path. Assuming that this tag bigram
is not used on the tag path of any other sentence, it
can safely be removed from the resultant set to pro-
duce a smaller set of tag bigrams, getting us even
closer to the minimized set that we desire.
To find the set of tag bigrams excluding these ex-
traneous edges, we modify the MIN-GREEDY algo-
rithm. During the first and second phases of the al-
gorithm, we check all raw data sentences for a com-
pleted path after each tag bigram is selected. If a
completed path is found for a sentence, we store that
path immediately. Once a path is found for every
sentence, we extract the set of bigrams used on these
paths, and pass that set, instead of the full set of se-
lected bigrams, to the third phase of the algorithm.
Note that it is important that we store the com-
pleted paths as soon as they are completed. Since
sentences are completed at different stages, and
more tag bigrams are selected after some of these
sentences are complete, it is inevitable that some
sentences will end up with multiple complete tag
paths by the end of the second phase. However, we
seek only the first such path. Tag bigrams are se-
lected in order of their impact, so bigrams selected
earlier are better and should be preferred. Consid-
ering again the example in Figure 3, based on the
frequency of the tags, it is likely that, given the
presence of other sentences in the raw corpus, the
tag path including bigrams VB—*DT and DT—*NN
would be found before the one including VB—*FW
and FW—*NN. Since they are more frequent bi-
grams, we would want to keep the first path even
if the second is completed at a later time.
The result of this improvement is a smaller,
cleaner minimized tag bigram set to be delivered to
the third phase of MIN-GREEDY.
</bodyText>
<page confidence="0.991702">
827
</page>
<table confidence="0.706079166666667">
Scenario Total Known Unk.
0. Random baseline (choose tag randomly from tag dictionary) 63.53 65.49 2.38
1. HMM baseline (simple EM with tag dictionary and raw text) 69.20 71.42 0.27
2. HMM baseline + auto-supervised training 82.33 83.67 40.46
3. HMM baseline + auto-supervised training + emission initialization 82.05 83.27 44.31
4. MIN-GREEDY (Ravi et al., 2010) with add-one smoothing 74.79 77.17 0.45
5. MIN-GREEDY with add-one smoothing + auto-supervised 86.10 87.59 39.74
6. MIN-GREEDY with add-one smoothing + auto-supervised + emission init 85.02 86.33 44.28
7. 6 + enhanced tag bigram choice heuristic 86.71 88.08 43.93
8. 6 + restrict tag bigrams to tag paths of minimization-tagged output 87.01 88.40 43.74
9. 6 + HMM initialization from minimization-tagged output 88.52 89.92 44.80
10. 6 + 7 + 8 + 9 88.51 89.92 44.80
</table>
<tableCaption confidence="0.9974045">
Table 1: English tagging accuracy using PTB sections 00-15 to build the tag dictionary. Known word types
are those appearing in the tag dictionary.
</tableCaption>
<subsectionHeader confidence="0.779783">
3.4 EM initialization with minimization output
</subsectionHeader>
<bodyText confidence="0.9999859">
As a final improvement to MIN-GREEDY, we took
the set of completed tag paths returned from the sec-
ond phase of the algorithm, as described in the pre-
vious section, and used them as labeled data to ini-
tialize an HMM for EM training.
Since we modified MIN-GREEDY to produce a set
of completed tag paths for sentences, we can take
this to be a complete set of labels for the raw cor-
pus. Furthermore, since we were careful about stor-
ing paths as soon as they become completed by the
minimization process, and the tag bigrams are cho-
sen in order of frequency, there will be more high-
frequency bigrams than low-frequency. As a result,
this labeling will contain good tag transitions and
token labelings. As such, the labeled data produced
by the second phase provides useful information be-
yond a simple set of sufficient bigrams: it contains
legitimate frequency information that can be used
to initialize the HMM. We, therefore, initialize an
HMM directly from this data to start EM.
</bodyText>
<sectionHeader confidence="0.91911" genericHeader="method">
4 Evaluation1
</sectionHeader>
<bodyText confidence="0.9958182">
English data. We evaluate on the Penn Treebank
(Marcus et al., 1993). In all cases we use the first
47,996 tokens of section 16 as our raw data, sections
19–21 as our development set, and perform the final
evaluation on sections 22–24.
</bodyText>
<footnote confidence="0.862928">
1Source code, scripts, and data to reproduce the results pre-
sented here can be found at github.com/dhgarrette/
type-supervised-tagging-2012emnlp
</footnote>
<bodyText confidence="0.999677612903226">
We evaluate two differently sized tag dictionaries.
The first is extracted directly from sections 00–15
(751,059 tokens) and the second from sections 00–
07 (379,908 tokens). The former contains 39,087
word types, 45,331 word/tag entries, a per-type am-
biguity of 1.16 and yields a per-token ambiguity of
2.21 on the raw corpus (treating unknown words
as having all 45 possible tags). The latter contains
26,652 word types, 30,662 word/tag entries, a per-
type ambiguity of 1.15 and yields a per-token ambi-
guity of 2.03 on the raw corpus. In both cases, every
word/tag pair found in the relevant sections was used
in the tag dictionary: no pruning was performed.
Italian data. As a second evaluation, we use the
TUT corpus (Bosco et al., 2000). To verify that our
approach is language-independent without the need
for specific tuning, we executed our tests on the Ital-
ian data without any trial runs, parameter modifica-
tions, or other changes. We divided the TUT data,
taking the first half of each of the five sections as in-
put to the tag dictionary, the next quarter as raw data,
and the last quarter as test data. All together, the tag
dictionary was constructed from 41,000 tokens con-
sisting of 7,814 word types, 8,370 word/tag pairs,
per-type ambiguity of 1.07 and a per-token ambigu-
ity of 1.41 on the raw data. The raw data consisted of
18,574 tokens and the test contained 18,763 tokens.
Results We ran eleven experiments for each data
set with results shown in Tables 1 and 2. All scores
are reported as the percentage of tokens for which
the correct tag was assigned. Accuracy is shown as
</bodyText>
<page confidence="0.993904">
828
</page>
<table confidence="0.905037461538462">
Scenario Total PTB (00-07) Unk. Total TUT Unk.
Known Known
0. Random 64.98 68.04 2.81 62.81 76.10 1.58
1. HMM basic 69.32 72.70 0.56 60.70 73.77 0.51
2. HMM + auto-super 81.50 83.67 37.46 70.03 80.64 21.12
3. HMM + auto-super + init 81.71 83.62 42.89 70.89 80.91 24.74
4. MIN-GREEDY + add-1 68.86 72.20 0.92 53.96 65.49 0.84
5. MIN-GREEDY + add-1 + auto-super 80.78 82.88 38.02 70.85 82.41 17.60
6. MIN-GREEDY + add-1 + auto-super + init 80.92 82.80 42.64 71.52 81.56 25.28
7. 6 + enhanced bigram choice heuristic 86.69 88.83 43.07 71.48 81.57 24.98
8. 6 + restrict tag bigrams to tag paths 80.86 82.73 42.84 72.86 83.45 24.08
9. 6 + HMM init from minimization output 87.61 89.74 44.18 72.00 82.28 24.65
10. 6 + 7 + 8 + 9 87.95 90.12 43.74 71.99 82.50 23.57
</table>
<tableCaption confidence="0.910575">
Table 2: Tagging accuracy using PTB sections 00-07 and TUT to build the tag dictionary. Known word
types are those appearing in the tag dictionary. Scenario numbers correspond to Table 1.
</tableCaption>
<bodyText confidence="0.9999229">
the Total (all word types), Known (word types found
in the tag dictionary), and Unknown (word types not
found in the tag dictionary).
Experiments 1–3 evaluate our smoothing tech-
niques applied directly to the task of type-supervised
HMM training with EM, without MIN-GREEDY.
The basic HMM consistently beats the baseline ran-
dom tagger, the auto-supervision technique makes
an enormous improvement for both known and un-
known words, and the the emission initialization
yields a sizable improvement for unknown words.
Experiments 4–6 evaluated our reimplementation
of MIN-GREEDY. We start with the most basic level
of smoothing needed to work in a type-supervised
scenario. For the smaller PTB tag dictionary and
the TUT data, MIN-GREEDY actually has lower per-
formance than the HMM alone. This indicates that
if the tag dictionary has a low degree of ambigu-
ity, then MIN-GREEDY can make the situation worse.
However, with our smoothing techniques, we regain
similar improvements as with the HMM.
Finally we performed experiments evaluat-
ing combinations of our improvements to MIN-
GREEDY. Scenarios 7–9 show each improvement
taken in turn. Scenario 10 shows the results for us-
ing all three improvements. For the English data, the
best results are found when all the improvements are
used. When taken individually, the bigram choice
heuristic and HMM initialization from minimization
output each consistently outperform the improved-
MIN-GREEDY baseline on English. However, re-
stricting the tag bigrams to that in the minimization-
tagged output causes problems in the smaller PTB
scenario, presumably falling to a local maximum
like MIN-GREEDY that the other improvements are
able to help the algorithm avoid.
Though the accuracy improvements are less than
for English, the Italian results show that our MIN-
GREEDY enhancements make an appreciable differ-
ence for a language and dataset for which the ap-
proaches considered were run sight unseen.
Error analysis One of the primary goals of model
minimization is to automatically eliminate low-
probability entries from the tag dictionary that might
confuse the EM algorithm (Ravi et al., 2010). In or-
der to see how well our techniques are able to iden-
tify and eliminate these unlikely word/tag pairs, we
analyzed the tagging errors from each experiment.
In doing so, we discovered that the two of the most
problematic words for the EM algorithm are “a” and
“in”. We ran further experiments explore what was
happening with those words. The results, using PTB
sections 00–07 are shown in Table 3.
In PTB sections 00-07 the word “a” appears 7630
times and with 7 different tags. This includes 7621
occurrences with tag DT, 3 with tag SYM (symbol),
and 1 time with LS (list item marker). As such, we
would want the HMM to lean heavily toward tag DT
when tagging the token “a”. Unfortunately, the rare
tags confuse the EM procedure and end up with dis-
</bodyText>
<page confidence="0.995038">
829
</page>
<table confidence="0.982056333333333">
tok model tokens tagged by scenario
output
3 6 7 8 9 10
a DT 32 4 4 4 2424 2425
LS 1531 0 0 0 0 0
SYM 731 2356 2305 2356 0 0
in IN 12 15 2024 4 2042 2047
FW 1922 1910 0 0 0 0
RP 20 27 0 2037 0 0
</table>
<tableCaption confidence="0.996607">
Table 3: Number of times, for the words “a” and
</tableCaption>
<bodyText confidence="0.987616515151515">
“in”, the tagger trained by the particular scenario se-
lected the given tag. Experiments used PTB sections
00-07 for the initial tag dictionary. Scenario num-
bers correspond to Table 1.
proportionately high probabilities. Our experiment
training an HMM without minimization (scenario 3)
resulted in 1531 “a” tokens being tagged LS, 731 as
SYM, and only 32 tagged as DT.
The situation is similar with the word “in”, which
appears 6155 times with 5 different tags in the 8
sections. Of these, 6073 occurrences are tagged
IN (preposition), 63 are RP (particle), and 1 is FW
(foreign word). Again, EM without minimization
is confused by the rare tokens, assigning FW 1922
times and IN 12 times.
The minimization procedure attempts to over-
come this problem by removing unlikely tags from
the tag dictionary automatically. As is show in Table
3, MIN-GREEDY without our enhancements is able
to reject the problematic LS as a tag for “a”, but
unable to do so for SYM, resulting in 2356 tokens
tagged SYM and only 4 tagged DT. Similarly, MIN-
GREEDY is unable to reject FW as a tag for “in”.
Our enhancements to MIN-GREEDY improve the
situation. More careful choosing of bigrams during
minimization results in the avoidance of LS and FW
(but not SYM) for “a” as well as FW and RP for
“in”. Restricting the tag bigrams output from MIN-
GREEDY to just those on tag paths avoids LS and FW
for “a” and FW for “in”. Finally, using the tagged
sentences from MIN-GREEDY as noisy supervision
for EM initialization eliminates all rare tags, as does
the use of all three enhancements together.
</bodyText>
<sectionHeader confidence="0.999542" genericHeader="conclusions">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.999988675">
Our results show it is possible to create accurate
POS-taggers using type-supervision with incom-
plete tag dictionaries by extending the MIN-GREEDY
algorithm of Ravi et al. (2010). The most useful
change we made to the MIN-GREEDY procedure was
the implementation of a better heuristic for picking
tag bigrams. An intuitive and straightforward emis-
sion initialization provides the necessary basis to run
EM on a given raw token sequence. Using EM out-
put on this raw sequence as auto-labeled material
to a supervised HMM then proves highly effective
for generalization to new texts containing previously
unseen word types.
Vaswani et al (2010) explore the use of minimum
description length principles in a Bayesian model as
a way of capturing model minimization, inspired by
the MIN-GREEDY algorithm. The advantage there is
that only a single objective function needs to be opti-
mized, rather than having initialization followed by
an iterative back and forth with pruning of tag-tag
pairs. Our own next steps are to move in a similar
direction to explore the possibilities for encoding the
intuitions we developed for initialization and mini-
mization as a single generative model.
Goldberg et al. (2008) note that fixing noisy dic-
tionaries by hand is actually quite feasible, and sug-
gest that effort should focus on exploiting human
knowledge rather than just algorithmic improve-
ments. We agree; however, our ultimate motivation
is to use this work to tackle bootstrapping from very
small tag dictionaries or dictionaries obtained from
linguists or resources other than a corpus, and for
tag sets that are more ambiguous (e.g., supertagging
for CCGbank (Hockenmaier and Steedman, 2007)).
Such efforts require automatic expansion of tag dic-
tionaries, which then need be constrained based on
available raw token sequences using methods such
as those explored here. In this respect, the some-
what idiosyncratic noise in the corpus-derived dic-
tionaries used here make a good test.
</bodyText>
<sectionHeader confidence="0.998712" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.999398666666667">
We thank Yoav Goldberg, Sujith Ravi, and the re-
viewers for their feedback. This work was supported
by the U.S. Department of Defense through the U.S.
Army Research Office (grant number W911NF-10-
1-0533) and via a National Defense Science and En-
gineering Graduate Fellowship for the first author.
</bodyText>
<page confidence="0.993978">
830
</page>
<sectionHeader confidence="0.998342" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99988394117647">
Michele Banko and Robert C. Moore. 2004. Part-of-
speech tagging in context. In Proceedings of COLING,
pages 556–561, Geneva, Switzerland.
Cristina Bosco, Vincenzo Lombardo, Daniela Vassallo, ,
and Leonardo Lesmo. 2000. Building a treebank for
Italian: a data-driven annotation schema. In Proceed-
ings of LREC.
Stanley F. Chen and Joshua Goodman. 1996. An empir-
ical study of smoothing techniques for language mod-
eling. In Proceedings of ACL, pages 310–318, Santa
Cruz, California, USA.
Christos Christodoulopoulos, Sharon Goldwater, and
Mark Steedman. 2010. Two decades of unsupervised
pos induction: How far have we come? In Proceed-
ings of EMNLP.
Dipanjan Das and Slav Petrov. 2011. Unsupervised part-
of-speech tagging with bilingual graph-based projec-
tions. In Proceedings of ACL-HLT, pages 600–609,
Portland, Oregon, USA.
Arthur P. Dempster, Nan M. Laird, and Donald. B. Ru-
bin. 1977. Maximum likelihood from incomplete data
via the EM algorithm. Journal of the Royal Statistical
Society: Series B (Statistical Methodology), 39:1–22.
Kevin Gimpel, Nathan Schneider, Brendan O’Connor,
Dipanjan Das, Daniel Mills, Jacob Eisenstein, Michael
Heilman, Dani Yogatama, Jeffrey Flanigan, and
Noah A. Smith. 2011. Part-of-speech tagging for twit-
ter: Annotation, features, and experiments. In Pro-
ceedings ofACL-HLT, pages 42–47, Portland, Oregon,
USA.
Yoav Goldberg, Meni Adler, and Michael Elhadad. 2008.
EM can find pretty good HMM POS-taggers (when
given a good start). In Proceedings ACL, pages 746–
754.
Kazi Saidul Hasan and Vincent Ng. 2009. Weakly super-
vised part-of-speech tagging for morphologically-rich,
resource-scarce languages. In Proceedings of EACL,
pages 363–371, Athens, Greece.
Julia Hockenmaier and Mark Steedman. 2007. Ccgbank:
A corpus of ccg derivations and dependency structures
extracted from the penn treebank. Computational Lin-
guistics, 33(3):355–396.
Mark Johnson. 2007. Why doesn’t EM find good HMM
POS-taggers? In Proceedings EMNLP-CoNLL, pages
296–305.
Julian Kupiec. 1992. Robust part-of-speech tagging us-
ing a hidden markov model. Computer Speech &amp; Lan-
guage, 6(3):225–242.
John Lafferty, Andrew McCallum, and Fernando Pereira.
2001. Conditional random fields: Probabilistic mod-
els for segmenting and labeling sequence data. In
Proceedings of ICML, pages 282–289. Morgan Kauf-
mann.
Christopher D. Manning. 2011. Part-of-speech tagging
from 97% to 100%: Is it time for some linguistics? In
Alexander Gelbukh, editor, Proceedings of CICLing,
volume 6608 of Lecture Notes in Computer Science,
pages 171–189.
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated cor-
pus of English: The Penn Treebank. Computational
Linguistics, 19(2):313–330.
Bernard Merialdo. 1994. Tagging English text with
a probabilistic model. Computational Linguistics,
20(2):155–171.
Taesun Moon, Katrin Erk, and Jason Baldridge. 2010.
Crouching dirichlet, hidden markov model: Unsu-
pervised POS tagging with context local tag genera-
tion. In Proceedings ofEMNLP, pages 196–206, Cam-
bridge, MA.
Sujith Ravi and Kevin Knight. 2009. Minimized models
for unsupervised part-of-speech tagging. In Proceed-
ings of ACL-AFNLP.
Sujith Ravi, Ashish Vaswani, Kevin Knight, and David
Chiang. 2010. Fast, greedy model minimization for
unsupervised tagging. In Proceedings of COLING,
pages 940–948.
Kristina Toutanova and Mark Johnson. 2008. A bayesian
lda-based model for semi-supervised part-of-speech
tagging. In Proceedings of NIPS.
Ashish Vaswani, Adam Pauls, and David Chiang. 2010.
Efficient optimization of an mdl-inspired objective
function for unsupervised part-of-speech tagging. In
Proceedings of the ACL 2010 Conference Short Pa-
pers, pages 209–214, Uppsala, Sweden.
</reference>
<page confidence="0.9984">
831
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.872659">
<title confidence="0.9996535">Type-Supervised Hidden Markov Models for Part-of-Speech with Incomplete Tag Dictionaries</title>
<author confidence="0.998393">Dan</author>
<affiliation confidence="0.992646">Department of Computer The University of Texas at</affiliation>
<email confidence="0.99635">dhg@cs.utexas.edu</email>
<author confidence="0.994219">Jason</author>
<affiliation confidence="0.994718">Department of The University of Texas at</affiliation>
<email confidence="0.997991">jbaldrid@utexas.edu</email>
<abstract confidence="0.99529745">Past work on learning part-of-speech taggers from tag dictionaries and raw data has reported good results, but the assumptions made about those dictionaries are often unrealistic: due to historical precedents, they assume access to information about labels in the raw and test sets. Here, we demonstrate ways to learn hidden Markov model taggers from intag dictionaries. Taking the (Ravi et al., 2010) as a starting point, we improve it with several intuitive heuristics. We also define a simple HMM emission initialization that takes advantage of the tag dictionary and raw data to capture both the openness of a given tag and its estimated prevalence in the raw data. Altogether, our augmentations produce improvements to perover the original algorithm for both English and Italian data.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Michele Banko</author>
<author>Robert C Moore</author>
</authors>
<title>Part-ofspeech tagging in context.</title>
<date>2004</date>
<booktitle>In Proceedings of COLING,</booktitle>
<pages>556--561</pages>
<location>Geneva, Switzerland.</location>
<contexts>
<context position="3020" citStr="Banko and Moore (2004)" startWordPosition="459" endWordPosition="462">ed training from raw text and supervised training from word tokens labeled with their partsof-speech. Work on type-supervision goes back to (Merialdo, 1994), who introduced the still standard procedure of using a bigram Hidden Markov Model (HMM) trained via Expectation Maximization. Early research appeared to show that learning from types works nearly as well as learning from tokens, with researchers in the 1990s obtaining accuracies up to 96% on English (e.g. Kupiec (1992)). However, the tag dictionaries in these cases were obtained from labeled tokens. While replicating earlier experiments, Banko and Moore (2004) discovered that performance was highly dependent on cleaning tag dictionaries using statistics gleaned from the tokens. This greatly simplifies the job of a typesupervised HMM: it no longer must entertain entries for uncommon word-tag pairs (or mistaken pairs due to annotation errors), which otherwise stand on equal footing with the common ones. When the full, noisy tag dictionary was employed, Banko and Moore found accuracies dropped from 96% to 77%. Banko and Moore’s observations spurred a new line of research that sought to improve performance in the face of full, noisy dictionaries; see R</context>
</contexts>
<marker>Banko, Moore, 2004</marker>
<rawString>Michele Banko and Robert C. Moore. 2004. Part-ofspeech tagging in context. In Proceedings of COLING, pages 556–561, Geneva, Switzerland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Cristina Bosco</author>
<author>Vincenzo Lombardo</author>
<author>Daniela Vassallo</author>
</authors>
<title>Building a treebank for Italian: a data-driven annotation schema.</title>
<date>2000</date>
<booktitle>In Proceedings of LREC.</booktitle>
<contexts>
<context position="32126" citStr="Bosco et al., 2000" startWordPosition="5490" endWordPosition="5493">and the second from sections 00– 07 (379,908 tokens). The former contains 39,087 word types, 45,331 word/tag entries, a per-type ambiguity of 1.16 and yields a per-token ambiguity of 2.21 on the raw corpus (treating unknown words as having all 45 possible tags). The latter contains 26,652 word types, 30,662 word/tag entries, a pertype ambiguity of 1.15 and yields a per-token ambiguity of 2.03 on the raw corpus. In both cases, every word/tag pair found in the relevant sections was used in the tag dictionary: no pruning was performed. Italian data. As a second evaluation, we use the TUT corpus (Bosco et al., 2000). To verify that our approach is language-independent without the need for specific tuning, we executed our tests on the Italian data without any trial runs, parameter modifications, or other changes. We divided the TUT data, taking the first half of each of the five sections as input to the tag dictionary, the next quarter as raw data, and the last quarter as test data. All together, the tag dictionary was constructed from 41,000 tokens consisting of 7,814 word types, 8,370 word/tag pairs, per-type ambiguity of 1.07 and a per-token ambiguity of 1.41 on the raw data. The raw data consisted of </context>
</contexts>
<marker>Bosco, Lombardo, Vassallo, 2000</marker>
<rawString>Cristina Bosco, Vincenzo Lombardo, Daniela Vassallo, , and Leonardo Lesmo. 2000. Building a treebank for Italian: a data-driven annotation schema. In Proceedings of LREC.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stanley F Chen</author>
<author>Joshua Goodman</author>
</authors>
<title>An empirical study of smoothing techniques for language modeling.</title>
<date>1996</date>
<booktitle>In Proceedings of ACL,</booktitle>
<pages>310--318</pages>
<location>Santa Cruz, California, USA.</location>
<contexts>
<context position="7094" citStr="Chen and Goodman, 1996" startWordPosition="1128" endWordPosition="1131">imates or from incomplete data using Expectation Maximization (EM) (Dempster et al., 1977). We use both strategies in this work: EM is used to estimate models that can automatically label raw tokens, and then a new HMM is estimated from that auto-labeled data. 2.1 Token-supervised training We use a simple but effective smoothing regime to account for unknown words and unseen tag-tag transitions. For emissions: C(ti, wi) + α(ti)Puni(wi) P(wi|ti) = C(ti) + α(ti) where Puni(wi) is the unigram probability of wi, and α(ti) is a tag specific amount of mass for smoothing. We use one-count smoothing (Chen and Goodman, 1996), where α(ti) is based on the number of words that occur with ti once: α(ti) = |wi : C(ti, wi) = 1| Since open-class tags occur more frequently with words that appear once, they will reserve more mass for unknown words than closed-class tags will. The transition distributions are smoothed in a similar fashion: A(ti−1) = |ti : C(ti−1, ti) = 1| This simple scheme is quite effective: an HMM trained on the Penn Treebank sections 0-18 and evaluated on sections 19-21 and smoothed in this way obtains 96.5% accuracy. We do not use gold standard labels elsewhere for this paper, but do use this model on</context>
</contexts>
<marker>Chen, Goodman, 1996</marker>
<rawString>Stanley F. Chen and Joshua Goodman. 1996. An empirical study of smoothing techniques for language modeling. In Proceedings of ACL, pages 310–318, Santa Cruz, California, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christos Christodoulopoulos</author>
<author>Sharon Goldwater</author>
<author>Mark Steedman</author>
</authors>
<title>Two decades of unsupervised pos induction: How far have we come?</title>
<date>2010</date>
<booktitle>In Proceedings of EMNLP.</booktitle>
<contexts>
<context position="1833" citStr="Christodoulopoulos et al., 2010" startWordPosition="279" endWordPosition="282">sed on plentiful labeled training material is generally considered a solved problem. The best taggers obtain accuracies of over 97% for English newswire text in the Penn Treebank, which can be considered as an upper-bound that matches human performance on the same task (Manning, 2011). However, as Manning notes, this story changes as soon as one is working with different assumptions and data, including having less training data, different kinds of training data, other languages, and other domains. Such POS tagging work has been plentiful and includes efforts to induce POS tags without labels (Christodoulopoulos et al., 2010); learn from POS-tag dictionaries (Ravi et al., 2010), incomplete dictionaries (Hasan and Ng, 2009) and humanconstructed dictionaries (Goldberg et al., 2008); bootstrap taggers for a language based on knowledge about other languages (Das and Petrov, 2011), and creating supervised taggers for new, challenging domains such as Twitter (Gimpel et al., 2011). Here, we focus on learning from tag dictionaries. This is often characterized as unsupervised or weakly supervised training. We adopt the terminology type-supervised training to distinguish it from unsupervised training from raw text and super</context>
</contexts>
<marker>Christodoulopoulos, Goldwater, Steedman, 2010</marker>
<rawString>Christos Christodoulopoulos, Sharon Goldwater, and Mark Steedman. 2010. Two decades of unsupervised pos induction: How far have we come? In Proceedings of EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dipanjan Das</author>
<author>Slav Petrov</author>
</authors>
<title>Unsupervised partof-speech tagging with bilingual graph-based projections.</title>
<date>2011</date>
<booktitle>In Proceedings of ACL-HLT,</booktitle>
<pages>600--609</pages>
<location>Portland, Oregon, USA.</location>
<contexts>
<context position="2088" citStr="Das and Petrov, 2011" startWordPosition="318" endWordPosition="321">ask (Manning, 2011). However, as Manning notes, this story changes as soon as one is working with different assumptions and data, including having less training data, different kinds of training data, other languages, and other domains. Such POS tagging work has been plentiful and includes efforts to induce POS tags without labels (Christodoulopoulos et al., 2010); learn from POS-tag dictionaries (Ravi et al., 2010), incomplete dictionaries (Hasan and Ng, 2009) and humanconstructed dictionaries (Goldberg et al., 2008); bootstrap taggers for a language based on knowledge about other languages (Das and Petrov, 2011), and creating supervised taggers for new, challenging domains such as Twitter (Gimpel et al., 2011). Here, we focus on learning from tag dictionaries. This is often characterized as unsupervised or weakly supervised training. We adopt the terminology type-supervised training to distinguish it from unsupervised training from raw text and supervised training from word tokens labeled with their partsof-speech. Work on type-supervision goes back to (Merialdo, 1994), who introduced the still standard procedure of using a bigram Hidden Markov Model (HMM) trained via Expectation Maximization. Early </context>
</contexts>
<marker>Das, Petrov, 2011</marker>
<rawString>Dipanjan Das and Slav Petrov. 2011. Unsupervised partof-speech tagging with bilingual graph-based projections. In Proceedings of ACL-HLT, pages 600–609, Portland, Oregon, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Rubin</author>
</authors>
<title>Maximum likelihood from incomplete data via the EM algorithm.</title>
<date>1977</date>
<journal>Journal of the Royal Statistical Society: Series B (Statistical Methodology),</journal>
<pages>39--1</pages>
<marker>Rubin, 1977</marker>
<rawString>Arthur P. Dempster, Nan M. Laird, and Donald. B. Rubin. 1977. Maximum likelihood from incomplete data via the EM algorithm. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 39:1–22.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kevin Gimpel</author>
<author>Nathan Schneider</author>
<author>Brendan O’Connor</author>
<author>Dipanjan Das</author>
<author>Daniel Mills</author>
<author>Jacob Eisenstein</author>
<author>Michael Heilman</author>
<author>Dani Yogatama</author>
<author>Jeffrey Flanigan</author>
<author>Noah A Smith</author>
</authors>
<title>Part-of-speech tagging for twitter: Annotation, features, and experiments.</title>
<date>2011</date>
<booktitle>In Proceedings ofACL-HLT,</booktitle>
<pages>42--47</pages>
<location>Portland, Oregon, USA.</location>
<marker>Gimpel, Schneider, O’Connor, Das, Mills, Eisenstein, Heilman, Yogatama, Flanigan, Smith, 2011</marker>
<rawString>Kevin Gimpel, Nathan Schneider, Brendan O’Connor, Dipanjan Das, Daniel Mills, Jacob Eisenstein, Michael Heilman, Dani Yogatama, Jeffrey Flanigan, and Noah A. Smith. 2011. Part-of-speech tagging for twitter: Annotation, features, and experiments. In Proceedings ofACL-HLT, pages 42–47, Portland, Oregon, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoav Goldberg</author>
<author>Meni Adler</author>
<author>Michael Elhadad</author>
</authors>
<title>EM can find pretty good HMM POS-taggers (when given a good start).</title>
<date>2008</date>
<booktitle>In Proceedings ACL,</booktitle>
<pages>746--754</pages>
<contexts>
<context position="1990" citStr="Goldberg et al., 2008" startWordPosition="302" endWordPosition="305">nn Treebank, which can be considered as an upper-bound that matches human performance on the same task (Manning, 2011). However, as Manning notes, this story changes as soon as one is working with different assumptions and data, including having less training data, different kinds of training data, other languages, and other domains. Such POS tagging work has been plentiful and includes efforts to induce POS tags without labels (Christodoulopoulos et al., 2010); learn from POS-tag dictionaries (Ravi et al., 2010), incomplete dictionaries (Hasan and Ng, 2009) and humanconstructed dictionaries (Goldberg et al., 2008); bootstrap taggers for a language based on knowledge about other languages (Das and Petrov, 2011), and creating supervised taggers for new, challenging domains such as Twitter (Gimpel et al., 2011). Here, we focus on learning from tag dictionaries. This is often characterized as unsupervised or weakly supervised training. We adopt the terminology type-supervised training to distinguish it from unsupervised training from raw text and supervised training from word tokens labeled with their partsof-speech. Work on type-supervision goes back to (Merialdo, 1994), who introduced the still standard </context>
<context position="39840" citStr="Goldberg et al. (2008)" startWordPosition="6816" endWordPosition="6819">s containing previously unseen word types. Vaswani et al (2010) explore the use of minimum description length principles in a Bayesian model as a way of capturing model minimization, inspired by the MIN-GREEDY algorithm. The advantage there is that only a single objective function needs to be optimized, rather than having initialization followed by an iterative back and forth with pruning of tag-tag pairs. Our own next steps are to move in a similar direction to explore the possibilities for encoding the intuitions we developed for initialization and minimization as a single generative model. Goldberg et al. (2008) note that fixing noisy dictionaries by hand is actually quite feasible, and suggest that effort should focus on exploiting human knowledge rather than just algorithmic improvements. We agree; however, our ultimate motivation is to use this work to tackle bootstrapping from very small tag dictionaries or dictionaries obtained from linguists or resources other than a corpus, and for tag sets that are more ambiguous (e.g., supertagging for CCGbank (Hockenmaier and Steedman, 2007)). Such efforts require automatic expansion of tag dictionaries, which then need be constrained based on available raw</context>
</contexts>
<marker>Goldberg, Adler, Elhadad, 2008</marker>
<rawString>Yoav Goldberg, Meni Adler, and Michael Elhadad. 2008. EM can find pretty good HMM POS-taggers (when given a good start). In Proceedings ACL, pages 746– 754.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kazi Saidul Hasan</author>
<author>Vincent Ng</author>
</authors>
<title>Weakly supervised part-of-speech tagging for morphologically-rich, resource-scarce languages.</title>
<date>2009</date>
<booktitle>In Proceedings of EACL,</booktitle>
<pages>363--371</pages>
<location>Athens, Greece.</location>
<contexts>
<context position="1932" citStr="Hasan and Ng, 2009" startWordPosition="294" endWordPosition="297">uracies of over 97% for English newswire text in the Penn Treebank, which can be considered as an upper-bound that matches human performance on the same task (Manning, 2011). However, as Manning notes, this story changes as soon as one is working with different assumptions and data, including having less training data, different kinds of training data, other languages, and other domains. Such POS tagging work has been plentiful and includes efforts to induce POS tags without labels (Christodoulopoulos et al., 2010); learn from POS-tag dictionaries (Ravi et al., 2010), incomplete dictionaries (Hasan and Ng, 2009) and humanconstructed dictionaries (Goldberg et al., 2008); bootstrap taggers for a language based on knowledge about other languages (Das and Petrov, 2011), and creating supervised taggers for new, challenging domains such as Twitter (Gimpel et al., 2011). Here, we focus on learning from tag dictionaries. This is often characterized as unsupervised or weakly supervised training. We adopt the terminology type-supervised training to distinguish it from unsupervised training from raw text and supervised training from word tokens labeled with their partsof-speech. Work on type-supervision goes ba</context>
<context position="4270" citStr="Hasan and Ng, 2009" startWordPosition="654" endWordPosition="657">2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 821–831, Jeju Island, Korea, 12–14 July 2012. c�2012 Association for Computational Linguistics Knight (2009) for an overview. The highest accuracy achieved to date under these assumptions is 91.6% (Ravi et al., 2010). However, as is often noted (including by the authors themselves), many papers that work on learning taggers from tag dictionaries make unrealistic assumptions about the tag dictionaries they use as input (Toutanova and Johnson, 2008; Ravi and Knight, 2009; Hasan and Ng, 2009). For example, tag dictionaries are typically constructed with every token-tag pair in the data, including those that appear only in the test set. This means that the evaluation of these taggers does not measure how they perform on sentences that contain unseen words or unseen word-tag pairs, a likely occurrence in real use of a trained tagger. We show that it is possible to achieve good tagging accuracy using a noisy and incomplete tag dictionary that has no access to the tags of the raw and test data and no access to the tag frequency information of the labeled training data from which the d</context>
</contexts>
<marker>Hasan, Ng, 2009</marker>
<rawString>Kazi Saidul Hasan and Vincent Ng. 2009. Weakly supervised part-of-speech tagging for morphologically-rich, resource-scarce languages. In Proceedings of EACL, pages 363–371, Athens, Greece.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Julia Hockenmaier</author>
<author>Mark Steedman</author>
</authors>
<title>Ccgbank: A corpus of ccg derivations and dependency structures extracted from the penn treebank.</title>
<date>2007</date>
<journal>Computational Linguistics,</journal>
<volume>33</volume>
<issue>3</issue>
<contexts>
<context position="40322" citStr="Hockenmaier and Steedman, 2007" startWordPosition="6891" endWordPosition="6894">e the possibilities for encoding the intuitions we developed for initialization and minimization as a single generative model. Goldberg et al. (2008) note that fixing noisy dictionaries by hand is actually quite feasible, and suggest that effort should focus on exploiting human knowledge rather than just algorithmic improvements. We agree; however, our ultimate motivation is to use this work to tackle bootstrapping from very small tag dictionaries or dictionaries obtained from linguists or resources other than a corpus, and for tag sets that are more ambiguous (e.g., supertagging for CCGbank (Hockenmaier and Steedman, 2007)). Such efforts require automatic expansion of tag dictionaries, which then need be constrained based on available raw token sequences using methods such as those explored here. In this respect, the somewhat idiosyncratic noise in the corpus-derived dictionaries used here make a good test. Acknowledgements We thank Yoav Goldberg, Sujith Ravi, and the reviewers for their feedback. This work was supported by the U.S. Department of Defense through the U.S. Army Research Office (grant number W911NF-10- 1-0533) and via a National Defense Science and Engineering Graduate Fellowship for the first aut</context>
</contexts>
<marker>Hockenmaier, Steedman, 2007</marker>
<rawString>Julia Hockenmaier and Mark Steedman. 2007. Ccgbank: A corpus of ccg derivations and dependency structures extracted from the penn treebank. Computational Linguistics, 33(3):355–396.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mark Johnson</author>
</authors>
<title>Why doesn’t EM find good HMM POS-taggers?</title>
<date>2007</date>
<booktitle>In Proceedings EMNLP-CoNLL,</booktitle>
<pages>296--305</pages>
<contexts>
<context position="8176" citStr="Johnson, 2007" startWordPosition="1314" endWordPosition="1315"> smoothed in this way obtains 96.5% accuracy. We do not use gold standard labels elsewhere for this paper, but do use this model on the output of type-supervised HMMs. C(ti−1, ti) + A(ti−1)Puni(ti) P(ti|ti−1) = C(ti−1) + A(ti−1) 822 2.2 Type-supervised training We are primarily interested in learning taggers from tag dictionaries combined with unlabeled text. As is standard, we use EM to iteratively estimate the transition and emission probability parameters to maximize the likelihood of unlabeled data. It is known, however, that EM has particular problems learning a good HMM for POS tagging (Johnson, 2007; Ravi and Knight, 2009). One reason is that EM generally tries to learn probability distributions that are fairly uniform while POS tag frequencies are quite skewed. For example, “a” appears in the training data with seven different tags, but 99.9% of “a” tokens are determiners. Thus, the accuracy of anything approaching a uniform distribution for “a” tags will suffer greatly. In the context of unsupervised POS tagging models, modeling this distinction greatly improves results (Moon et al., 2010). Here, we can simply exploit the tag dictionary and raw data. An initial set of parameters for th</context>
<context position="9884" citStr="Johnson, 2007" startWordPosition="1598" endWordPosition="1599">rds during model estimation or inference. Likewise, there will never be a situation where the tag dictionary rules out all possible tag transitions between two adjacent tokens in training or testing. As a result, no smoothing is needed in this scenario. The problem with this is that estimating a model based on type-supervision requires raw text, and if we have an incomplete tag dictionary, some of the words in that text will be missing from the tag dictionary. In a Bayesian setting, priors provide mass for such tokens; models are estimated using either Gibbs sampling or variational inference (Johnson, 2007). However, we use vanilla EM here; as a consequence, once a parameter is zero, it is always zero. We thus need to ensure that mass is reserved for words outside the tag dictionary at the start of EM. (For transitions, uniform distributions are sufficient since the set of tags is closed.) 2.3 Emission probability initialization The simplest way to initialize the emission distributions is to assign a count of one to every entry in the tag dictionary, and one count for unknowns. Then, during each iteration of EM, the expectation step is able to estimate new non-zero counts for all possible emissi</context>
</contexts>
<marker>Johnson, 2007</marker>
<rawString>Mark Johnson. 2007. Why doesn’t EM find good HMM POS-taggers? In Proceedings EMNLP-CoNLL, pages 296–305.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Julian Kupiec</author>
</authors>
<title>Robust part-of-speech tagging using a hidden markov model.</title>
<date>1992</date>
<journal>Computer Speech &amp; Language,</journal>
<volume>6</volume>
<issue>3</issue>
<contexts>
<context position="2876" citStr="Kupiec (1992)" startWordPosition="440" endWordPosition="441">ized as unsupervised or weakly supervised training. We adopt the terminology type-supervised training to distinguish it from unsupervised training from raw text and supervised training from word tokens labeled with their partsof-speech. Work on type-supervision goes back to (Merialdo, 1994), who introduced the still standard procedure of using a bigram Hidden Markov Model (HMM) trained via Expectation Maximization. Early research appeared to show that learning from types works nearly as well as learning from tokens, with researchers in the 1990s obtaining accuracies up to 96% on English (e.g. Kupiec (1992)). However, the tag dictionaries in these cases were obtained from labeled tokens. While replicating earlier experiments, Banko and Moore (2004) discovered that performance was highly dependent on cleaning tag dictionaries using statistics gleaned from the tokens. This greatly simplifies the job of a typesupervised HMM: it no longer must entertain entries for uncommon word-tag pairs (or mistaken pairs due to annotation errors), which otherwise stand on equal footing with the common ones. When the full, noisy tag dictionary was employed, Banko and Moore found accuracies dropped from 96% to 77%.</context>
</contexts>
<marker>Kupiec, 1992</marker>
<rawString>Julian Kupiec. 1992. Robust part-of-speech tagging using a hidden markov model. Computer Speech &amp; Language, 6(3):225–242.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John Lafferty</author>
<author>Andrew McCallum</author>
<author>Fernando Pereira</author>
</authors>
<title>Conditional random fields: Probabilistic models for segmenting and labeling sequence data.</title>
<date>2001</date>
<booktitle>In Proceedings of ICML,</booktitle>
<pages>282--289</pages>
<publisher>Morgan Kaufmann.</publisher>
<contexts>
<context position="16209" citStr="Lafferty et al., 2001" startWordPosition="2706" endWordPosition="2709">rocessing step after EM, which we refer to as auto-supervised training. We take the HMM trained by EM and use it to label the raw corpus. This gives us an automatically-labeled corpus that can be used for standard supervised training (without EM) to produce a new HMM. The effect of this post-processing step is to smooth the counts learned from EM onto any new words encountered during testing. This procedure significantly improves the ability of the HMM to label unknown words. As a final note, it would of course be possible to use other models at this stage, such as a Conditional Random Field (Lafferty et al., 2001). 3 Enhancing MIN-GREEDY As was discussed above, one of the major problems for type-supervised POS-tagger training with EM is a tag dictionary with low-frequency entries such as the word “a” being associated with the foreign word tag when nearly all of its instances are as a determiner. To avoid the need for manually pruning the tag dictionary, Ravi and Knight (2009) 824 (b) The boy sees a dog (\b) (\b) Figure 1: MIN-GREEDY graph showing a state in the first phase. Numbered, solid arrows: order of chosen bigrams; dotted: potential choices. (b) The boy sees a dog (\b) (b) DT DT (\b) Figure 2: S</context>
</contexts>
<marker>Lafferty, McCallum, Pereira, 2001</marker>
<rawString>John Lafferty, Andrew McCallum, and Fernando Pereira. 2001. Conditional random fields: Probabilistic models for segmenting and labeling sequence data. In Proceedings of ICML, pages 282–289. Morgan Kaufmann.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christopher D Manning</author>
</authors>
<title>Part-of-speech tagging from 97% to 100%: Is it time for some linguistics?</title>
<date>2011</date>
<booktitle>Proceedings of CICLing,</booktitle>
<volume>6608</volume>
<pages>171--189</pages>
<editor>In Alexander Gelbukh, editor,</editor>
<contexts>
<context position="1486" citStr="Manning, 2011" startWordPosition="226" endWordPosition="227">of the tag dictionary and raw data to capture both the openness of a given tag and its estimated prevalence in the raw data. Altogether, our augmentations produce improvements to performance over the original MIN-GREEDY algorithm for both English and Italian data. 1 Introduction Learning accurate part-of-speech (POS) taggers based on plentiful labeled training material is generally considered a solved problem. The best taggers obtain accuracies of over 97% for English newswire text in the Penn Treebank, which can be considered as an upper-bound that matches human performance on the same task (Manning, 2011). However, as Manning notes, this story changes as soon as one is working with different assumptions and data, including having less training data, different kinds of training data, other languages, and other domains. Such POS tagging work has been plentiful and includes efforts to induce POS tags without labels (Christodoulopoulos et al., 2010); learn from POS-tag dictionaries (Ravi et al., 2010), incomplete dictionaries (Hasan and Ng, 2009) and humanconstructed dictionaries (Goldberg et al., 2008); bootstrap taggers for a language based on knowledge about other languages (Das and Petrov, 201</context>
</contexts>
<marker>Manning, 2011</marker>
<rawString>Christopher D. Manning. 2011. Part-of-speech tagging from 97% to 100%: Is it time for some linguistics? In Alexander Gelbukh, editor, Proceedings of CICLing, volume 6608 of Lecture Notes in Computer Science, pages 171–189.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell P Marcus</author>
<author>Beatrice Santorini</author>
<author>Mary Ann Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of English: The Penn Treebank. Computational Linguistics,</title>
<date>1993</date>
<contexts>
<context position="31073" citStr="Marcus et al., 1993" startWordPosition="5318" endWordPosition="5321"> soon as they become completed by the minimization process, and the tag bigrams are chosen in order of frequency, there will be more highfrequency bigrams than low-frequency. As a result, this labeling will contain good tag transitions and token labelings. As such, the labeled data produced by the second phase provides useful information beyond a simple set of sufficient bigrams: it contains legitimate frequency information that can be used to initialize the HMM. We, therefore, initialize an HMM directly from this data to start EM. 4 Evaluation1 English data. We evaluate on the Penn Treebank (Marcus et al., 1993). In all cases we use the first 47,996 tokens of section 16 as our raw data, sections 19–21 as our development set, and perform the final evaluation on sections 22–24. 1Source code, scripts, and data to reproduce the results presented here can be found at github.com/dhgarrette/ type-supervised-tagging-2012emnlp We evaluate two differently sized tag dictionaries. The first is extracted directly from sections 00–15 (751,059 tokens) and the second from sections 00– 07 (379,908 tokens). The former contains 39,087 word types, 45,331 word/tag entries, a per-type ambiguity of 1.16 and yields a per-to</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>Mitchell P. Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz. 1993. Building a large annotated corpus of English: The Penn Treebank. Computational Linguistics, 19(2):313–330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernard Merialdo</author>
</authors>
<title>Tagging English text with a probabilistic model.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>2</issue>
<contexts>
<context position="2554" citStr="Merialdo, 1994" startWordPosition="389" endWordPosition="390">manconstructed dictionaries (Goldberg et al., 2008); bootstrap taggers for a language based on knowledge about other languages (Das and Petrov, 2011), and creating supervised taggers for new, challenging domains such as Twitter (Gimpel et al., 2011). Here, we focus on learning from tag dictionaries. This is often characterized as unsupervised or weakly supervised training. We adopt the terminology type-supervised training to distinguish it from unsupervised training from raw text and supervised training from word tokens labeled with their partsof-speech. Work on type-supervision goes back to (Merialdo, 1994), who introduced the still standard procedure of using a bigram Hidden Markov Model (HMM) trained via Expectation Maximization. Early research appeared to show that learning from types works nearly as well as learning from tokens, with researchers in the 1990s obtaining accuracies up to 96% on English (e.g. Kupiec (1992)). However, the tag dictionaries in these cases were obtained from labeled tokens. While replicating earlier experiments, Banko and Moore (2004) discovered that performance was highly dependent on cleaning tag dictionaries using statistics gleaned from the tokens. This greatly </context>
</contexts>
<marker>Merialdo, 1994</marker>
<rawString>Bernard Merialdo. 1994. Tagging English text with a probabilistic model. Computational Linguistics, 20(2):155–171.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Taesun Moon</author>
<author>Katrin Erk</author>
<author>Jason Baldridge</author>
</authors>
<title>Crouching dirichlet, hidden markov model: Unsupervised POS tagging with context local tag generation.</title>
<date>2010</date>
<booktitle>In Proceedings ofEMNLP,</booktitle>
<pages>196--206</pages>
<location>Cambridge, MA.</location>
<contexts>
<context position="8678" citStr="Moon et al., 2010" startWordPosition="1392" endWordPosition="1395">beled data. It is known, however, that EM has particular problems learning a good HMM for POS tagging (Johnson, 2007; Ravi and Knight, 2009). One reason is that EM generally tries to learn probability distributions that are fairly uniform while POS tag frequencies are quite skewed. For example, “a” appears in the training data with seven different tags, but 99.9% of “a” tokens are determiners. Thus, the accuracy of anything approaching a uniform distribution for “a” tags will suffer greatly. In the context of unsupervised POS tagging models, modeling this distinction greatly improves results (Moon et al., 2010). Here, we can simply exploit the tag dictionary and raw data. An initial set of parameters for the transitions and emissions must be supplied as the input to EM. Given just a tag dictionary, the simplest initialization is to set all tag transitions to be uniform, ranging over all tag continuations, while for emissions, a uniform distribution over all words that occur with the tag is assigned. This may be appropriate when a complete tag dictionary is available, including complete information for words that appear only in the test data. This is because there will never be any unknown words duri</context>
</contexts>
<marker>Moon, Erk, Baldridge, 2010</marker>
<rawString>Taesun Moon, Katrin Erk, and Jason Baldridge. 2010. Crouching dirichlet, hidden markov model: Unsupervised POS tagging with context local tag generation. In Proceedings ofEMNLP, pages 196–206, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sujith Ravi</author>
<author>Kevin Knight</author>
</authors>
<title>Minimized models for unsupervised part-of-speech tagging.</title>
<date>2009</date>
<booktitle>In Proceedings of ACL-AFNLP.</booktitle>
<contexts>
<context position="4249" citStr="Ravi and Knight, 2009" startWordPosition="650" endWordPosition="653">821 Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 821–831, Jeju Island, Korea, 12–14 July 2012. c�2012 Association for Computational Linguistics Knight (2009) for an overview. The highest accuracy achieved to date under these assumptions is 91.6% (Ravi et al., 2010). However, as is often noted (including by the authors themselves), many papers that work on learning taggers from tag dictionaries make unrealistic assumptions about the tag dictionaries they use as input (Toutanova and Johnson, 2008; Ravi and Knight, 2009; Hasan and Ng, 2009). For example, tag dictionaries are typically constructed with every token-tag pair in the data, including those that appear only in the test set. This means that the evaluation of these taggers does not measure how they perform on sentences that contain unseen words or unseen word-tag pairs, a likely occurrence in real use of a trained tagger. We show that it is possible to achieve good tagging accuracy using a noisy and incomplete tag dictionary that has no access to the tags of the raw and test data and no access to the tag frequency information of the labeled training </context>
<context position="8200" citStr="Ravi and Knight, 2009" startWordPosition="1316" endWordPosition="1319">is way obtains 96.5% accuracy. We do not use gold standard labels elsewhere for this paper, but do use this model on the output of type-supervised HMMs. C(ti−1, ti) + A(ti−1)Puni(ti) P(ti|ti−1) = C(ti−1) + A(ti−1) 822 2.2 Type-supervised training We are primarily interested in learning taggers from tag dictionaries combined with unlabeled text. As is standard, we use EM to iteratively estimate the transition and emission probability parameters to maximize the likelihood of unlabeled data. It is known, however, that EM has particular problems learning a good HMM for POS tagging (Johnson, 2007; Ravi and Knight, 2009). One reason is that EM generally tries to learn probability distributions that are fairly uniform while POS tag frequencies are quite skewed. For example, “a” appears in the training data with seven different tags, but 99.9% of “a” tokens are determiners. Thus, the accuracy of anything approaching a uniform distribution for “a” tags will suffer greatly. In the context of unsupervised POS tagging models, modeling this distinction greatly improves results (Moon et al., 2010). Here, we can simply exploit the tag dictionary and raw data. An initial set of parameters for the transitions and emissi</context>
<context position="16578" citStr="Ravi and Knight (2009)" startWordPosition="2769" endWordPosition="2772">ncountered during testing. This procedure significantly improves the ability of the HMM to label unknown words. As a final note, it would of course be possible to use other models at this stage, such as a Conditional Random Field (Lafferty et al., 2001). 3 Enhancing MIN-GREEDY As was discussed above, one of the major problems for type-supervised POS-tagger training with EM is a tag dictionary with low-frequency entries such as the word “a” being associated with the foreign word tag when nearly all of its instances are as a determiner. To avoid the need for manually pruning the tag dictionary, Ravi and Knight (2009) 824 (b) The boy sees a dog (\b) (\b) Figure 1: MIN-GREEDY graph showing a state in the first phase. Numbered, solid arrows: order of chosen bigrams; dotted: potential choices. (b) The boy sees a dog (\b) (b) DT DT (\b) Figure 2: Start of the second MIN-GREEDY phase. proposed that low-probability tags might be automatically filtered from the tag dictionary through a model minimization procedure applied to the raw text and constrained by the full tag dictionary. Ravi et al. (2010) develop a faster approach for model minimization using a greedy algorithm that they call MIN-GREEDY. It is this alg</context>
</contexts>
<marker>Ravi, Knight, 2009</marker>
<rawString>Sujith Ravi and Kevin Knight. 2009. Minimized models for unsupervised part-of-speech tagging. In Proceedings of ACL-AFNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sujith Ravi</author>
<author>Ashish Vaswani</author>
<author>Kevin Knight</author>
<author>David Chiang</author>
</authors>
<title>Fast, greedy model minimization for unsupervised tagging.</title>
<date>2010</date>
<booktitle>In Proceedings of COLING,</booktitle>
<pages>940--948</pages>
<contexts>
<context position="728" citStr="Ravi et al., 2010" startWordPosition="102" endWordPosition="105">Department of Computer Science The University of Texas at Austin dhg@cs.utexas.edu Jason Baldridge Department of Linguistics The University of Texas at Austin jbaldrid@utexas.edu Abstract Past work on learning part-of-speech taggers from tag dictionaries and raw data has reported good results, but the assumptions made about those dictionaries are often unrealistic: due to historical precedents, they assume access to information about labels in the raw and test sets. Here, we demonstrate ways to learn hidden Markov model taggers from incomplete tag dictionaries. Taking the MINGREEDY algorithm (Ravi et al., 2010) as a starting point, we improve it with several intuitive heuristics. We also define a simple HMM emission initialization that takes advantage of the tag dictionary and raw data to capture both the openness of a given tag and its estimated prevalence in the raw data. Altogether, our augmentations produce improvements to performance over the original MIN-GREEDY algorithm for both English and Italian data. 1 Introduction Learning accurate part-of-speech (POS) taggers based on plentiful labeled training material is generally considered a solved problem. The best taggers obtain accuracies of over</context>
<context position="3992" citStr="Ravi et al., 2010" startWordPosition="609" endWordPosition="612">the full, noisy tag dictionary was employed, Banko and Moore found accuracies dropped from 96% to 77%. Banko and Moore’s observations spurred a new line of research that sought to improve performance in the face of full, noisy dictionaries; see Ravi and 821 Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 821–831, Jeju Island, Korea, 12–14 July 2012. c�2012 Association for Computational Linguistics Knight (2009) for an overview. The highest accuracy achieved to date under these assumptions is 91.6% (Ravi et al., 2010). However, as is often noted (including by the authors themselves), many papers that work on learning taggers from tag dictionaries make unrealistic assumptions about the tag dictionaries they use as input (Toutanova and Johnson, 2008; Ravi and Knight, 2009; Hasan and Ng, 2009). For example, tag dictionaries are typically constructed with every token-tag pair in the data, including those that appear only in the test set. This means that the evaluation of these taggers does not measure how they perform on sentences that contain unseen words or unseen word-tag pairs, a likely occurrence in real </context>
<context position="17062" citStr="Ravi et al. (2010)" startWordPosition="2852" endWordPosition="2855">hen nearly all of its instances are as a determiner. To avoid the need for manually pruning the tag dictionary, Ravi and Knight (2009) 824 (b) The boy sees a dog (\b) (\b) Figure 1: MIN-GREEDY graph showing a state in the first phase. Numbered, solid arrows: order of chosen bigrams; dotted: potential choices. (b) The boy sees a dog (\b) (b) DT DT (\b) Figure 2: Start of the second MIN-GREEDY phase. proposed that low-probability tags might be automatically filtered from the tag dictionary through a model minimization procedure applied to the raw text and constrained by the full tag dictionary. Ravi et al. (2010) develop a faster approach for model minimization using a greedy algorithm that they call MIN-GREEDY. It is this algorithm that we extend. 3.1 The original MIN-GREEDY algorithm The MIN-GREEDY algorithm starts by initializing a graph with a vertex for each possible tag of each token in the raw data. The set of possible tags for each token is the set of tags associated with that word in the tag dictionary.Special sentence start and sentence end vertices are added to the graph for each sentence to mark its beginning and end. Unlike Ravi et al. (2010), we allow for an incomplete tag dictionary, me</context>
<context position="22999" citStr="Ravi et al. (2010)" startWordPosition="3903" endWordPosition="3906"> tag dictionary, we can perform another round of type-supervised HMM training, and repeat the entire process. The third MIN-GREEDY phase continues iterating, alternating between training an HMM using a constrained set of tag transitions and training one using a constrained tag dictionary. The size of the set of constrained tag bigrams produced is tracked on each iteration, and the algorithm is considered to have converged when this value changes by less than five percent. The final result of the MIN-GREEDY algorithm is a trained HMM. The evaluation of the MIN-GREEDY algorithm, as described in Ravi et al. (2010), was performed only for scenarios with a complete tag dictionary (including all raw and test word types). As such, no techniques were described for handling unknown words. Because we are interested in the more realistic scenario of an incomplete tag dictionary, we augment the original MIN-GREEDY setup with the smoothing techniques described above. 3.2 Improving tag bigram selection One of the major problems with the MIN-GREEDY algorithm is that its heuristics for choosing the next tag bigram frequently result in many-way ties. In the first two phases of MIN-GREEDY, the greedy procedure looks </context>
<context position="29351" citStr="Ravi et al., 2010" startWordPosition="5025" endWordPosition="5028">ince they are more frequent bigrams, we would want to keep the first path even if the second is completed at a later time. The result of this improvement is a smaller, cleaner minimized tag bigram set to be delivered to the third phase of MIN-GREEDY. 827 Scenario Total Known Unk. 0. Random baseline (choose tag randomly from tag dictionary) 63.53 65.49 2.38 1. HMM baseline (simple EM with tag dictionary and raw text) 69.20 71.42 0.27 2. HMM baseline + auto-supervised training 82.33 83.67 40.46 3. HMM baseline + auto-supervised training + emission initialization 82.05 83.27 44.31 4. MIN-GREEDY (Ravi et al., 2010) with add-one smoothing 74.79 77.17 0.45 5. MIN-GREEDY with add-one smoothing + auto-supervised 86.10 87.59 39.74 6. MIN-GREEDY with add-one smoothing + auto-supervised + emission init 85.02 86.33 44.28 7. 6 + enhanced tag bigram choice heuristic 86.71 88.08 43.93 8. 6 + restrict tag bigrams to tag paths of minimization-tagged output 87.01 88.40 43.74 9. 6 + HMM initialization from minimization-tagged output 88.52 89.92 44.80 10. 6 + 7 + 8 + 9 88.51 89.92 44.80 Table 1: English tagging accuracy using PTB sections 00-15 to build the tag dictionary. Known word types are those appearing in the ta</context>
<context position="36059" citStr="Ravi et al., 2010" startWordPosition="6147" endWordPosition="6150">inimizationtagged output causes problems in the smaller PTB scenario, presumably falling to a local maximum like MIN-GREEDY that the other improvements are able to help the algorithm avoid. Though the accuracy improvements are less than for English, the Italian results show that our MINGREEDY enhancements make an appreciable difference for a language and dataset for which the approaches considered were run sight unseen. Error analysis One of the primary goals of model minimization is to automatically eliminate lowprobability entries from the tag dictionary that might confuse the EM algorithm (Ravi et al., 2010). In order to see how well our techniques are able to identify and eliminate these unlikely word/tag pairs, we analyzed the tagging errors from each experiment. In doing so, we discovered that the two of the most problematic words for the EM algorithm are “a” and “in”. We ran further experiments explore what was happening with those words. The results, using PTB sections 00–07 are shown in Table 3. In PTB sections 00-07 the word “a” appears 7630 times and with 7 different tags. This includes 7621 occurrences with tag DT, 3 with tag SYM (symbol), and 1 time with LS (list item marker). As such, </context>
<context position="38819" citStr="Ravi et al. (2010)" startWordPosition="6652" endWordPosition="6655">ful choosing of bigrams during minimization results in the avoidance of LS and FW (but not SYM) for “a” as well as FW and RP for “in”. Restricting the tag bigrams output from MINGREEDY to just those on tag paths avoids LS and FW for “a” and FW for “in”. Finally, using the tagged sentences from MIN-GREEDY as noisy supervision for EM initialization eliminates all rare tags, as does the use of all three enhancements together. 5 Conclusion Our results show it is possible to create accurate POS-taggers using type-supervision with incomplete tag dictionaries by extending the MIN-GREEDY algorithm of Ravi et al. (2010). The most useful change we made to the MIN-GREEDY procedure was the implementation of a better heuristic for picking tag bigrams. An intuitive and straightforward emission initialization provides the necessary basis to run EM on a given raw token sequence. Using EM output on this raw sequence as auto-labeled material to a supervised HMM then proves highly effective for generalization to new texts containing previously unseen word types. Vaswani et al (2010) explore the use of minimum description length principles in a Bayesian model as a way of capturing model minimization, inspired by the MI</context>
</contexts>
<marker>Ravi, Vaswani, Knight, Chiang, 2010</marker>
<rawString>Sujith Ravi, Ashish Vaswani, Kevin Knight, and David Chiang. 2010. Fast, greedy model minimization for unsupervised tagging. In Proceedings of COLING, pages 940–948.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kristina Toutanova</author>
<author>Mark Johnson</author>
</authors>
<title>A bayesian lda-based model for semi-supervised part-of-speech tagging.</title>
<date>2008</date>
<booktitle>In Proceedings of NIPS.</booktitle>
<contexts>
<context position="4226" citStr="Toutanova and Johnson, 2008" startWordPosition="645" endWordPosition="649">y dictionaries; see Ravi and 821 Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 821–831, Jeju Island, Korea, 12–14 July 2012. c�2012 Association for Computational Linguistics Knight (2009) for an overview. The highest accuracy achieved to date under these assumptions is 91.6% (Ravi et al., 2010). However, as is often noted (including by the authors themselves), many papers that work on learning taggers from tag dictionaries make unrealistic assumptions about the tag dictionaries they use as input (Toutanova and Johnson, 2008; Ravi and Knight, 2009; Hasan and Ng, 2009). For example, tag dictionaries are typically constructed with every token-tag pair in the data, including those that appear only in the test set. This means that the evaluation of these taggers does not measure how they perform on sentences that contain unseen words or unseen word-tag pairs, a likely occurrence in real use of a trained tagger. We show that it is possible to achieve good tagging accuracy using a noisy and incomplete tag dictionary that has no access to the tags of the raw and test data and no access to the tag frequency information o</context>
</contexts>
<marker>Toutanova, Johnson, 2008</marker>
<rawString>Kristina Toutanova and Mark Johnson. 2008. A bayesian lda-based model for semi-supervised part-of-speech tagging. In Proceedings of NIPS.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ashish Vaswani</author>
<author>Adam Pauls</author>
<author>David Chiang</author>
</authors>
<title>Efficient optimization of an mdl-inspired objective function for unsupervised part-of-speech tagging.</title>
<date>2010</date>
<booktitle>In Proceedings of the ACL 2010 Conference Short Papers,</booktitle>
<pages>209--214</pages>
<location>Uppsala,</location>
<contexts>
<context position="39281" citStr="Vaswani et al (2010)" startWordPosition="6726" endWordPosition="6729">is possible to create accurate POS-taggers using type-supervision with incomplete tag dictionaries by extending the MIN-GREEDY algorithm of Ravi et al. (2010). The most useful change we made to the MIN-GREEDY procedure was the implementation of a better heuristic for picking tag bigrams. An intuitive and straightforward emission initialization provides the necessary basis to run EM on a given raw token sequence. Using EM output on this raw sequence as auto-labeled material to a supervised HMM then proves highly effective for generalization to new texts containing previously unseen word types. Vaswani et al (2010) explore the use of minimum description length principles in a Bayesian model as a way of capturing model minimization, inspired by the MIN-GREEDY algorithm. The advantage there is that only a single objective function needs to be optimized, rather than having initialization followed by an iterative back and forth with pruning of tag-tag pairs. Our own next steps are to move in a similar direction to explore the possibilities for encoding the intuitions we developed for initialization and minimization as a single generative model. Goldberg et al. (2008) note that fixing noisy dictionaries by h</context>
</contexts>
<marker>Vaswani, Pauls, Chiang, 2010</marker>
<rawString>Ashish Vaswani, Adam Pauls, and David Chiang. 2010. Efficient optimization of an mdl-inspired objective function for unsupervised part-of-speech tagging. In Proceedings of the ACL 2010 Conference Short Papers, pages 209–214, Uppsala, Sweden.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>