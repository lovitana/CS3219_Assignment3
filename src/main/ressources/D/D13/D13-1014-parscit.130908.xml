<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000004">
<title confidence="0.998659">
Modeling and Learning Semantic Co-Compositionality
through Prototype Projections and Neural Networks
</title>
<author confidence="0.999309">
Masashi Tsubaki, Kevin Duh, Masashi Shimbo, Yuji Matsumoto
</author>
<affiliation confidence="0.9993055">
Graduate School of Information Science
Nara Institute of Science and Technology
</affiliation>
<address confidence="0.636614">
8916-5, Takayama, Ikoma, Nara 630-0192, Japan
</address>
<email confidence="0.99949">
{masashi-t,kevinduh,shimbo,matsu}@is.naist.jp
</email>
<sectionHeader confidence="0.998604" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999705095238095">
We present a novel vector space model for se-
mantic co-compositionality. Inspired by Gen-
erative Lexicon Theory (Pustejovsky, 1995),
our goal is a compositional model where
both predicate and argument are allowed to
modify each others’ meaning representations
while generating the overall semantics. This
readily addresses some major challenges with
current vector space models, notably the pol-
ysemy issue and the use of one represen-
tation per word type. We implement co-
compositionality using prototype projections
on predicates/arguments and show that this
is effective in adapting their word represen-
tations. We further cast the model as a
neural network and propose an unsupervised
algorithm to jointly train word representations
with co-compositionality. The model achieves
the best result to date (p = 0.47) on the
semantic similarity task of transitive verbs
(Grefenstette and Sadrzadeh, 2011).
</bodyText>
<sectionHeader confidence="0.999471" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999860818181818">
Vector space models of words have been very
successful in capturing the semantic and syntactic
characteristics of individual lexical items (Turney
and Pantel, 2010). Much research has addressed
the question of how to construct individual word
representations, for example distributional models
(Mitchell and Lapata, 2010) and neural models
(Collobert and Weston, 2008). These word repre-
sentations are used in various natural language pro-
cessing (NLP) tasks such as part-of-speech tagging,
chunking, named entity recognition, and semantic
</bodyText>
<subsubsectionHeader confidence="0.508492">
Co-Compositionality with Prototype Projections
</subsubsectionHeader>
<figureCaption confidence="0.996050333333333">
Figure 1: Here, we capture the semantics of run in run
company by projecting the original word representation
of run to the prototype space of company (and vice versa).
</figureCaption>
<bodyText confidence="0.9998725625">
role labeling (Turian et al., 2010; Collobert et al.,
2011).
Recently, modeling of semantic compositionality
(Frege,1892) in vector space has emerged as another
important line of research (Mitchell and Lapata,
2008; Mitchell and Lapata, 2010; Baroni and Zam-
parelli, 2010; Socher et al., 2012; Grefenstette and
Sadrzadeh, 2011; Van de Cruys et al., 2013). The
goal is to formulate how individual word represen-
tations ought to be combined to achieve phrasal or
sentential semantics.
The main questions for semantic compositionality
that we are concerned with are: (1) how can poly-
semy be handled by a single vector representation
per word type, learned by either a distributional or
neural model, and (2) how does composition resolve
</bodyText>
<figure confidence="0.9983184">
runcompany
companyrun
Co-compositional vector
of verb and object
operate =
Prototype
Projection
VERB
OBJ
X
Ok
・・・
・・・
≈
firm
bank
start
build
X
≈
m
・・・
Vk
buy
hotel
・・・
Pcompany=VkTVk
run
Prun=OkTOk
company
</figure>
<page confidence="0.960573">
130
</page>
<note confidence="0.731254">
Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 130–140,
Seattle, Washington, USA, 18-21 October 2013. c�2013 Association for Computational Linguistics
</note>
<bodyText confidence="0.9998635">
these ambiguities. To this end, we are inspired by
the idea of type coercion and co-compositionality
in Generative Lexicon Theory (Pustejovsky, 1995).
Co-compositionality advocates that instead of a
predicate-argument view of composition, both pred-
icate and argument influence/coerce each other to
generate the overall meaning. For example, consider
a polysemous word like run:
</bodyText>
<listItem confidence="0.9999765">
• (a) He runs the company.
• (b) He runs the marathon.
</listItem>
<bodyText confidence="0.9949109">
Run may have several senses, but the prototypical
verbs that select for company differ from those
that select for marathon, and thus the ambiguity
at the word level is resolved at the sentence level.
The same is true for the other direction, where the
predicate also coerces meaning to the argument to
fit expectation.
We believe that models for semantic com-
position ought to incorporate elements of co-
compositionality. We propose such a model here,
using what we call prototype projections. For each
predicate, we transform its vector representation by
projecting it into a latent space that is prototypical
of its argument. This projection is performed anal-
ogously for each argument as well, and the final
meaning is computed by composition of these trans-
formed vectors (Figure 1). In addition, the model is
cast as a neural network where word representations
could be re-trained or fine-tuned.&apos;
Our contributions are two-fold:
</bodyText>
<listItem confidence="0.896917">
1. We propose a novel model for semantic co-
</listItem>
<bodyText confidence="0.9171736">
compositionality. This model, based on
prototype projections, is easy to implement
and achieves state-of-the-art performance in
the sentence similarity dataset developed by
Grefenstette and Sadrzadeh (2011).
</bodyText>
<listItem confidence="0.922105">
2. Our results empirically confirm that existing
word representations (eg., SDS and NLM in
Section 2) are sufficiently effective at capturing
</listItem>
<bodyText confidence="0.999302324324324">
&apos;While we are inspired by co-compositionality, it is impor-
tant to note that our model does not implement qualia structure
and other important components of Generative Lexicon Theory.
We operate within the vector space model of distributional
semantics, so these ideas are implemented with matrix algebra,
which is a natural fit with neural networks.
polysemy, as long as we have the proper mech-
anism to tease out the proper sense during com-
position. We further propose an unsupervised
neural network training algorithm that jointly
fine-tunes the word representations within the
co-composition model, resulting in even better
performance on the sentence similarity task.
We would like to emphasize the second contribu-
tion especially. Semantics research is divided in two
strands, one focusing on learning word represen-
tations without consideration for compositionality,
and the other focusing on compositional semantics
using the representations only as an input. But issues
are actually related from the linguistics perspective,
and even more so if we adopt a Generative Lexicon
perspective. Our neural network model bridges
these two strands of research by modeling co-
compositionality and learning word representations
simultaneously. We note that methods using context
effects have been explored by Erk and Pad´o (2008;
2009) and Thater et al. (2010; 2011), but to the
best of our knowledge, ours is the first model to
perform co-compositionality and learning of word
representations jointly.
In the following, we first provide background to
the word representations employed here (Section 2).
We describe the model for co-compositionality in
Section 3 and the corresponding neural network in
Section 4. Evaluation and experiments are presented
in Sections 5 and 6. Finally, we end with related
work (Section 7) and conclusions (Section 8).
</bodyText>
<sectionHeader confidence="0.991494" genericHeader="introduction">
2 Word Vector Representations
</sectionHeader>
<subsectionHeader confidence="0.949305">
2.1 Simple Distributional Semantic space
(SDS) word vectors
</subsectionHeader>
<bodyText confidence="0.999919545454545">
Word meaning is often represented in a high di-
mensional space, where each element corresponds to
some contextual element in which the word is found.
Mitchell and Lapata (2010) present a co-occurrence-
based semantic space called Simple Distributional
Semantic space (SDS). Their SDS model uses a con-
text window of five words on either side of the target
word and 2,000 vector components, representing the
most frequent context words (excluding a list of stop
words). These components vi(t) were set to the
ratio of the probability of the context word given the
</bodyText>
<page confidence="0.997326">
131
</page>
<bodyText confidence="0.9905075">
target word to the probability of the context word
overall:
</bodyText>
<equation confidence="0.9948875">
__ Wi|t) freqcZ,t x freqtotal (1)
vi(t) Aci) freqt x freqcZ
</equation>
<bodyText confidence="0.9997682">
where freqcZ,t, freqtotal, freqt and freqcZ are the
frequencies of the context word ci with the target
word t, the total count of all word tokens, the
frequency of the target word t, and the frequency
of the context word ci, respectively.
</bodyText>
<subsectionHeader confidence="0.988046">
2.2 Neural Language Model (NLM) word
embeddings
</subsectionHeader>
<bodyText confidence="0.997927655172414">
Another popular way to learn word representations
is based on the Neural Language Model (NLM)
(Bengio et al., 2003). In comparison with SDS,
NLM tend to be low-dimensional (e.g. 50 dimen-
sions) but employ dense features. These dense
feature vectors are usually called word embeddings,
and it has been shown that such vectors can cap-
ture interesting linear relationships, such as king −
man + woman Pt� queen (Mikolov et al., 2013).
In this work, we adopt the model by Collobert
and Weston (2008). The idea is to construct a
neural network based on word sequences, where
one outputs high scores for n-grams that occur in a
large unlabeled corpus and low scores for nonsense
n-grams where one word is replaced by a random
word. This word representation with NLM has been
used to good effect, for example in (Turian et al.,
2010; Collobert et al., 2011; Huang et al., 2012)
where induced word representations are used with
sophisticated features to improve performance in
various NLP tasks.
Specifically, we first represent the word sequence
as a vector x = [d(w1); d(w2); ... ; d(wm)], where
wi is ith word in the sequence, m is the win-
dow size, d(w) is the vector representation of
word w (an n-dimensional column vector) and
[d(w1); d(w2); ... ; d(wm)] is the concatenation of
word vectors as an input of neural network. Second,
we compute the score of the sequence,
</bodyText>
<equation confidence="0.999036">
score(x) = sT(tanh(Wx + b)) (2)
</equation>
<bodyText confidence="0.999583090909091">
where W C Rhx(mn) and s C Rh are the first
and second layer weights of the neural network,
and b C Rh is the bias unit of hidden layer. The
superscript T represents transposition, and tanh is
applied element-wise. We also create a corrupted
sequence xc = [d(w1); d(w2); ... ; d(wm′)] where
wm′ is chosen randomly from the vocabulary. We
compute the score of this implicit negative sequence
xc with the same neural network, score(xc) =
sT(tanh(Wxc + b)). Finally, we get the cost
function of this training algorithm as follow.
</bodyText>
<equation confidence="0.997424">
J = max(0,1 − score(x) + score(xc)) (3)
</equation>
<bodyText confidence="0.999675333333333">
In order to minimize this cost function, we optimize
the parameters 0 = (s, W, b, x) via backpropagation
with stochastic gradient descent (SGD).
</bodyText>
<sectionHeader confidence="0.999926" genericHeader="method">
3 The Model
</sectionHeader>
<subsectionHeader confidence="0.999746">
3.1 Prototype Projection
</subsectionHeader>
<bodyText confidence="0.9999079">
Generative Lexicon Theory (Pustejovsky, 1995)
makes a distinction between accidental polysemy
(homonyms, e.g. bank as financial institution vs.
as river side) and logical polysemy (e.g. figure and
ground meanings of door). Our model handles both
cases using the concept of projection to latent proto-
type space. The fundamental idea is that for each
word w and a syntactic/semantic (binary) relation
R (such as verb-object relation), w has a set of
prototype words with which it frequently occurs in
relation R. For example, if w is a word company,
and R is the object-verb relation, prototype words
should include start, build, and buy (Figure 1).
For each word-relation pair, we pre-compute the
latent semantic subspace spanned by these prototype
words.
Later, when we encounter a phrase expressing a
relation R between two words w1 and w2, each word
is first projected onto a latent subspace determined
by the other word and relation R. The projection
operation shifts the meaning of individual words in
accordance with context, and through this operation
we realize coercion/co-composition. And finally, the
meaning of the phrase is computed from the two
projected points in the semantic space.
Let us describe how to compute the latent sub-
space associated with a word w0 and a relation R.
First, we collect from a corpus a set of prototype
words that occur frequently in relation R with target
word w0. So for example in Figure 1, if w0 =
</bodyText>
<page confidence="0.938746">
132
</page>
<bodyText confidence="0.64455">
verb object landmark similarity(verb, landmark) similarity(projected verb, landmark)
run company operate 0.40 0.70
meet criterion satisfy 0.49 0.71
spell name write 0.04 0.50
</bodyText>
<tableCaption confidence="0.6240715">
Table 1: Examples of verb-object pairs. Original verb and landmark verb similarity, prototype projected verb and
landmark verb similarity, as measure by cosine using Collobert and Weston’s word embeddings. Meet has a abstract
meaning itself, but after prototype projection with matrix constructed by word vectors of W (VerbOf, criterion), meet
is more close to meaning of satisfy.
</tableCaption>
<bodyText confidence="0.528679">
company, and R = VerbOf is the object-verb
relation,
</bodyText>
<equation confidence="0.957199">
W (VerbOf, company) = {start, build,..., buy}.
</equation>
<bodyText confidence="0.94803">
Now let W(R, w0) = {w1, w2, · · · , wm} be
the m prototype words we collected, and let d(w)
denote the n-dimensional (column) vector represen-
tation of word w (either by SDS or NLM representa-
tion). We make an m×n matrix C(R,w0) by stacking
the prototype word vectors, i.e.,
</bodyText>
<equation confidence="0.998526">
C(R,w0) = [d(w1), d(w2), ··· , d(wm)]T (4)
</equation>
<bodyText confidence="0.9926475">
and then apply Singular Value Decomposition
(SVD) to extract the latent space from this matrix:
</bodyText>
<equation confidence="0.952878">
C(R,w0) ≈ UkEkVTk. (5)
</equation>
<figureCaption confidence="0.985043">
Figure 2: Graphical representation of SVD in our model.
</figureCaption>
<bodyText confidence="0.997356">
Figure 2 shows the graphical representation of
this matrix factorization. In NLP tasks, SVD is
often applied to a term-document matrix, but in our
model, we apply SVD to the matrix consisting of
word vectors.
Intuitively, EkVTk represents the latent sub-
space formed by prototypical words W (R, w0) =
{w1, w2, · · · ,wm}. We call this matrix the proto-
type space of word w0 with respect to relation R.
Note that the matrix of orthogonal projection
onto this prototype space is given by P(R,w0) =
(EkVTk)T(EkVTk). Hence, when we observe a rela-
tion R(w0, w), the projected representation of word
w in this context is computed by prpj(R,w0)(w)
defined as follows:
</bodyText>
<equation confidence="0.99889">
prpj(R,w0)(w) = P(R,w0)d(w). (6)
</equation>
<bodyText confidence="0.990326">
Table 1 shows several examples of how meanings
change after prototype projection using word em-
beddings of Collobert and Weston (2008).2
</bodyText>
<subsectionHeader confidence="0.999933">
3.2 Co-Compositionality
</subsectionHeader>
<bodyText confidence="0.999705571428572">
In order to model co-compositionality, we apply
prototype projection to both the verb and the object.
In particular, suppose verb is wv and object is wo,
C(VerbOf,wo) is used to project wv and C(ObjOf,w„)
is used to project wo. The vector that represents
the overall meaning of verb-object with prototype
projection is computed by:
</bodyText>
<equation confidence="0.995466">
cocomp(wv, wo) =
f(prpj(VerbOf,wo)(wv),prpj(ObjOf,w„)(wo)) (7)
</equation>
<bodyText confidence="0.999805666666667">
Function f can be a compositional computation like
simple addition or element-wise multiplication of
two vectors. This is graphically shown in Figure 1.
</bodyText>
<sectionHeader confidence="0.863747" genericHeader="method">
4 Unsupervised Learning of
Co-Compositionality
</sectionHeader>
<bodyText confidence="0.999966">
In this section, we propose a new neural language
model that learns word representations while jointly
accounting for compositional semantics. One cen-
tral assumption of our work (and many other works
in compositional semantics) is that a single vector
</bodyText>
<equation confidence="0.786236736842105">
2ronan.collobert.com/senna/
word vector dimension n k k n
C Uk
・・・
・ ・ ・
・ ・ ・
・ ・ ・
・・・
m
≈
T
Σk Vk
・ ・ ・
・ ・ ・
k
k
word1
word2
wordm
</equation>
<page confidence="0.859817">
133
</page>
<figure confidence="0.905387">
Compositional
Neural Language Model (C-NLM)
</figure>
<figureCaption confidence="0.9457685">
Figure 3: Compositional Neural Language Model (C-
NLM).
</figureCaption>
<figure confidence="0.998335941176471">
Co-Compositional
Neural Language Model (CoC-NLM)
score = sTz
s
z = f(v, o)
verb
obj
v o
score = sTz
s
z = f(v, o)
Y
Pobj Pverb
X
verb
obj
v o
</figure>
<bodyText confidence="0.999608">
per word type sufficiently represents the multiple
meanings and usage patterns of a word.3 That
means that for a polysemous word, its word vector
actually represents an aggregation of the distinctly
different contexts it occurs in. We will show that
such an assumption is quite reasonable under our
model, since the prototype projections successfully
tease out the proper semantics from these aggregate
representations.
However, it is natural to wonder whether one
can do better if one incorporates the compositional
model into the training of the word representations
in the first place. To do so, we formulate a nov-
el model called Compositional Neural Language
Model (Section 4.1). This model is a combination
of an unsupervised training algorithm with basic
compositionality (addition/multiplications). Then,
we extend this model with the projection idea in
section 3.2 to formulate a Co-Compositional Neural
Language Model (Section 4.2).
</bodyText>
<subsectionHeader confidence="0.67919">
4.1 Compositional Neural Language Model
(C-NLM)
</subsectionHeader>
<bodyText confidence="0.9658307">
Compositional Neural Language Model (C-NLM)
is a combination of a word representation learning
method and compositional rule. In contrast to other
compositional models based on machine learning,
our model has no complex parameters for model-
ing composition. Composition is modeled using
straightforward vector addition/multiplications; in-
stead, what is learned is the word representation.
Figure 3 shows the C-NLM. The learning al-
gorithm is unsupervised, and works by artificially
</bodyText>
<footnote confidence="0.960985333333333">
3There are works on multiple representations, e.g.,
(Reisinger and Mooney, 2010); we focus on single represen-
tation here.
</footnote>
<figureCaption confidence="0.9990585">
Figure 4: Co-Compositional Neural Language Model
(CoC-NLM) is C-NLM with prototype projection.
</figureCaption>
<bodyText confidence="0.999945909090909">
generating negative examples in a fashion analogous
to the NLM learning algorithm of (Collobert and
Weston, 2008) and contrastive estimation (Smith
and Eisner, 2005). First, given some initial word
representations and raw sentences, we compute the
compositional vector with function f (in this sec-
tion, we will assume that we will be using the
addition operator). Second, in order to obtain the
score of compositional vector, we compute the dot
product with vector s C ][Rn (n is the dimension of
the word vector space): verb vector v = d(wv) and
</bodyText>
<equation confidence="0.7386865">
object vector o = d(wo).
score(v, o) = s&apos;f(v, o) = s&apos;(v + o) (8)
</equation>
<bodyText confidence="0.989888142857143">
We also create a corrupted pair by substituting a ran-
dom verb wverb′. The cost function J = max(0,1−
score(v, o) + score(ve, o)), where ve is the word
vector of wverb′, encourages that the score of correct
pair is higher than the score of the corrupt pair. Let
z = v + o, our model parameters are 0 = (s, z, v).
The optimization is divided into two steps:
</bodyText>
<listItem confidence="0.999490166666667">
1. Optimize s and z via SGD.
2. Let znew be the updated z via step 1. The new
verb vector vnew trained within additive composi-
tionality is just vnew = znew − o. Note that if we
also want to optimize o, we may want to also corrupt
the object and run SGD in step 2 as well.
</listItem>
<subsectionHeader confidence="0.8485265">
4.2 Co-Compositional Neural Language Model
(CoC-NLM)
</subsectionHeader>
<bodyText confidence="0.9999585">
We now add prototype projection into C-NLM,
making our final model: Co-Compositional Neural
</bodyText>
<page confidence="0.994451">
134
</page>
<bodyText confidence="0.990352333333333">
Language Model (CoC-NLM). We define the score
function as dot product of s and additional vector of
prototype projected vectors (Figure 4). Let Pobj =
</bodyText>
<equation confidence="0.88216">
P(VerbOf,wo) and Pverb = P(ObjOf,w„),
score(v, o) = sT(Pobjv + Pverbo). (9)
</equation>
<bodyText confidence="0.99178">
Let x = Pobjv, y = Pverbo and z = x + y.
Our model parameters are 0 = (s, z, v). The
optimization algorithm of CoC-NLM is divided into
three steps like C-NLM. First, we optimize s and
z. Second, the projected verb vector is updated
as xnew = znew − y. Finally we optimize v to
minimize the Euclidean distance between xnew and
Pobjv, where A is a regularization hyper-parameter:
</bodyText>
<equation confidence="0.9886665">
J(v) = 2||xnew − Pobjv||2 + A
12 vTv (10)
</equation>
<sectionHeader confidence="0.999555" genericHeader="method">
5 Evaluation
</sectionHeader>
<subsectionHeader confidence="0.990599">
5.1 Dataset
</subsectionHeader>
<bodyText confidence="0.9999905">
In order to evaluate the performance of our new
co-compositional model with prototype projection
and word representation learning algorithm, we
make use of the disambiguation task of transitive
sentences developed by Grefenstette and Sadrzadeh
(2011). This is an extension of the two words
phrase similarity task defined in Mitchell and Lapata
(2008), and constructed according to similar guide-
lines. The dataset consists of similarity judgments
between a landmark verb and a triple consisting of
a transitive target verb, subject and object extracted
from the BNC corpus. Human judges give scores
between 1 to 7, with higher scores implying higher
semantic similarity. For example, Table 2 shows
some examples from the data: we see that the verb
meet with subject system and object criterion is
judged similar to the landmark verb satisfy but not
visit. The dataset contains a total of 2500 similarity
judgements, provided by 25 participants.4 The
task is to have the model produce a score for each
pair of landmark verb and verb-subject-object triple.
Models are evaluated by computing the Spearman’s
p correlation between its similarity scores and that
of the human judgments.
</bodyText>
<footnote confidence="0.976895">
4http://www.cs.ox.ac.uk/
people/edward.grefenstette/
</footnote>
<table confidence="0.9988574">
verb subj obj landmark sim
meet system criterion satisfy 6
meet system criterion visit 1
write student name spell 7
write student paper spell 2
</table>
<tableCaption confidence="0.954376833333333">
Table 2: Examples from the disambiguation task de-
veloped by Grefenstette and Sadrzadeh (2011). Human
judges give scores between 1 to 7, with higher scores
implying higher semantic similarity. Verb meet with
subject system and object criterion is judged similar to
the landmark verb satisfy but not visit.
</tableCaption>
<subsectionHeader confidence="0.99718">
5.2 Baselines
</subsectionHeader>
<bodyText confidence="0.9998785">
We compare our model against multiple baselines
for semantic compositionality:
</bodyText>
<listItem confidence="0.955332375">
1. Mitchell and Lapata’s (2008) additive and
element-wise multiplicative model as simplest
baselines.
2. Grefenstette and Sadrzadeh’s (2011) model
based on the abstract categorical framework
(Coecke et al., 2010). This model computes
the outer product of the subject and object
vector, the outer product of the verb vector
with itself, and then the element-wise product
of both results.
3. Erk and Pad´o’s (2008) model, which adapts the
word vectors based on context and is the most
similar in terms of motivation to ours.
4. Van de Cruy et al. (2013) multi-way interaction
model based on matrix factorization. This
achieves the best result for this task to date.
</listItem>
<bodyText confidence="0.999905">
A detailed explanation of these models will be
provided in Section 7. For the underlying word rep-
resentations, we experiment with sparse 2000-dim
SDS and dense 50-dim NLM. These are provided
by Blacoe and Lapata (2012)5 and trained on the
British National Corpus (BNC). We are interested
in knowing how sensitive each model is to the
underlying word representation. In general, this is
a challenging task: the upper-bound of p = 0.62 is
the inter-annotator agreement.
</bodyText>
<footnote confidence="0.9953355">
5http://homepages.inf.ed.ac.uk/
s1066731/index.php?page=resources
</footnote>
<page confidence="0.996844">
135
</page>
<subsectionHeader confidence="0.995184">
5.3 Implementation details
</subsectionHeader>
<bodyText confidence="0.9991747">
In terms of implementation detail, our model and our
re-implementation of Erk and Pado’s model make
use of the ukWaC corpus (Baroni et al., 2009).6 This
corpus is a two billion word corpus automatically
harvested from the web and parsed by the Malt-
Parser (Nivre et al., 2006). We use ukWaC corpus
to collect W (VerbOf, wo) and W (ObjOf, wv) for
prototype projections. We also extract about 5000
verb-object pairs that relevant for testdata from this
corpus to train our neural network learning algorith-
m. In our co-compositional model, the contribution
ratio of SVD is set to 80% (i.e. automatically
fixing k in SVD to include 80% of the top singular
values). We set the number of prototype vectors
to be m = 20, where W(VerbOf,wo) is filtered
with high frequency words and W(ObjOf,wv) is
filtered with both high frequency and high similarity
words. In our model, we output the scores for SVO
triple sentence dataset as (subject=ws, verb=wv,
object=wo, f = Addition/Multiplication):
</bodyText>
<equation confidence="0.977329">
cocomp(ws, wv, wo) =
f(d(ws), cocomp(wv, wo)) (11)
</equation>
<sectionHeader confidence="0.999866" genericHeader="evaluation">
6 Results and Discussion
</sectionHeader>
<subsectionHeader confidence="0.999184">
6.1 Main Results: The Correlation
</subsectionHeader>
<bodyText confidence="0.9785365">
Table 3 shows the correlation scores of various
models. Our observations are as follows:
</bodyText>
<listItem confidence="0.976156">
1. The best reported result for this task (Van de
Cruys et al., 2013) is p = 0.37. Our
model (with NLM as word representation and
f=Addition as operator) achieves p = 0.44,
outperforming it by a large margin. To the best
of our knowledge, this is now state-of-the-art
result for this task.
2. Our model is not very sensitive to the underly-
ing word representation. With f=Addition, we
have p = 0.41 for SDS vs p = 0.44 for NLM.
With f=Multiply, we have p = 0.37 for SDS
vs. p = 0.35 for NLM. This implies that the
prototype projection is robust to the underlying
word representation, which is a desired charac-
teristic of compositional models.
</listItem>
<footnote confidence="0.9669195">
6http://wacky.sslmit.unibo.it/
doku.php?id=corpora
</footnote>
<table confidence="0.999707642857143">
Model p
Grefenstette and Sadrzadeh (2011) 0.21
Add (SDS) 0.31
Add (NLM) 0.31
Multiply (SDS) 0.35
Multiply (NLM) 0.30
Van de Cruys et al. (2013) 0.37
Erk and Pad´o (SDS) 0.39
Erk and Pad´o (NLM) 0.03
Co-Comp with f=Add (SDS) 0.41
Co-Comp with f=Add (NLM) 0.44
Co-Comp with f=Multiply (SDS) 0.37
Co-Comp with f=Multiply (NLM) 0.35
Upper bound 0.62
</table>
<tableCaption confidence="0.7952132">
Table 3: Results of the different compositionality models
on the similarity task. The number of prototype words
m = 20 in all our models. Our model (f=Addition and
NLM) achieves the new state-of-the-art performance for
this task (p = 0.44).
</tableCaption>
<listItem confidence="0.693583666666667">
3. The contextual model of Erk and Pad´o (SDS)
also performed relatively well (p = 0.39),
in fact outperforming the Van de Cruy et al.
(2013) result as well. This means that the
general idea of adapting word representations
based on context is a very powerful one. How-
ever, Erk and Pad´o’s model using the NLM rep-
resentation is extremely poor (p = 0.03). The
reason is that it uses a product operation under-
the-hood to adapt the vectors, which inherently
assumes a sparse representation. In this sense,
our projection approach is more robust.
</listItem>
<bodyText confidence="0.999628833333333">
The state-of-the-art result for our model in Table
3 does not yet make use of the training algorithm
described in Section 4. It is simply implementing
the co-compositionality idea using prototype projec-
tions (Section 3.2). Next in Section 6.2 we will show
additional gains using unsupervised learning.
</bodyText>
<subsectionHeader confidence="0.99858">
6.2 Improvements from unsupervised learning
</subsectionHeader>
<bodyText confidence="0.999437">
In this experiment, we examine how much gain is
possible by re-training the word representation of
verbs using the unsupervised algorithm described
in Section 4. We focus on the additive model
of Compositional NLM, both basic and prototype
projection. The initial word representation is from
</bodyText>
<page confidence="0.995546">
136
</page>
<table confidence="0.997198333333333">
model original representation re-trained
C-NLM 0.31 0.38
CoC-NLM 0.44 0.47
</table>
<tableCaption confidence="0.997952">
Table 4: Results of re-training the word representation
</tableCaption>
<bodyText confidence="0.944914333333333">
for C-NLM and CoC-NLM. Learning rate α = 0.01,
regularization \ = 10−4 and iteration= 20. One iteration
is one run through the dataset of 5000 verb-object pairs
which we made from the ukWaC corpus.
NLM. Table 4 shows the gains in correlation score.
This result shows that our learning model suc-
cessfully captures good representation within co-
compositionality of additive model. In contrast to
other previous compositional models, our model
does not require estimating a large number of pa-
rameters for computation of compositional vectors
and word representation itself is more suitable for
it. Furthermore, learning is very fast, taking about
10 minutes for C-NLM on a standard machine with
Intel Core i7 2.93Ghz CPU and 8GB of RAM.
</bodyText>
<subsectionHeader confidence="0.999972">
6.3 The number of prototype words
</subsectionHeader>
<bodyText confidence="0.999884125">
The number of prototype words (m in Figure 1) we
use to generate the prototype space is one hyper-
parameter that our model has. Here, we analyze the
effect of the choice of m. Figure 5 shows the rela-
tion of m and the performance of co-compositional
model with prototype projections using either SDS
or NLM representations. In general, both NLM
and SDS show relatively smooth and flat curves
across m, indicating the relative robustness of the
approach. Nevertheless, results do degrade for large
m, due to increase in noise from non-prototype
words. Further, it does appear that NLM has a slow-
er drop in correlation with increasing m compared
with SDS. This suggests that NLM is more robust,
which is possibly attributable to the dense and low-
dimensional distributed features.
</bodyText>
<subsectionHeader confidence="0.997762">
6.4 Variations in model configuration
</subsectionHeader>
<bodyText confidence="0.999285">
We have presented a compositional model of the
form d(ws) + cocomp(w,,, wo), where prototype
projections are performed on both w„ and wo and
ws is composed as is without projection. In general,
we have the freedom to choose what to project
and what not to project under this co-compositional
framework. Here in Table 5 we show the results of
</bodyText>
<figureCaption confidence="0.99714225">
Figure 5: The relation between the number of prototype
words and correlation of SDS or NLM. In general, NLM
has higher correlation than SDS and is more robust across
the m.
</figureCaption>
<table confidence="0.999616">
Subj Verb Obj NLM p SDS p
prpj prpj prpj 0.39 0.37
+ prpj prpj 0.44 0.41
prpj prpj 0.45 0.41
+ prpj + 0.43 0.38
prpj + 0.43 0.38
+ + + 0.31 0.31
</table>
<tableCaption confidence="0.802213833333333">
Table 5: Variants of the full co-compositional model,
based on how subject, verb, and object vector repre-
sentations are included. prpj indicates that prototype
projection is used. + indicates that the vector is added
without projection first. Blank indicates that the vector is
not used in the final compositional score.
</tableCaption>
<bodyText confidence="0.999499142857143">
these variants, using f =Addition and SDS/NLM
representations without re-training. We note that
our positive results mainly come from the verb
projections. Subject information actually does not
help. We believe this best configuration is task-
dependent; in this test collection, the subjects appear
to have little contribution to the landmark verb.
</bodyText>
<sectionHeader confidence="0.999932" genericHeader="evaluation">
7 Related work
</sectionHeader>
<bodyText confidence="0.9996554">
In recent years, several sophisticated vector space
models have been proposed for computing compo-
sitional semantics. Mitchell and Lapata (2010), Erk
(2012) and Baroni et al. (2013) are recommended
survey papers.
</bodyText>
<page confidence="0.99536">
137
</page>
<bodyText confidence="0.999808895833334">
One of the first approaches is the vector ad-
dition/multiplication idea of Mitchell and Lapata
(2008). The appeal of this kind of simple approach
is its intuitive geometric interpretation and its ro-
bustness to various datasets. However, it may not
be sufficiently expressive to represent the various
factors involved in compositional semantics, such
as syntax and context. To this end, Baroni and
Zamparelli (2010) present a compositional model
for adjectives and nouns. In their model, an adjective
is a matrix operator that modifies the noun vector
into an adjective-noun vector. Zanzotto et al. (2010)
and Guevara (2010) also proposed linear transfor-
mation models for composition and address the issue
of estimating large matrices with least squares or
regression techniques. Socher et al. (2012) extend
this linear transformation approach with the more
powerful model of Matrix-Vector Recursive Neural
Networks (MV-RNN). Each node in a parse tree is
assigned both a vector and a matrix. The vector
captures the actual meaning of the word itself, while
the matrix is modeled as a operator that modify the
meaning of neighboring words and phrases. This
model captures semantic change phenomenon like
not bad is similar to good due to a composition
of the bad vector with a meaning-flipping not ma-
trix. But this MV-RNN also need to optimize all
matrices of words from initial value (identity plus
a small amount of Gaussian noise) with supervised
dataset like movie reviews. Our prototype projection
model is similar to these models as a matrix-vector
operation, except that the matrix is not learned and
computed from prototype words. In future work,
we can imagine integrating the two models, using
these prototype projection matrices as initial values
for MV-RNN training (Socher et al., 2012).
Another approach is exemplified by Coecke et
al. (2010). In their mathematical framework u-
nifying categorical logic and vector space models,
the sentence vector is modeled as a function of the
Kronecker product of its word vectors. Grefenstette
and Sadrzadeh (2011) implement this based on un-
supervised learning of matrices for relational words
and apply them to the vectors of their arguments.
Their idea is that words with relational types, such as
verbs, adjectives, and adverbs are matrices that act
as a filter on their arguments. They also developed
a new semantic similarity task based on transitive
</bodyText>
<table confidence="0.998580222222222">
Composition Operator Parameter
Add: w1u + w2v w1, w2 E R
Multiply: uw1 O vw2 w1, w2 E R
FullAdd: W1u + W2v W1, W2 E Rnxn
LexFunc: Auv Au E Rnxn
FullLex: u([W1Auv,W2Avu]) Au,Av E Rnxn
W1, W2 E Rnxn
Ours (Add): P(R,v)u + P(R,u)v SVD’s (m, k)
Ours (Mult): P(R,v)u O P(R,u)v SVD’s (m, k)
</table>
<tableCaption confidence="0.6523922">
Table 6: Comparison of composition operators that com-
bine two word vector representations, u, v E Rn and
their learning parameters. Our model only needs two
hyper-parameters: the number of prototype words m and
dimensional reduction k in SVD
</tableCaption>
<bodyText confidence="0.99995203030303">
verbs, which is the dataset we used here. The pre-
vious state-of-the-art result for this task comes from
the model of Van de Cruys et al. (2013). They model
compositionality as a multi-way interaction between
latent factors, which are automatically constructed
from corpus data via matrix factorization.
Comprehensive evaluation of various existing
models are reported in (Blacoe and Lapata, 2012; D-
inu et al., 2013). Blacoe and Lapata (2012) highlight
the importance of jointly examining word represen-
tations and compositionality operators. However,
two out of three composition methods they evaluate
are parameter-free, so that they can side-step the
issue of parameter estimation. Dinu et al. (2013) de-
scribe the relation between word vector and compo-
sitionality in more detail with free parameters. Table
6 summarizes some ways to compose the meaning
of two word vectors (u, v), following (Dinu et al.,
2013). These range from simple operators (e.g. Add
and Multiply) to expressive models with many free
parameters (e.g. LexFunc, FullLex). Many of these
models need to optimize n x n parameters, which
may be large. On the other hand, our model only
needs two hyper-parameters: the number of proto-
type words m and dimensional reduction k in SVD
(Table 6). Furthermore, our model performance with
neural language model word embeddings is robust to
variations in m.
Most closely related to our work is the work by
Erk and Pad´o (2008; 2009) and Thater et al. (2010;
2011), which falls under the research theme of
computing word meaning in context. Both methods
are characterized by the use of selectional prefer-
</bodyText>
<page confidence="0.995362">
138
</page>
<bodyText confidence="0.999757">
ence information for subjects, verbs, and objects in
context; our prototype word vectors are essentially
equivalent to this idea. The main difference is in
how we modify the target word representation v
using this information: whereas we project v onto
a latent subspace formed by collection of prototype
vectors, Erk and Pad´o (2008; 2009) and Thater
et al. (2010; 2011) use the prototype vectors to
directly modify the elements of v, i.e. by element-
wise product with the centroid prototype vector.
Intuitively, both our method and theirs essentially
delete part of a word vector representation to adapt
the meaning in context. We believe the projection
is more robust to the underlying word representation
(and this is shown in the results for SDS vs. NLM
representations), but we note that we may be able
to borrow some of more sophisticated ways to find
prototype vectors from Erk and Pad´o (2008; 2009)
and Thater et al. (2010; 2011).
</bodyText>
<sectionHeader confidence="0.993806" genericHeader="conclusions">
8 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.999047095238095">
We began this work by asking how it is possible to
handle polysemy issues in compositional semantics,
especially when adopting distributional semantics
methods that construct only one representation per
word type. After all, the different senses of the
same word are all conflated into a single vector
representation. We found our inspiration in Gen-
erative Lexicon Theory (Pustejovsky, 1995), where
ambiguity is resolved due to co-compositionality of
the words in the sentence, i.e., the meaning of an
ambiguous verb is generated by the properties the
object it takes, and vice versa. We implement this
idea in a novel neural network model using proto-
type projections. The advantages of this model is
that it is robust to the underlying word representation
used and that it enables an effective joint learning
of word representations. The model achieves the
current state-of-the-art performance (p = 0.47)
on the semantic similarity task of transitive verbs
(Grefenstette and Sadrzadeh, 2011).
Directions for future research include:
</bodyText>
<listItem confidence="0.99870625">
• Experiments on other semantics tasks, such
as paraphrase detection, word sense induction,
and word meaning in context.
• Extension to more holistic sentence-level com-
</listItem>
<bodyText confidence="0.9964495">
position using a matrix-vector recursive frame-
work like (Socher et al., 2012).
</bodyText>
<listItem confidence="0.720607">
• Explore further the potential synergy between
Distributional Semantics and the Generative
Lexicon.
</listItem>
<sectionHeader confidence="0.997714" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999929">
This work was partially supported by JSPS KAK-
ENHI Grant Number 24800041, JSPS KAKENHI
2430057 and Microsoft Research CORE Project.
We would like to thank Hiroyuki Shindo and anony-
mous reviewers for their helpful comments.
</bodyText>
<sectionHeader confidence="0.999406" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999577388888889">
Marco Baroni and Roberto Zamparelli. 2010. Nouns
are vectors, adjectives are matrices: Representing
adjective-noun constructions in semantic space. In
Proceedings of the Conference on Empirical Methods
in Natural Language Processing (EMNLP).
Marco Baroni, Silvia Bernardini, Adriano Ferraresi, and
Eros Zanchetta. 2009. The wacky wide web: A
collection of very large linguistically processed web-
crawled corpora. Language resources and evaluation,
43(3):209–226.
Marco Baroni, Raffaella Bernardi, and Roberto Zampar-
elli. 2013. Frege in space: A program for compo-
sitional distributional semantics. Linguistic Issues in
Language Technologies.
Yoshua Bengio, R´ejean Ducharme, Pascal Vincent, and
Christian Janvin. 2003. A neural probabilistic lan-
guage model. Journal of Machine Learning Research,
3:1137–1155.
William Blacoe and Mirella Lapata. 2012. A comparison
of vector-based representations for semantic composi-
tion. In Proceedings of the Joint Conference on Em-
pirical Methods in Natural Language Processing and
Computational Natural Language Learning (EMNLP-
CoNLL).
Bob Coecke, Mehrnoosh Sadrzadeh, and Stephen Clark.
2010. Mathematical foundations for a composi-
tional distributional model of meaning. CoRR, ab-
s/1003.4394.
Ronan Collobert and Jason Weston. 2008. A unified
architecture for natural language processing: Deep
neural networks with multitask learning. In Pro-
ceedings of the International Conference on Machine
Learning (ICML).
Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011.
Natural language processing (almost) from scratch.
</reference>
<page confidence="0.987164">
139
</page>
<reference confidence="0.999513929292929">
Journal of Machine Learning Research, 12:2493–
2537.
Georgiana Dinu, Nghia The Pham, and Marco Barori.
2013. General estimation and evaluation of composi-
tional distributional semantic models. In Proceedings
of the Workshop on Continuous Vector Space Models
and their Compositionality.
Katrin Erk and Sebastian Pad´o. 2008. A structured
vector space model for word meaning in context. In
Proceedings of the Conference on Empirical Methods
in Natural Language Processing (EMNLP).
Katrin Erk and Sebastian Pad´o. 2009. Paraphrase assess-
ment in structured vector space: Exploring parameters
and datasets. In Proceedings of the Workshop on
Geometrical Models of Natural Language Semantics.
Katrin Erk. 2012. Vector space models of word meaning
and phrase meaning: A survey. Language and Lin-
guistics Compass, 6(10):635–653.
G Frege. 1892. ¨Uber sinn und bedeutung. In Zeitschfrift
f¨ur Philosophie und philosophische Kritik, 100.
Edward Grefenstette and Mehrnoosh Sadrzadeh. 2011.
Experimental support for a categorical compositional
distributional model of meaning. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing (EMNLP).
Emiliano Guevara. 2010. A regression model of
adjective-noun compositionality in distributional se-
mantics. In Proceedings of the Workshop on GEomet-
rical Models of Natural Language Semantics.
Eric Huang, Richard Socher, Christopher Manning, and
Andrew Ng. 2012. Improving word representations
via global context and multiple word prototypes. In
Proceedings of the Annual Meeting of the Association
for Computational Linguistics (ACL).
Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.
2013. Linguistic regularities in continuous space word
representations. In Human Language Technologies:
The Conference of the North American Chapter of the
Association for Computational Linguistics (NAACL-
HLT).
Jeff Mitchell and Mirella Lapata. 2008. Vector-based
models of semantic composition. In Proceedings of
the Annual Meeting of the Association for Computa-
tional Linguistics (ACL).
Jeff Mitchell and Mirella Lapata. 2010. Composition in
distributional models of semantics. Cognitive Science,
34(8):1388–1439.
Joakim Nivre, Johan Hall, and Jens Nilsson. 2006.
Maltparser: A data-driven parser-generator for depen-
dency parsing. In Proceedings of the International
Conference on Language Resources and Evaluation
(LREC).
James Pustejovsky. 1995. The Generative Lexicon. MIT
Press, Cambridge, MA.
Joseph Reisinger and Raymond J Mooney. 2010. Multi-
prototype vector-space models of word meaning. In
Human Language Technologies: The Conference of
the North American Chapter of the Association for
Computational Linguistics (NAACL-HLT).
Noah A. Smith and Jason Eisner. 2005. Contrastive
estimation: Training log-linear models on unlabeled
data. In Proceedings of the Annual Meeting of the
Association for Computational Linguistics (ACL).
Richard Socher, Brody Huval, Christopher D. Manning,
and Andrew Y. Ng. 2012. Semantic compositionality
through recursive matrix-vector spaces. In Proceed-
ings of the Joint Conference on Empirical Methods
in Natural Language Processing and Computational
Natural Language Learning (EMNLP-CoNLL).
Stefan Thater, Hagen F¨urstenau, and Manfred Pinkal.
2010. Contextualizing semantic representations using
syntactically enriched vector models. In Proceedings
of the Annual Meeting of the Association for Compu-
tational Linguistics (ACL).
Stefan Thater, Hagen F¨urstenau, and Manfred Pinkal.
2011. Word meaning in context: A simple and
effective vector model. In Asian Federation of Natural
Language Processing (IJCNLP).
Joseph Turian, Lev-Arie Ratinov, and Yoshua Bengio.
2010. Word representations: A simple and general
method for semi-supervised learning. In Proceedings
of the Annual Meeting of the Association for Compu-
tational Linguistics (ACL).
Peter D Turney and Patrick Pantel. 2010. From fre-
quency to meaning: Vector space models of semantics.
Journal of artificial intelligence research, 37(1):141–
188.
Tim Van de Cruys, Thierry Poibeau, and Anna Korhonen.
2013. A tensor-based factorization model of semantic
compositionality. In Human Language Technologies:
The Conference of the North American Chapter of the
Association for Computational Linguistics (NAACL-
HLT).
Fabio Massimo Zanzotto, Ioannis Korkontzelos,
Francesca Fallucchi, and Suresh Manandhar.
2010. Estimating linear models for compositional
distributional semantics. In Proceedings of
the International Conference on Computational
Linguistics (COLING).
</reference>
<page confidence="0.997382">
140
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.627137">
<title confidence="0.9990235">Modeling and Learning Semantic through Prototype Projections and Neural Networks</title>
<author confidence="0.988371">Masashi Tsubaki</author>
<author confidence="0.988371">Kevin Duh</author>
<author confidence="0.988371">Masashi Shimbo</author>
<author confidence="0.988371">Yuji</author>
<affiliation confidence="0.9996225">Graduate School of Information Nara Institute of Science and</affiliation>
<address confidence="0.913479">8916-5, Takayama, Ikoma, Nara 630-0192,</address>
<abstract confidence="0.99923080952381">We present a novel vector space model for semantic co-compositionality. Inspired by Generative Lexicon Theory (Pustejovsky, 1995), our goal is a compositional model where both predicate and argument are allowed to modify each others’ meaning representations while generating the overall semantics. This readily addresses some major challenges with current vector space models, notably the polysemy issue and the use of one represenper word type. We implement coprojections on predicates/arguments and show that this is effective in adapting their word representations. We further cast the model as a neural network and propose an unsupervised algorithm to jointly train word representations with co-compositionality. The model achieves best result to date on the semantic similarity task of transitive verbs</abstract>
<note confidence="0.710787">(Grefenstette and Sadrzadeh, 2011).</note>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Marco Baroni</author>
<author>Roberto Zamparelli</author>
</authors>
<title>Nouns are vectors, adjectives are matrices: Representing adjective-noun constructions in semantic space.</title>
<date>2010</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP).</booktitle>
<contexts>
<context position="2279" citStr="Baroni and Zamparelli, 2010" startWordPosition="318" endWordPosition="322">are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role labeling (Turian et al., 2010; Collobert et al., 2011). Recently, modeling of semantic compositionality (Frege,1892) in vector space has emerged as another important line of research (Mitchell and Lapata, 2008; Mitchell and Lapata, 2010; Baroni and Zamparelli, 2010; Socher et al., 2012; Grefenstette and Sadrzadeh, 2011; Van de Cruys et al., 2013). The goal is to formulate how individual word representations ought to be combined to achieve phrasal or sentential semantics. The main questions for semantic compositionality that we are concerned with are: (1) how can polysemy be handled by a single vector representation per word type, learned by either a distributional or neural model, and (2) how does composition resolve runcompany companyrun Co-compositional vector of verb and object operate = Prototype Projection VERB OBJ X Ok ・・・ ・・・ ≈ firm bank start bu</context>
<context position="28712" citStr="Baroni and Zamparelli (2010)" startWordPosition="4626" endWordPosition="4629">n recent years, several sophisticated vector space models have been proposed for computing compositional semantics. Mitchell and Lapata (2010), Erk (2012) and Baroni et al. (2013) are recommended survey papers. 137 One of the first approaches is the vector addition/multiplication idea of Mitchell and Lapata (2008). The appeal of this kind of simple approach is its intuitive geometric interpretation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that modifies the noun vector into an adjective-noun vector. Zanzotto et al. (2010) and Guevara (2010) also proposed linear transformation models for composition and address the issue of estimating large matrices with least squares or regression techniques. Socher et al. (2012) extend this linear transformation approach with the more powerful model of Matrix-Vector Recursive Neural Networks (MV-RNN). Each node in a parse tree is assigned both a vector and a matrix. The vector captures the</context>
</contexts>
<marker>Baroni, Zamparelli, 2010</marker>
<rawString>Marco Baroni and Roberto Zamparelli. 2010. Nouns are vectors, adjectives are matrices: Representing adjective-noun constructions in semantic space. In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Baroni</author>
<author>Silvia Bernardini</author>
<author>Adriano Ferraresi</author>
<author>Eros Zanchetta</author>
</authors>
<title>The wacky wide web: A collection of very large linguistically processed webcrawled corpora. Language resources and evaluation,</title>
<date>2009</date>
<pages>43--3</pages>
<contexts>
<context position="21525" citStr="Baroni et al., 2009" startWordPosition="3439" endWordPosition="3442">ord representations, we experiment with sparse 2000-dim SDS and dense 50-dim NLM. These are provided by Blacoe and Lapata (2012)5 and trained on the British National Corpus (BNC). We are interested in knowing how sensitive each model is to the underlying word representation. In general, this is a challenging task: the upper-bound of p = 0.62 is the inter-annotator agreement. 5http://homepages.inf.ed.ac.uk/ s1066731/index.php?page=resources 135 5.3 Implementation details In terms of implementation detail, our model and our re-implementation of Erk and Pado’s model make use of the ukWaC corpus (Baroni et al., 2009).6 This corpus is a two billion word corpus automatically harvested from the web and parsed by the MaltParser (Nivre et al., 2006). We use ukWaC corpus to collect W (VerbOf, wo) and W (ObjOf, wv) for prototype projections. We also extract about 5000 verb-object pairs that relevant for testdata from this corpus to train our neural network learning algorithm. In our co-compositional model, the contribution ratio of SVD is set to 80% (i.e. automatically fixing k in SVD to include 80% of the top singular values). We set the number of prototype vectors to be m = 20, where W(VerbOf,wo) is filtered w</context>
</contexts>
<marker>Baroni, Bernardini, Ferraresi, Zanchetta, 2009</marker>
<rawString>Marco Baroni, Silvia Bernardini, Adriano Ferraresi, and Eros Zanchetta. 2009. The wacky wide web: A collection of very large linguistically processed webcrawled corpora. Language resources and evaluation, 43(3):209–226.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marco Baroni</author>
<author>Raffaella Bernardi</author>
<author>Roberto Zamparelli</author>
</authors>
<title>Frege in space: A program for compositional distributional semantics. Linguistic Issues in Language Technologies.</title>
<date>2013</date>
<contexts>
<context position="28263" citStr="Baroni et al. (2013)" startWordPosition="4557" endWordPosition="4560">lank indicates that the vector is not used in the final compositional score. these variants, using f =Addition and SDS/NLM representations without re-training. We note that our positive results mainly come from the verb projections. Subject information actually does not help. We believe this best configuration is taskdependent; in this test collection, the subjects appear to have little contribution to the landmark verb. 7 Related work In recent years, several sophisticated vector space models have been proposed for computing compositional semantics. Mitchell and Lapata (2010), Erk (2012) and Baroni et al. (2013) are recommended survey papers. 137 One of the first approaches is the vector addition/multiplication idea of Mitchell and Lapata (2008). The appeal of this kind of simple approach is its intuitive geometric interpretation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that modifies the noun vector into an adject</context>
</contexts>
<marker>Baroni, Bernardi, Zamparelli, 2013</marker>
<rawString>Marco Baroni, Raffaella Bernardi, and Roberto Zamparelli. 2013. Frege in space: A program for compositional distributional semantics. Linguistic Issues in Language Technologies.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yoshua Bengio</author>
<author>R´ejean Ducharme</author>
<author>Pascal Vincent</author>
<author>Christian Janvin</author>
</authors>
<title>A neural probabilistic language model.</title>
<date>2003</date>
<journal>Journal of Machine Learning Research,</journal>
<pages>3--1137</pages>
<contexts>
<context position="7925" citStr="Bengio et al., 2003" startWordPosition="1200" endWordPosition="1203">These components vi(t) were set to the ratio of the probability of the context word given the 131 target word to the probability of the context word overall: __ Wi|t) freqcZ,t x freqtotal (1) vi(t) Aci) freqt x freqcZ where freqcZ,t, freqtotal, freqt and freqcZ are the frequencies of the context word ci with the target word t, the total count of all word tokens, the frequency of the target word t, and the frequency of the context word ci, respectively. 2.2 Neural Language Model (NLM) word embeddings Another popular way to learn word representations is based on the Neural Language Model (NLM) (Bengio et al., 2003). In comparison with SDS, NLM tend to be low-dimensional (e.g. 50 dimensions) but employ dense features. These dense feature vectors are usually called word embeddings, and it has been shown that such vectors can capture interesting linear relationships, such as king − man + woman Pt� queen (Mikolov et al., 2013). In this work, we adopt the model by Collobert and Weston (2008). The idea is to construct a neural network based on word sequences, where one outputs high scores for n-grams that occur in a large unlabeled corpus and low scores for nonsense n-grams where one word is replaced by a ran</context>
</contexts>
<marker>Bengio, Ducharme, Vincent, Janvin, 2003</marker>
<rawString>Yoshua Bengio, R´ejean Ducharme, Pascal Vincent, and Christian Janvin. 2003. A neural probabilistic language model. Journal of Machine Learning Research, 3:1137–1155.</rawString>
</citation>
<citation valid="true">
<authors>
<author>William Blacoe</author>
<author>Mirella Lapata</author>
</authors>
<title>A comparison of vector-based representations for semantic composition.</title>
<date>2012</date>
<booktitle>In Proceedings of the Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLPCoNLL).</booktitle>
<contexts>
<context position="21033" citStr="Blacoe and Lapata (2012)" startWordPosition="3368" endWordPosition="3371"> subject and object vector, the outer product of the verb vector with itself, and then the element-wise product of both results. 3. Erk and Pad´o’s (2008) model, which adapts the word vectors based on context and is the most similar in terms of motivation to ours. 4. Van de Cruy et al. (2013) multi-way interaction model based on matrix factorization. This achieves the best result for this task to date. A detailed explanation of these models will be provided in Section 7. For the underlying word representations, we experiment with sparse 2000-dim SDS and dense 50-dim NLM. These are provided by Blacoe and Lapata (2012)5 and trained on the British National Corpus (BNC). We are interested in knowing how sensitive each model is to the underlying word representation. In general, this is a challenging task: the upper-bound of p = 0.62 is the inter-annotator agreement. 5http://homepages.inf.ed.ac.uk/ s1066731/index.php?page=resources 135 5.3 Implementation details In terms of implementation detail, our model and our re-implementation of Erk and Pado’s model make use of the ukWaC corpus (Baroni et al., 2009).6 This corpus is a two billion word corpus automatically harvested from the web and parsed by the MaltParse</context>
<context position="31625" citStr="Blacoe and Lapata, 2012" startWordPosition="5100" endWordPosition="5103">rison of composition operators that combine two word vector representations, u, v E Rn and their learning parameters. Our model only needs two hyper-parameters: the number of prototype words m and dimensional reduction k in SVD verbs, which is the dataset we used here. The previous state-of-the-art result for this task comes from the model of Van de Cruys et al. (2013). They model compositionality as a multi-way interaction between latent factors, which are automatically constructed from corpus data via matrix factorization. Comprehensive evaluation of various existing models are reported in (Blacoe and Lapata, 2012; Dinu et al., 2013). Blacoe and Lapata (2012) highlight the importance of jointly examining word representations and compositionality operators. However, two out of three composition methods they evaluate are parameter-free, so that they can side-step the issue of parameter estimation. Dinu et al. (2013) describe the relation between word vector and compositionality in more detail with free parameters. Table 6 summarizes some ways to compose the meaning of two word vectors (u, v), following (Dinu et al., 2013). These range from simple operators (e.g. Add and Multiply) to expressive models wit</context>
</contexts>
<marker>Blacoe, Lapata, 2012</marker>
<rawString>William Blacoe and Mirella Lapata. 2012. A comparison of vector-based representations for semantic composition. In Proceedings of the Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLPCoNLL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bob Coecke</author>
<author>Mehrnoosh Sadrzadeh</author>
<author>Stephen Clark</author>
</authors>
<title>Mathematical foundations for a compositional distributional model of meaning.</title>
<date>2010</date>
<journal>CoRR,</journal>
<pages>1003--4394</pages>
<contexts>
<context position="20363" citStr="Coecke et al., 2010" startWordPosition="3254" endWordPosition="3257">r spell 2 Table 2: Examples from the disambiguation task developed by Grefenstette and Sadrzadeh (2011). Human judges give scores between 1 to 7, with higher scores implying higher semantic similarity. Verb meet with subject system and object criterion is judged similar to the landmark verb satisfy but not visit. 5.2 Baselines We compare our model against multiple baselines for semantic compositionality: 1. Mitchell and Lapata’s (2008) additive and element-wise multiplicative model as simplest baselines. 2. Grefenstette and Sadrzadeh’s (2011) model based on the abstract categorical framework (Coecke et al., 2010). This model computes the outer product of the subject and object vector, the outer product of the verb vector with itself, and then the element-wise product of both results. 3. Erk and Pad´o’s (2008) model, which adapts the word vectors based on context and is the most similar in terms of motivation to ours. 4. Van de Cruy et al. (2013) multi-way interaction model based on matrix factorization. This achieves the best result for this task to date. A detailed explanation of these models will be provided in Section 7. For the underlying word representations, we experiment with sparse 2000-dim SD</context>
<context position="30152" citStr="Coecke et al. (2010)" startWordPosition="4856" endWordPosition="4859">o a composition of the bad vector with a meaning-flipping not matrix. But this MV-RNN also need to optimize all matrices of words from initial value (identity plus a small amount of Gaussian noise) with supervised dataset like movie reviews. Our prototype projection model is similar to these models as a matrix-vector operation, except that the matrix is not learned and computed from prototype words. In future work, we can imagine integrating the two models, using these prototype projection matrices as initial values for MV-RNN training (Socher et al., 2012). Another approach is exemplified by Coecke et al. (2010). In their mathematical framework unifying categorical logic and vector space models, the sentence vector is modeled as a function of the Kronecker product of its word vectors. Grefenstette and Sadrzadeh (2011) implement this based on unsupervised learning of matrices for relational words and apply them to the vectors of their arguments. Their idea is that words with relational types, such as verbs, adjectives, and adverbs are matrices that act as a filter on their arguments. They also developed a new semantic similarity task based on transitive Composition Operator Parameter Add: w1u + w2v w1</context>
</contexts>
<marker>Coecke, Sadrzadeh, Clark, 2010</marker>
<rawString>Bob Coecke, Mehrnoosh Sadrzadeh, and Stephen Clark. 2010. Mathematical foundations for a compositional distributional model of meaning. CoRR, abs/1003.4394.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronan Collobert</author>
<author>Jason Weston</author>
</authors>
<title>A unified architecture for natural language processing: Deep neural networks with multitask learning.</title>
<date>2008</date>
<booktitle>In Proceedings of the International Conference on Machine Learning (ICML).</booktitle>
<contexts>
<context position="1623" citStr="Collobert and Weston, 2008" startWordPosition="222" endWordPosition="225">and propose an unsupervised algorithm to jointly train word representations with co-compositionality. The model achieves the best result to date (p = 0.47) on the semantic similarity task of transitive verbs (Grefenstette and Sadrzadeh, 2011). 1 Introduction Vector space models of words have been very successful in capturing the semantic and syntactic characteristics of individual lexical items (Turney and Pantel, 2010). Much research has addressed the question of how to construct individual word representations, for example distributional models (Mitchell and Lapata, 2010) and neural models (Collobert and Weston, 2008). These word representations are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role labeling (Turian et al., 2010; Collobert et al., 2011). Recently, modeling of semantic compositionality (Frege,1892) in vector space has emerged as another important line of research (Mitchell and Lapata, 2008</context>
<context position="8304" citStr="Collobert and Weston (2008)" startWordPosition="1265" endWordPosition="1268">quency of the target word t, and the frequency of the context word ci, respectively. 2.2 Neural Language Model (NLM) word embeddings Another popular way to learn word representations is based on the Neural Language Model (NLM) (Bengio et al., 2003). In comparison with SDS, NLM tend to be low-dimensional (e.g. 50 dimensions) but employ dense features. These dense feature vectors are usually called word embeddings, and it has been shown that such vectors can capture interesting linear relationships, such as king − man + woman Pt� queen (Mikolov et al., 2013). In this work, we adopt the model by Collobert and Weston (2008). The idea is to construct a neural network based on word sequences, where one outputs high scores for n-grams that occur in a large unlabeled corpus and low scores for nonsense n-grams where one word is replaced by a random word. This word representation with NLM has been used to good effect, for example in (Turian et al., 2010; Collobert et al., 2011; Huang et al., 2012) where induced word representations are used with sophisticated features to improve performance in various NLP tasks. Specifically, we first represent the word sequence as a vector x = [d(w1); d(w2); ... ; d(wm)], where wi is</context>
<context position="13375" citStr="Collobert and Weston (2008)" startWordPosition="2117" endWordPosition="2120">d vectors. Intuitively, EkVTk represents the latent subspace formed by prototypical words W (R, w0) = {w1, w2, · · · ,wm}. We call this matrix the prototype space of word w0 with respect to relation R. Note that the matrix of orthogonal projection onto this prototype space is given by P(R,w0) = (EkVTk)T(EkVTk). Hence, when we observe a relation R(w0, w), the projected representation of word w in this context is computed by prpj(R,w0)(w) defined as follows: prpj(R,w0)(w) = P(R,w0)d(w). (6) Table 1 shows several examples of how meanings change after prototype projection using word embeddings of Collobert and Weston (2008).2 3.2 Co-Compositionality In order to model co-compositionality, we apply prototype projection to both the verb and the object. In particular, suppose verb is wv and object is wo, C(VerbOf,wo) is used to project wv and C(ObjOf,w„) is used to project wo. The vector that represents the overall meaning of verb-object with prototype projection is computed by: cocomp(wv, wo) = f(prpj(VerbOf,wo)(wv),prpj(ObjOf,w„)(wo)) (7) Function f can be a compositional computation like simple addition or element-wise multiplication of two vectors. This is graphically shown in Figure 1. 4 Unsupervised Learning o</context>
<context position="16428" citStr="Collobert and Weston, 2008" startWordPosition="2592" endWordPosition="2595">e learning, our model has no complex parameters for modeling composition. Composition is modeled using straightforward vector addition/multiplications; instead, what is learned is the word representation. Figure 3 shows the C-NLM. The learning algorithm is unsupervised, and works by artificially 3There are works on multiple representations, e.g., (Reisinger and Mooney, 2010); we focus on single representation here. Figure 4: Co-Compositional Neural Language Model (CoC-NLM) is C-NLM with prototype projection. generating negative examples in a fashion analogous to the NLM learning algorithm of (Collobert and Weston, 2008) and contrastive estimation (Smith and Eisner, 2005). First, given some initial word representations and raw sentences, we compute the compositional vector with function f (in this section, we will assume that we will be using the addition operator). Second, in order to obtain the score of compositional vector, we compute the dot product with vector s C ][Rn (n is the dimension of the word vector space): verb vector v = d(wv) and object vector o = d(wo). score(v, o) = s&apos;f(v, o) = s&apos;(v + o) (8) We also create a corrupted pair by substituting a random verb wverb′. The cost function J = max(0,1− </context>
</contexts>
<marker>Collobert, Weston, 2008</marker>
<rawString>Ronan Collobert and Jason Weston. 2008. A unified architecture for natural language processing: Deep neural networks with multitask learning. In Proceedings of the International Conference on Machine Learning (ICML).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ronan Collobert</author>
<author>Jason Weston</author>
<author>L´eon Bottou</author>
<author>Michael Karlen</author>
<author>Koray Kavukcuoglu</author>
<author>Pavel Kuksa</author>
</authors>
<title>Natural language processing (almost) from scratch.</title>
<date>2011</date>
<journal>Journal of Machine Learning Research,</journal>
<volume>12</volume>
<pages>2537</pages>
<contexts>
<context position="2068" citStr="Collobert et al., 2011" startWordPosition="289" endWordPosition="292">sed the question of how to construct individual word representations, for example distributional models (Mitchell and Lapata, 2010) and neural models (Collobert and Weston, 2008). These word representations are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role labeling (Turian et al., 2010; Collobert et al., 2011). Recently, modeling of semantic compositionality (Frege,1892) in vector space has emerged as another important line of research (Mitchell and Lapata, 2008; Mitchell and Lapata, 2010; Baroni and Zamparelli, 2010; Socher et al., 2012; Grefenstette and Sadrzadeh, 2011; Van de Cruys et al., 2013). The goal is to formulate how individual word representations ought to be combined to achieve phrasal or sentential semantics. The main questions for semantic compositionality that we are concerned with are: (1) how can polysemy be handled by a single vector representation per word type, learned by eithe</context>
<context position="8658" citStr="Collobert et al., 2011" startWordPosition="1328" endWordPosition="1331">dense feature vectors are usually called word embeddings, and it has been shown that such vectors can capture interesting linear relationships, such as king − man + woman Pt� queen (Mikolov et al., 2013). In this work, we adopt the model by Collobert and Weston (2008). The idea is to construct a neural network based on word sequences, where one outputs high scores for n-grams that occur in a large unlabeled corpus and low scores for nonsense n-grams where one word is replaced by a random word. This word representation with NLM has been used to good effect, for example in (Turian et al., 2010; Collobert et al., 2011; Huang et al., 2012) where induced word representations are used with sophisticated features to improve performance in various NLP tasks. Specifically, we first represent the word sequence as a vector x = [d(w1); d(w2); ... ; d(wm)], where wi is ith word in the sequence, m is the window size, d(w) is the vector representation of word w (an n-dimensional column vector) and [d(w1); d(w2); ... ; d(wm)] is the concatenation of word vectors as an input of neural network. Second, we compute the score of the sequence, score(x) = sT(tanh(Wx + b)) (2) where W C Rhx(mn) and s C Rh are the first and sec</context>
</contexts>
<marker>Collobert, Weston, Bottou, Karlen, Kavukcuoglu, Kuksa, 2011</marker>
<rawString>Ronan Collobert, Jason Weston, L´eon Bottou, Michael Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011. Natural language processing (almost) from scratch. Journal of Machine Learning Research, 12:2493– 2537.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Georgiana Dinu</author>
<author>Nghia The Pham</author>
<author>Marco Barori</author>
</authors>
<title>General estimation and evaluation of compositional distributional semantic models.</title>
<date>2013</date>
<booktitle>In Proceedings of the Workshop on Continuous Vector Space Models and their Compositionality.</booktitle>
<contexts>
<context position="31645" citStr="Dinu et al., 2013" startWordPosition="5104" endWordPosition="5108">ators that combine two word vector representations, u, v E Rn and their learning parameters. Our model only needs two hyper-parameters: the number of prototype words m and dimensional reduction k in SVD verbs, which is the dataset we used here. The previous state-of-the-art result for this task comes from the model of Van de Cruys et al. (2013). They model compositionality as a multi-way interaction between latent factors, which are automatically constructed from corpus data via matrix factorization. Comprehensive evaluation of various existing models are reported in (Blacoe and Lapata, 2012; Dinu et al., 2013). Blacoe and Lapata (2012) highlight the importance of jointly examining word representations and compositionality operators. However, two out of three composition methods they evaluate are parameter-free, so that they can side-step the issue of parameter estimation. Dinu et al. (2013) describe the relation between word vector and compositionality in more detail with free parameters. Table 6 summarizes some ways to compose the meaning of two word vectors (u, v), following (Dinu et al., 2013). These range from simple operators (e.g. Add and Multiply) to expressive models with many free paramete</context>
</contexts>
<marker>Dinu, Pham, Barori, 2013</marker>
<rawString>Georgiana Dinu, Nghia The Pham, and Marco Barori. 2013. General estimation and evaluation of compositional distributional semantic models. In Proceedings of the Workshop on Continuous Vector Space Models and their Compositionality.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katrin Erk</author>
<author>Sebastian Pad´o</author>
</authors>
<title>A structured vector space model for word meaning in context.</title>
<date>2008</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP).</booktitle>
<marker>Erk, Pad´o, 2008</marker>
<rawString>Katrin Erk and Sebastian Pad´o. 2008. A structured vector space model for word meaning in context. In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katrin Erk</author>
<author>Sebastian Pad´o</author>
</authors>
<title>Paraphrase assessment in structured vector space: Exploring parameters and datasets.</title>
<date>2009</date>
<booktitle>In Proceedings of the Workshop on Geometrical Models of Natural Language Semantics.</booktitle>
<marker>Erk, Pad´o, 2009</marker>
<rawString>Katrin Erk and Sebastian Pad´o. 2009. Paraphrase assessment in structured vector space: Exploring parameters and datasets. In Proceedings of the Workshop on Geometrical Models of Natural Language Semantics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Katrin Erk</author>
</authors>
<title>Vector space models of word meaning and phrase meaning: A survey.</title>
<date>2012</date>
<journal>Language and Linguistics Compass,</journal>
<volume>6</volume>
<issue>10</issue>
<contexts>
<context position="28238" citStr="Erk (2012)" startWordPosition="4554" endWordPosition="4555">ection first. Blank indicates that the vector is not used in the final compositional score. these variants, using f =Addition and SDS/NLM representations without re-training. We note that our positive results mainly come from the verb projections. Subject information actually does not help. We believe this best configuration is taskdependent; in this test collection, the subjects appear to have little contribution to the landmark verb. 7 Related work In recent years, several sophisticated vector space models have been proposed for computing compositional semantics. Mitchell and Lapata (2010), Erk (2012) and Baroni et al. (2013) are recommended survey papers. 137 One of the first approaches is the vector addition/multiplication idea of Mitchell and Lapata (2008). The appeal of this kind of simple approach is its intuitive geometric interpretation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that modifies the n</context>
</contexts>
<marker>Erk, 2012</marker>
<rawString>Katrin Erk. 2012. Vector space models of word meaning and phrase meaning: A survey. Language and Linguistics Compass, 6(10):635–653.</rawString>
</citation>
<citation valid="false">
<title>Uber sinn und bedeutung.</title>
<booktitle>In Zeitschfrift f¨ur Philosophie und philosophische Kritik,</booktitle>
<pages>100</pages>
<marker></marker>
<rawString>G Frege. 1892. ¨Uber sinn und bedeutung. In Zeitschfrift f¨ur Philosophie und philosophische Kritik, 100.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Edward Grefenstette</author>
<author>Mehrnoosh Sadrzadeh</author>
</authors>
<title>Experimental support for a categorical compositional distributional model of meaning.</title>
<date>2011</date>
<booktitle>In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP).</booktitle>
<contexts>
<context position="1238" citStr="Grefenstette and Sadrzadeh, 2011" startWordPosition="168" endWordPosition="171">generating the overall semantics. This readily addresses some major challenges with current vector space models, notably the polysemy issue and the use of one representation per word type. We implement cocompositionality using prototype projections on predicates/arguments and show that this is effective in adapting their word representations. We further cast the model as a neural network and propose an unsupervised algorithm to jointly train word representations with co-compositionality. The model achieves the best result to date (p = 0.47) on the semantic similarity task of transitive verbs (Grefenstette and Sadrzadeh, 2011). 1 Introduction Vector space models of words have been very successful in capturing the semantic and syntactic characteristics of individual lexical items (Turney and Pantel, 2010). Much research has addressed the question of how to construct individual word representations, for example distributional models (Mitchell and Lapata, 2010) and neural models (Collobert and Weston, 2008). These word representations are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projection</context>
<context position="4762" citStr="Grefenstette and Sadrzadeh (2011)" startWordPosition="705" endWordPosition="708">tion by projecting it into a latent space that is prototypical of its argument. This projection is performed analogously for each argument as well, and the final meaning is computed by composition of these transformed vectors (Figure 1). In addition, the model is cast as a neural network where word representations could be re-trained or fine-tuned.&apos; Our contributions are two-fold: 1. We propose a novel model for semantic cocompositionality. This model, based on prototype projections, is easy to implement and achieves state-of-the-art performance in the sentence similarity dataset developed by Grefenstette and Sadrzadeh (2011). 2. Our results empirically confirm that existing word representations (eg., SDS and NLM in Section 2) are sufficiently effective at capturing &apos;While we are inspired by co-compositionality, it is important to note that our model does not implement qualia structure and other important components of Generative Lexicon Theory. We operate within the vector space model of distributional semantics, so these ideas are implemented with matrix algebra, which is a natural fit with neural networks. polysemy, as long as we have the proper mechanism to tease out the proper sense during composition. We fur</context>
<context position="18626" citStr="Grefenstette and Sadrzadeh (2011)" startWordPosition="2988" endWordPosition="2991">are 0 = (s, z, v). The optimization algorithm of CoC-NLM is divided into three steps like C-NLM. First, we optimize s and z. Second, the projected verb vector is updated as xnew = znew − y. Finally we optimize v to minimize the Euclidean distance between xnew and Pobjv, where A is a regularization hyper-parameter: J(v) = 2||xnew − Pobjv||2 + A 12 vTv (10) 5 Evaluation 5.1 Dataset In order to evaluate the performance of our new co-compositional model with prototype projection and word representation learning algorithm, we make use of the disambiguation task of transitive sentences developed by Grefenstette and Sadrzadeh (2011). This is an extension of the two words phrase similarity task defined in Mitchell and Lapata (2008), and constructed according to similar guidelines. The dataset consists of similarity judgments between a landmark verb and a triple consisting of a transitive target verb, subject and object extracted from the BNC corpus. Human judges give scores between 1 to 7, with higher scores implying higher semantic similarity. For example, Table 2 shows some examples from the data: we see that the verb meet with subject system and object criterion is judged similar to the landmark verb satisfy but not vi</context>
<context position="23296" citStr="Grefenstette and Sadrzadeh (2011)" startWordPosition="3735" endWordPosition="3738">M as word representation and f=Addition as operator) achieves p = 0.44, outperforming it by a large margin. To the best of our knowledge, this is now state-of-the-art result for this task. 2. Our model is not very sensitive to the underlying word representation. With f=Addition, we have p = 0.41 for SDS vs p = 0.44 for NLM. With f=Multiply, we have p = 0.37 for SDS vs. p = 0.35 for NLM. This implies that the prototype projection is robust to the underlying word representation, which is a desired characteristic of compositional models. 6http://wacky.sslmit.unibo.it/ doku.php?id=corpora Model p Grefenstette and Sadrzadeh (2011) 0.21 Add (SDS) 0.31 Add (NLM) 0.31 Multiply (SDS) 0.35 Multiply (NLM) 0.30 Van de Cruys et al. (2013) 0.37 Erk and Pad´o (SDS) 0.39 Erk and Pad´o (NLM) 0.03 Co-Comp with f=Add (SDS) 0.41 Co-Comp with f=Add (NLM) 0.44 Co-Comp with f=Multiply (SDS) 0.37 Co-Comp with f=Multiply (NLM) 0.35 Upper bound 0.62 Table 3: Results of the different compositionality models on the similarity task. The number of prototype words m = 20 in all our models. Our model (f=Addition and NLM) achieves the new state-of-the-art performance for this task (p = 0.44). 3. The contextual model of Erk and Pad´o (SDS) also pe</context>
<context position="30362" citStr="Grefenstette and Sadrzadeh (2011)" startWordPosition="4888" endWordPosition="4891"> with supervised dataset like movie reviews. Our prototype projection model is similar to these models as a matrix-vector operation, except that the matrix is not learned and computed from prototype words. In future work, we can imagine integrating the two models, using these prototype projection matrices as initial values for MV-RNN training (Socher et al., 2012). Another approach is exemplified by Coecke et al. (2010). In their mathematical framework unifying categorical logic and vector space models, the sentence vector is modeled as a function of the Kronecker product of its word vectors. Grefenstette and Sadrzadeh (2011) implement this based on unsupervised learning of matrices for relational words and apply them to the vectors of their arguments. Their idea is that words with relational types, such as verbs, adjectives, and adverbs are matrices that act as a filter on their arguments. They also developed a new semantic similarity task based on transitive Composition Operator Parameter Add: w1u + w2v w1, w2 E R Multiply: uw1 O vw2 w1, w2 E R FullAdd: W1u + W2v W1, W2 E Rnxn LexFunc: Auv Au E Rnxn FullLex: u([W1Auv,W2Avu]) Au,Av E Rnxn W1, W2 E Rnxn Ours (Add): P(R,v)u + P(R,u)v SVD’s (m, k) Ours (Mult): P(R,v</context>
<context position="34807" citStr="Grefenstette and Sadrzadeh, 2011" startWordPosition="5616" endWordPosition="5619">xicon Theory (Pustejovsky, 1995), where ambiguity is resolved due to co-compositionality of the words in the sentence, i.e., the meaning of an ambiguous verb is generated by the properties the object it takes, and vice versa. We implement this idea in a novel neural network model using prototype projections. The advantages of this model is that it is robust to the underlying word representation used and that it enables an effective joint learning of word representations. The model achieves the current state-of-the-art performance (p = 0.47) on the semantic similarity task of transitive verbs (Grefenstette and Sadrzadeh, 2011). Directions for future research include: • Experiments on other semantics tasks, such as paraphrase detection, word sense induction, and word meaning in context. • Extension to more holistic sentence-level composition using a matrix-vector recursive framework like (Socher et al., 2012). • Explore further the potential synergy between Distributional Semantics and the Generative Lexicon. Acknowledgments This work was partially supported by JSPS KAKENHI Grant Number 24800041, JSPS KAKENHI 2430057 and Microsoft Research CORE Project. We would like to thank Hiroyuki Shindo and anonymous reviewers </context>
</contexts>
<marker>Grefenstette, Sadrzadeh, 2011</marker>
<rawString>Edward Grefenstette and Mehrnoosh Sadrzadeh. 2011. Experimental support for a categorical compositional distributional model of meaning. In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Emiliano Guevara</author>
</authors>
<title>A regression model of adjective-noun compositionality in distributional semantics.</title>
<date>2010</date>
<booktitle>In Proceedings of the Workshop on GEometrical Models of Natural Language Semantics.</booktitle>
<contexts>
<context position="28921" citStr="Guevara (2010)" startWordPosition="4661" endWordPosition="4662">he first approaches is the vector addition/multiplication idea of Mitchell and Lapata (2008). The appeal of this kind of simple approach is its intuitive geometric interpretation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that modifies the noun vector into an adjective-noun vector. Zanzotto et al. (2010) and Guevara (2010) also proposed linear transformation models for composition and address the issue of estimating large matrices with least squares or regression techniques. Socher et al. (2012) extend this linear transformation approach with the more powerful model of Matrix-Vector Recursive Neural Networks (MV-RNN). Each node in a parse tree is assigned both a vector and a matrix. The vector captures the actual meaning of the word itself, while the matrix is modeled as a operator that modify the meaning of neighboring words and phrases. This model captures semantic change phenomenon like not bad is similar to</context>
</contexts>
<marker>Guevara, 2010</marker>
<rawString>Emiliano Guevara. 2010. A regression model of adjective-noun compositionality in distributional semantics. In Proceedings of the Workshop on GEometrical Models of Natural Language Semantics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eric Huang</author>
<author>Richard Socher</author>
<author>Christopher Manning</author>
<author>Andrew Ng</author>
</authors>
<title>Improving word representations via global context and multiple word prototypes.</title>
<date>2012</date>
<booktitle>In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</booktitle>
<contexts>
<context position="8679" citStr="Huang et al., 2012" startWordPosition="1332" endWordPosition="1335">e usually called word embeddings, and it has been shown that such vectors can capture interesting linear relationships, such as king − man + woman Pt� queen (Mikolov et al., 2013). In this work, we adopt the model by Collobert and Weston (2008). The idea is to construct a neural network based on word sequences, where one outputs high scores for n-grams that occur in a large unlabeled corpus and low scores for nonsense n-grams where one word is replaced by a random word. This word representation with NLM has been used to good effect, for example in (Turian et al., 2010; Collobert et al., 2011; Huang et al., 2012) where induced word representations are used with sophisticated features to improve performance in various NLP tasks. Specifically, we first represent the word sequence as a vector x = [d(w1); d(w2); ... ; d(wm)], where wi is ith word in the sequence, m is the window size, d(w) is the vector representation of word w (an n-dimensional column vector) and [d(w1); d(w2); ... ; d(wm)] is the concatenation of word vectors as an input of neural network. Second, we compute the score of the sequence, score(x) = sT(tanh(Wx + b)) (2) where W C Rhx(mn) and s C Rh are the first and second layer weights of </context>
</contexts>
<marker>Huang, Socher, Manning, Ng, 2012</marker>
<rawString>Eric Huang, Richard Socher, Christopher Manning, and Andrew Ng. 2012. Improving word representations via global context and multiple word prototypes. In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tomas Mikolov</author>
<author>Wen-tau Yih</author>
<author>Geoffrey Zweig</author>
</authors>
<title>Linguistic regularities in continuous space word representations.</title>
<date>2013</date>
<booktitle>In Human Language Technologies: The Conference of the North American Chapter of the Association for Computational Linguistics (NAACLHLT).</booktitle>
<contexts>
<context position="8239" citStr="Mikolov et al., 2013" startWordPosition="1253" endWordPosition="1256"> target word t, the total count of all word tokens, the frequency of the target word t, and the frequency of the context word ci, respectively. 2.2 Neural Language Model (NLM) word embeddings Another popular way to learn word representations is based on the Neural Language Model (NLM) (Bengio et al., 2003). In comparison with SDS, NLM tend to be low-dimensional (e.g. 50 dimensions) but employ dense features. These dense feature vectors are usually called word embeddings, and it has been shown that such vectors can capture interesting linear relationships, such as king − man + woman Pt� queen (Mikolov et al., 2013). In this work, we adopt the model by Collobert and Weston (2008). The idea is to construct a neural network based on word sequences, where one outputs high scores for n-grams that occur in a large unlabeled corpus and low scores for nonsense n-grams where one word is replaced by a random word. This word representation with NLM has been used to good effect, for example in (Turian et al., 2010; Collobert et al., 2011; Huang et al., 2012) where induced word representations are used with sophisticated features to improve performance in various NLP tasks. Specifically, we first represent the word </context>
</contexts>
<marker>Mikolov, Yih, Zweig, 2013</marker>
<rawString>Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig. 2013. Linguistic regularities in continuous space word representations. In Human Language Technologies: The Conference of the North American Chapter of the Association for Computational Linguistics (NAACLHLT).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeff Mitchell</author>
<author>Mirella Lapata</author>
</authors>
<title>Vector-based models of semantic composition.</title>
<date>2008</date>
<booktitle>In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</booktitle>
<contexts>
<context position="2223" citStr="Mitchell and Lapata, 2008" startWordPosition="310" endWordPosition="313">llobert and Weston, 2008). These word representations are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role labeling (Turian et al., 2010; Collobert et al., 2011). Recently, modeling of semantic compositionality (Frege,1892) in vector space has emerged as another important line of research (Mitchell and Lapata, 2008; Mitchell and Lapata, 2010; Baroni and Zamparelli, 2010; Socher et al., 2012; Grefenstette and Sadrzadeh, 2011; Van de Cruys et al., 2013). The goal is to formulate how individual word representations ought to be combined to achieve phrasal or sentential semantics. The main questions for semantic compositionality that we are concerned with are: (1) how can polysemy be handled by a single vector representation per word type, learned by either a distributional or neural model, and (2) how does composition resolve runcompany companyrun Co-compositional vector of verb and object operate = Prototy</context>
<context position="18726" citStr="Mitchell and Lapata (2008)" startWordPosition="3005" endWordPosition="3008">optimize s and z. Second, the projected verb vector is updated as xnew = znew − y. Finally we optimize v to minimize the Euclidean distance between xnew and Pobjv, where A is a regularization hyper-parameter: J(v) = 2||xnew − Pobjv||2 + A 12 vTv (10) 5 Evaluation 5.1 Dataset In order to evaluate the performance of our new co-compositional model with prototype projection and word representation learning algorithm, we make use of the disambiguation task of transitive sentences developed by Grefenstette and Sadrzadeh (2011). This is an extension of the two words phrase similarity task defined in Mitchell and Lapata (2008), and constructed according to similar guidelines. The dataset consists of similarity judgments between a landmark verb and a triple consisting of a transitive target verb, subject and object extracted from the BNC corpus. Human judges give scores between 1 to 7, with higher scores implying higher semantic similarity. For example, Table 2 shows some examples from the data: we see that the verb meet with subject system and object criterion is judged similar to the landmark verb satisfy but not visit. The dataset contains a total of 2500 similarity judgements, provided by 25 participants.4 The t</context>
<context position="28399" citStr="Mitchell and Lapata (2008)" startWordPosition="4578" endWordPosition="4581">ntations without re-training. We note that our positive results mainly come from the verb projections. Subject information actually does not help. We believe this best configuration is taskdependent; in this test collection, the subjects appear to have little contribution to the landmark verb. 7 Related work In recent years, several sophisticated vector space models have been proposed for computing compositional semantics. Mitchell and Lapata (2010), Erk (2012) and Baroni et al. (2013) are recommended survey papers. 137 One of the first approaches is the vector addition/multiplication idea of Mitchell and Lapata (2008). The appeal of this kind of simple approach is its intuitive geometric interpretation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that modifies the noun vector into an adjective-noun vector. Zanzotto et al. (2010) and Guevara (2010) also proposed linear transformation models for composition and address the is</context>
</contexts>
<marker>Mitchell, Lapata, 2008</marker>
<rawString>Jeff Mitchell and Mirella Lapata. 2008. Vector-based models of semantic composition. In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jeff Mitchell</author>
<author>Mirella Lapata</author>
</authors>
<title>Composition in distributional models of semantics.</title>
<date>2010</date>
<journal>Cognitive Science,</journal>
<volume>34</volume>
<issue>8</issue>
<contexts>
<context position="1576" citStr="Mitchell and Lapata, 2010" startWordPosition="215" endWordPosition="218">We further cast the model as a neural network and propose an unsupervised algorithm to jointly train word representations with co-compositionality. The model achieves the best result to date (p = 0.47) on the semantic similarity task of transitive verbs (Grefenstette and Sadrzadeh, 2011). 1 Introduction Vector space models of words have been very successful in capturing the semantic and syntactic characteristics of individual lexical items (Turney and Pantel, 2010). Much research has addressed the question of how to construct individual word representations, for example distributional models (Mitchell and Lapata, 2010) and neural models (Collobert and Weston, 2008). These word representations are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role labeling (Turian et al., 2010; Collobert et al., 2011). Recently, modeling of semantic compositionality (Frege,1892) in vector space has emerged as another import</context>
<context position="7015" citStr="Mitchell and Lapata (2010)" startWordPosition="1047" endWordPosition="1050">ons jointly. In the following, we first provide background to the word representations employed here (Section 2). We describe the model for co-compositionality in Section 3 and the corresponding neural network in Section 4. Evaluation and experiments are presented in Sections 5 and 6. Finally, we end with related work (Section 7) and conclusions (Section 8). 2 Word Vector Representations 2.1 Simple Distributional Semantic space (SDS) word vectors Word meaning is often represented in a high dimensional space, where each element corresponds to some contextual element in which the word is found. Mitchell and Lapata (2010) present a co-occurrencebased semantic space called Simple Distributional Semantic space (SDS). Their SDS model uses a context window of five words on either side of the target word and 2,000 vector components, representing the most frequent context words (excluding a list of stop words). These components vi(t) were set to the ratio of the probability of the context word given the 131 target word to the probability of the context word overall: __ Wi|t) freqcZ,t x freqtotal (1) vi(t) Aci) freqt x freqcZ where freqcZ,t, freqtotal, freqt and freqcZ are the frequencies of the context word ci with </context>
<context position="28226" citStr="Mitchell and Lapata (2010)" startWordPosition="4550" endWordPosition="4553">vector is added without projection first. Blank indicates that the vector is not used in the final compositional score. these variants, using f =Addition and SDS/NLM representations without re-training. We note that our positive results mainly come from the verb projections. Subject information actually does not help. We believe this best configuration is taskdependent; in this test collection, the subjects appear to have little contribution to the landmark verb. 7 Related work In recent years, several sophisticated vector space models have been proposed for computing compositional semantics. Mitchell and Lapata (2010), Erk (2012) and Baroni et al. (2013) are recommended survey papers. 137 One of the first approaches is the vector addition/multiplication idea of Mitchell and Lapata (2008). The appeal of this kind of simple approach is its intuitive geometric interpretation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that mo</context>
</contexts>
<marker>Mitchell, Lapata, 2010</marker>
<rawString>Jeff Mitchell and Mirella Lapata. 2010. Composition in distributional models of semantics. Cognitive Science, 34(8):1388–1439.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
</authors>
<title>Maltparser: A data-driven parser-generator for dependency parsing.</title>
<date>2006</date>
<booktitle>In Proceedings of the International Conference on Language Resources and Evaluation (LREC).</booktitle>
<contexts>
<context position="21655" citStr="Nivre et al., 2006" startWordPosition="3462" endWordPosition="3465">nd trained on the British National Corpus (BNC). We are interested in knowing how sensitive each model is to the underlying word representation. In general, this is a challenging task: the upper-bound of p = 0.62 is the inter-annotator agreement. 5http://homepages.inf.ed.ac.uk/ s1066731/index.php?page=resources 135 5.3 Implementation details In terms of implementation detail, our model and our re-implementation of Erk and Pado’s model make use of the ukWaC corpus (Baroni et al., 2009).6 This corpus is a two billion word corpus automatically harvested from the web and parsed by the MaltParser (Nivre et al., 2006). We use ukWaC corpus to collect W (VerbOf, wo) and W (ObjOf, wv) for prototype projections. We also extract about 5000 verb-object pairs that relevant for testdata from this corpus to train our neural network learning algorithm. In our co-compositional model, the contribution ratio of SVD is set to 80% (i.e. automatically fixing k in SVD to include 80% of the top singular values). We set the number of prototype vectors to be m = 20, where W(VerbOf,wo) is filtered with high frequency words and W(ObjOf,wv) is filtered with both high frequency and high similarity words. In our model, we output t</context>
</contexts>
<marker>Nivre, Hall, Nilsson, 2006</marker>
<rawString>Joakim Nivre, Johan Hall, and Jens Nilsson. 2006. Maltparser: A data-driven parser-generator for dependency parsing. In Proceedings of the International Conference on Language Resources and Evaluation (LREC).</rawString>
</citation>
<citation valid="true">
<authors>
<author>James Pustejovsky</author>
</authors>
<title>The Generative Lexicon.</title>
<date>1995</date>
<publisher>MIT Press,</publisher>
<location>Cambridge, MA.</location>
<contexts>
<context position="3299" citStr="Pustejovsky, 1995" startWordPosition="479" endWordPosition="480">ional or neural model, and (2) how does composition resolve runcompany companyrun Co-compositional vector of verb and object operate = Prototype Projection VERB OBJ X Ok ・・・ ・・・ ≈ firm bank start build X ≈ m ・・・ Vk buy hotel ・・・ Pcompany=VkTVk run Prun=OkTOk company 130 Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 130–140, Seattle, Washington, USA, 18-21 October 2013. c�2013 Association for Computational Linguistics these ambiguities. To this end, we are inspired by the idea of type coercion and co-compositionality in Generative Lexicon Theory (Pustejovsky, 1995). Co-compositionality advocates that instead of a predicate-argument view of composition, both predicate and argument influence/coerce each other to generate the overall meaning. For example, consider a polysemous word like run: • (a) He runs the company. • (b) He runs the marathon. Run may have several senses, but the prototypical verbs that select for company differ from those that select for marathon, and thus the ambiguity at the word level is resolved at the sentence level. The same is true for the other direction, where the predicate also coerces meaning to the argument to fit expectatio</context>
<context position="10001" citStr="Pustejovsky, 1995" startWordPosition="1561" endWordPosition="1562">ion, and tanh is applied element-wise. We also create a corrupted sequence xc = [d(w1); d(w2); ... ; d(wm′)] where wm′ is chosen randomly from the vocabulary. We compute the score of this implicit negative sequence xc with the same neural network, score(xc) = sT(tanh(Wxc + b)). Finally, we get the cost function of this training algorithm as follow. J = max(0,1 − score(x) + score(xc)) (3) In order to minimize this cost function, we optimize the parameters 0 = (s, W, b, x) via backpropagation with stochastic gradient descent (SGD). 3 The Model 3.1 Prototype Projection Generative Lexicon Theory (Pustejovsky, 1995) makes a distinction between accidental polysemy (homonyms, e.g. bank as financial institution vs. as river side) and logical polysemy (e.g. figure and ground meanings of door). Our model handles both cases using the concept of projection to latent prototype space. The fundamental idea is that for each word w and a syntactic/semantic (binary) relation R (such as verb-object relation), w has a set of prototype words with which it frequently occurs in relation R. For example, if w is a word company, and R is the object-verb relation, prototype words should include start, build, and buy (Figure 1</context>
<context position="34206" citStr="Pustejovsky, 1995" startWordPosition="5523" endWordPosition="5524">for SDS vs. NLM representations), but we note that we may be able to borrow some of more sophisticated ways to find prototype vectors from Erk and Pad´o (2008; 2009) and Thater et al. (2010; 2011). 8 Conclusion and Future Work We began this work by asking how it is possible to handle polysemy issues in compositional semantics, especially when adopting distributional semantics methods that construct only one representation per word type. After all, the different senses of the same word are all conflated into a single vector representation. We found our inspiration in Generative Lexicon Theory (Pustejovsky, 1995), where ambiguity is resolved due to co-compositionality of the words in the sentence, i.e., the meaning of an ambiguous verb is generated by the properties the object it takes, and vice versa. We implement this idea in a novel neural network model using prototype projections. The advantages of this model is that it is robust to the underlying word representation used and that it enables an effective joint learning of word representations. The model achieves the current state-of-the-art performance (p = 0.47) on the semantic similarity task of transitive verbs (Grefenstette and Sadrzadeh, 2011</context>
</contexts>
<marker>Pustejovsky, 1995</marker>
<rawString>James Pustejovsky. 1995. The Generative Lexicon. MIT Press, Cambridge, MA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joseph Reisinger</author>
<author>Raymond J Mooney</author>
</authors>
<title>Multiprototype vector-space models of word meaning.</title>
<date>2010</date>
<booktitle>In Human Language Technologies: The Conference of the North American Chapter of the Association for Computational Linguistics (NAACL-HLT).</booktitle>
<contexts>
<context position="16178" citStr="Reisinger and Mooney, 2010" startWordPosition="2556" endWordPosition="2559">del (Section 4.2). 4.1 Compositional Neural Language Model (C-NLM) Compositional Neural Language Model (C-NLM) is a combination of a word representation learning method and compositional rule. In contrast to other compositional models based on machine learning, our model has no complex parameters for modeling composition. Composition is modeled using straightforward vector addition/multiplications; instead, what is learned is the word representation. Figure 3 shows the C-NLM. The learning algorithm is unsupervised, and works by artificially 3There are works on multiple representations, e.g., (Reisinger and Mooney, 2010); we focus on single representation here. Figure 4: Co-Compositional Neural Language Model (CoC-NLM) is C-NLM with prototype projection. generating negative examples in a fashion analogous to the NLM learning algorithm of (Collobert and Weston, 2008) and contrastive estimation (Smith and Eisner, 2005). First, given some initial word representations and raw sentences, we compute the compositional vector with function f (in this section, we will assume that we will be using the addition operator). Second, in order to obtain the score of compositional vector, we compute the dot product with vecto</context>
</contexts>
<marker>Reisinger, Mooney, 2010</marker>
<rawString>Joseph Reisinger and Raymond J Mooney. 2010. Multiprototype vector-space models of word meaning. In Human Language Technologies: The Conference of the North American Chapter of the Association for Computational Linguistics (NAACL-HLT).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Noah A Smith</author>
<author>Jason Eisner</author>
</authors>
<title>Contrastive estimation: Training log-linear models on unlabeled data.</title>
<date>2005</date>
<booktitle>In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</booktitle>
<contexts>
<context position="16480" citStr="Smith and Eisner, 2005" startWordPosition="2599" endWordPosition="2602">ling composition. Composition is modeled using straightforward vector addition/multiplications; instead, what is learned is the word representation. Figure 3 shows the C-NLM. The learning algorithm is unsupervised, and works by artificially 3There are works on multiple representations, e.g., (Reisinger and Mooney, 2010); we focus on single representation here. Figure 4: Co-Compositional Neural Language Model (CoC-NLM) is C-NLM with prototype projection. generating negative examples in a fashion analogous to the NLM learning algorithm of (Collobert and Weston, 2008) and contrastive estimation (Smith and Eisner, 2005). First, given some initial word representations and raw sentences, we compute the compositional vector with function f (in this section, we will assume that we will be using the addition operator). Second, in order to obtain the score of compositional vector, we compute the dot product with vector s C ][Rn (n is the dimension of the word vector space): verb vector v = d(wv) and object vector o = d(wo). score(v, o) = s&apos;f(v, o) = s&apos;(v + o) (8) We also create a corrupted pair by substituting a random verb wverb′. The cost function J = max(0,1− score(v, o) + score(ve, o)), where ve is the word ve</context>
</contexts>
<marker>Smith, Eisner, 2005</marker>
<rawString>Noah A. Smith and Jason Eisner. 2005. Contrastive estimation: Training log-linear models on unlabeled data. In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Richard Socher</author>
<author>Brody Huval</author>
<author>Christopher D Manning</author>
<author>Andrew Y Ng</author>
</authors>
<title>Semantic compositionality through recursive matrix-vector spaces.</title>
<date>2012</date>
<booktitle>In Proceedings of the Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP-CoNLL).</booktitle>
<contexts>
<context position="2300" citStr="Socher et al., 2012" startWordPosition="323" endWordPosition="326">anguage processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role labeling (Turian et al., 2010; Collobert et al., 2011). Recently, modeling of semantic compositionality (Frege,1892) in vector space has emerged as another important line of research (Mitchell and Lapata, 2008; Mitchell and Lapata, 2010; Baroni and Zamparelli, 2010; Socher et al., 2012; Grefenstette and Sadrzadeh, 2011; Van de Cruys et al., 2013). The goal is to formulate how individual word representations ought to be combined to achieve phrasal or sentential semantics. The main questions for semantic compositionality that we are concerned with are: (1) how can polysemy be handled by a single vector representation per word type, learned by either a distributional or neural model, and (2) how does composition resolve runcompany companyrun Co-compositional vector of verb and object operate = Prototype Projection VERB OBJ X Ok ・・・ ・・・ ≈ firm bank start build X ≈ m ・・・ Vk buy </context>
<context position="29097" citStr="Socher et al. (2012)" startWordPosition="4685" endWordPosition="4688">retation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that modifies the noun vector into an adjective-noun vector. Zanzotto et al. (2010) and Guevara (2010) also proposed linear transformation models for composition and address the issue of estimating large matrices with least squares or regression techniques. Socher et al. (2012) extend this linear transformation approach with the more powerful model of Matrix-Vector Recursive Neural Networks (MV-RNN). Each node in a parse tree is assigned both a vector and a matrix. The vector captures the actual meaning of the word itself, while the matrix is modeled as a operator that modify the meaning of neighboring words and phrases. This model captures semantic change phenomenon like not bad is similar to good due to a composition of the bad vector with a meaning-flipping not matrix. But this MV-RNN also need to optimize all matrices of words from initial value (identity plus a</context>
</contexts>
<marker>Socher, Huval, Manning, Ng, 2012</marker>
<rawString>Richard Socher, Brody Huval, Christopher D. Manning, and Andrew Y. Ng. 2012. Semantic compositionality through recursive matrix-vector spaces. In Proceedings of the Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP-CoNLL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan Thater</author>
<author>Hagen F¨urstenau</author>
<author>Manfred Pinkal</author>
</authors>
<title>Contextualizing semantic representations using syntactically enriched vector models.</title>
<date>2010</date>
<booktitle>In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</booktitle>
<marker>Thater, F¨urstenau, Pinkal, 2010</marker>
<rawString>Stefan Thater, Hagen F¨urstenau, and Manfred Pinkal. 2010. Contextualizing semantic representations using syntactically enriched vector models. In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Stefan Thater</author>
<author>Hagen F¨urstenau</author>
<author>Manfred Pinkal</author>
</authors>
<title>Word meaning in context: A simple and effective vector model.</title>
<date>2011</date>
<booktitle>In Asian Federation of Natural Language Processing (IJCNLP).</booktitle>
<marker>Thater, F¨urstenau, Pinkal, 2011</marker>
<rawString>Stefan Thater, Hagen F¨urstenau, and Manfred Pinkal. 2011. Word meaning in context: A simple and effective vector model. In Asian Federation of Natural Language Processing (IJCNLP).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joseph Turian</author>
<author>Lev-Arie Ratinov</author>
<author>Yoshua Bengio</author>
</authors>
<title>Word representations: A simple and general method for semi-supervised learning.</title>
<date>2010</date>
<booktitle>In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</booktitle>
<contexts>
<context position="2043" citStr="Turian et al., 2010" startWordPosition="285" endWordPosition="288">h research has addressed the question of how to construct individual word representations, for example distributional models (Mitchell and Lapata, 2010) and neural models (Collobert and Weston, 2008). These word representations are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role labeling (Turian et al., 2010; Collobert et al., 2011). Recently, modeling of semantic compositionality (Frege,1892) in vector space has emerged as another important line of research (Mitchell and Lapata, 2008; Mitchell and Lapata, 2010; Baroni and Zamparelli, 2010; Socher et al., 2012; Grefenstette and Sadrzadeh, 2011; Van de Cruys et al., 2013). The goal is to formulate how individual word representations ought to be combined to achieve phrasal or sentential semantics. The main questions for semantic compositionality that we are concerned with are: (1) how can polysemy be handled by a single vector representation per wo</context>
<context position="8634" citStr="Turian et al., 2010" startWordPosition="1324" endWordPosition="1327">ense features. These dense feature vectors are usually called word embeddings, and it has been shown that such vectors can capture interesting linear relationships, such as king − man + woman Pt� queen (Mikolov et al., 2013). In this work, we adopt the model by Collobert and Weston (2008). The idea is to construct a neural network based on word sequences, where one outputs high scores for n-grams that occur in a large unlabeled corpus and low scores for nonsense n-grams where one word is replaced by a random word. This word representation with NLM has been used to good effect, for example in (Turian et al., 2010; Collobert et al., 2011; Huang et al., 2012) where induced word representations are used with sophisticated features to improve performance in various NLP tasks. Specifically, we first represent the word sequence as a vector x = [d(w1); d(w2); ... ; d(wm)], where wi is ith word in the sequence, m is the window size, d(w) is the vector representation of word w (an n-dimensional column vector) and [d(w1); d(w2); ... ; d(wm)] is the concatenation of word vectors as an input of neural network. Second, we compute the score of the sequence, score(x) = sT(tanh(Wx + b)) (2) where W C Rhx(mn) and s C </context>
</contexts>
<marker>Turian, Ratinov, Bengio, 2010</marker>
<rawString>Joseph Turian, Lev-Arie Ratinov, and Yoshua Bengio. 2010. Word representations: A simple and general method for semi-supervised learning. In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Peter D Turney</author>
<author>Patrick Pantel</author>
</authors>
<title>From frequency to meaning: Vector space models of semantics.</title>
<date>2010</date>
<journal>Journal of artificial intelligence research,</journal>
<volume>37</volume>
<issue>1</issue>
<pages>188</pages>
<contexts>
<context position="1419" citStr="Turney and Pantel, 2010" startWordPosition="194" endWordPosition="197">e implement cocompositionality using prototype projections on predicates/arguments and show that this is effective in adapting their word representations. We further cast the model as a neural network and propose an unsupervised algorithm to jointly train word representations with co-compositionality. The model achieves the best result to date (p = 0.47) on the semantic similarity task of transitive verbs (Grefenstette and Sadrzadeh, 2011). 1 Introduction Vector space models of words have been very successful in capturing the semantic and syntactic characteristics of individual lexical items (Turney and Pantel, 2010). Much research has addressed the question of how to construct individual word representations, for example distributional models (Mitchell and Lapata, 2010) and neural models (Collobert and Weston, 2008). These word representations are used in various natural language processing (NLP) tasks such as part-of-speech tagging, chunking, named entity recognition, and semantic Co-Compositionality with Prototype Projections Figure 1: Here, we capture the semantics of run in run company by projecting the original word representation of run to the prototype space of company (and vice versa). role label</context>
</contexts>
<marker>Turney, Pantel, 2010</marker>
<rawString>Peter D Turney and Patrick Pantel. 2010. From frequency to meaning: Vector space models of semantics. Journal of artificial intelligence research, 37(1):141– 188.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tim Van de Cruys</author>
<author>Thierry Poibeau</author>
<author>Anna Korhonen</author>
</authors>
<title>A tensor-based factorization model of semantic compositionality.</title>
<date>2013</date>
<booktitle>In Human Language Technologies: The Conference of the North American Chapter of the Association for Computational Linguistics (NAACLHLT).</booktitle>
<marker>Van de Cruys, Poibeau, Korhonen, 2013</marker>
<rawString>Tim Van de Cruys, Thierry Poibeau, and Anna Korhonen. 2013. A tensor-based factorization model of semantic compositionality. In Human Language Technologies: The Conference of the North American Chapter of the Association for Computational Linguistics (NAACLHLT).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fabio Massimo Zanzotto</author>
<author>Ioannis Korkontzelos</author>
<author>Francesca Fallucchi</author>
<author>Suresh Manandhar</author>
</authors>
<title>Estimating linear models for compositional distributional semantics.</title>
<date>2010</date>
<booktitle>In Proceedings of the International Conference on Computational Linguistics (COLING).</booktitle>
<contexts>
<context position="28902" citStr="Zanzotto et al. (2010)" startWordPosition="4656" endWordPosition="4659">survey papers. 137 One of the first approaches is the vector addition/multiplication idea of Mitchell and Lapata (2008). The appeal of this kind of simple approach is its intuitive geometric interpretation and its robustness to various datasets. However, it may not be sufficiently expressive to represent the various factors involved in compositional semantics, such as syntax and context. To this end, Baroni and Zamparelli (2010) present a compositional model for adjectives and nouns. In their model, an adjective is a matrix operator that modifies the noun vector into an adjective-noun vector. Zanzotto et al. (2010) and Guevara (2010) also proposed linear transformation models for composition and address the issue of estimating large matrices with least squares or regression techniques. Socher et al. (2012) extend this linear transformation approach with the more powerful model of Matrix-Vector Recursive Neural Networks (MV-RNN). Each node in a parse tree is assigned both a vector and a matrix. The vector captures the actual meaning of the word itself, while the matrix is modeled as a operator that modify the meaning of neighboring words and phrases. This model captures semantic change phenomenon like no</context>
</contexts>
<marker>Zanzotto, Korkontzelos, Fallucchi, Manandhar, 2010</marker>
<rawString>Fabio Massimo Zanzotto, Ioannis Korkontzelos, Francesca Fallucchi, and Suresh Manandhar. 2010. Estimating linear models for compositional distributional semantics. In Proceedings of the International Conference on Computational Linguistics (COLING).</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>