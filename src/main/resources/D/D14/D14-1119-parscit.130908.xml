<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.001504">
<title confidence="0.910001">
Vote Prediction on Comments in Social Polls
</title>
<author confidence="0.802772">
Isaac Persing and Vincent Ng
</author>
<affiliation confidence="0.819988">
Human Language Technology Research Institute
University of Texas at Dallas
</affiliation>
<address confidence="0.872229">
Richardson, TX 75083-0688
</address>
<email confidence="0.999626">
{persingq,vince}@hlt.utdallas.edu
</email>
<sectionHeader confidence="0.994814" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999912444444444">
A poll consists of a question and a set of
predefined answers from which voters can
select. We present the new problem of vote
prediction on comments, which involves
determining which of these answers a
voter selected given a comment she wrote
after voting. To address this task, we ex-
ploit not only the information extracted
from the comments but also extra-textual
information such as user demographic in-
formation and inter-comment constraints.
In an evaluation involving nearly one mil-
lion comments collected from the popu-
lar SodaHead social polling website, we
show that a vote prediction system that ex-
ploits only textual information can be im-
proved significantly when extended with
extra-textual information.
</bodyText>
<sectionHeader confidence="0.998784" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999979118644068">
We introduce in this paper a new opinion mining
task, vote prediction on comments in social polls.
Recall that a poll consists of a question accompa-
nied by a set of predefined answers. A user who
votes on the question will choose one of these an-
swers and will be prompted to enter a comment
giving an explanation of why she chose the an-
swer. Given a poll and a user comment written
in response to it, the task of vote prediction seeks
to determine which predefined answer was chosen
by the author of the comment.
A solution to the vote prediction problem would
contribute significantly to our understanding of the
underlying attitudes of individual social polling
website users. This understanding could be ex-
ploited for tasks such as improving user experi-
ence or directed advertising; if we can predict how
a user will vote on a question, we can make more
accurate guesses about what kind of content/ads
related to the question the user would like to see.
Unfortunately, a major difficulty of vote predic-
tion arises from the casual nature of discussion in
social media. A comment often contains insuffi-
cient information for inferring the user’s vote, or
in some cases may even be entirely absent.
In light of this difficulty, we exploit two addi-
tional types of information in the prediction pro-
cess. First, we employ demographic features de-
rived from user profiles. Demographic features
may be broadly useful for other opinion mining
tasks such as stance classification (Somasundaran
and Wiebe, 2010), as many social media web-
sites like CreateDebate1 allow users to create pro-
files with similar demographic information. Previ-
ous work has attempted to predict such latent fea-
tures (e.g., Rao and Yarowsky (2010), Burger et
al. (2011)) rather than employing them for opin-
ion mining tasks.
Second, we exploit inter-comment constraints
to help us perform joint inference over votes on
different questions. Note that previous work on
debate stance recognition has also employed con-
straints to improve the inference process. Specif-
ically, in stance prediction, it is typical to em-
ploy so-called author constraints (e.g., Thomas
et al. (2006), Bansal et al. (2008), Walker et al.
(2012a), Hasan and Ng (2013)), which specify that
two documents written by the same author for the
same topic should have the same stance. However,
in vote prediction, author constraints are not use-
ful because a user is not permitted to cast more
than one vote per question, unlike in stance pre-
diction, where users may engage in a debate and
therefore post more than once per debate topic.
Consequently, we propose two new types of con-
straints for exploiting inter topic user voting pat-
terns. One constraint involves pairs of authors and
the other involves pairs of questions. These con-
straints are also potentially useful for other opin-
</bodyText>
<footnote confidence="0.985146">
1http://www.createdebate.com/
</footnote>
<page confidence="0.894259">
1127
</page>
<note confidence="0.9087325">
Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1127–1138,
October 25-29, 2014, Doha, Qatar. c�2014 Association for Computational Linguistics
</note>
<bodyText confidence="0.999983444444445">
ion mining tasks involving social media, as social
media sites typically allow users to comment on
multiple topics. Note that enforcing constraints in-
volving two questions is by no means trivial, as the
possible class values associated with the two com-
ments may not necessarily be the same.
Another contribution of our work lies in our
adaptation of the label propagation algorithm (Zhu
and Ghahramani, 2002) to enforce constraints for
vote prediction. Recall that existing stance classi-
fication approaches enforce constraints using min-
imum cut (Thomas et al., 2006), integer linear pro-
gramming (Lu et al., 2012), and loopy belief prop-
agation (Burfoot et al., 2011). Our decision to em-
ploy label propagation stems in part from the in-
ability of loopy belief propagation and integer lin-
ear programming to efficiently process the nearly
one million comments we have, and in part from
the inability of the traditional two-way minimum
cut algorithm to handle multiclass classification.
It is worth noting, however, that other variations
of the label propagation algorithm have been pro-
posed for unrelated NLP tasks such as automati-
cally harvesting temporal facts from the web (e.g.,
Wang et al. (2011) and Wang et al. (2012)).
While we are the first to address the vote predic-
tion task, other researchers have previously used
social media to predict the outcomes of various
events, primarily by analyzing Twitter data. For
example, Tumasjan et al. (2010) and Gayo-Avello
et al. (2011) performed the related task of predict-
ing the outcomes of elections. Rather than pre-
dicting election outcomes, O’Connor et al. (2010)
focused on finding correlations between measures
derived from tweets and the outcomes of politi-
cal events like elections and polls. Finally, Asur
and Huberman (2010) predicted movies’ box of-
fice success. These tasks contrast with our task of
vote prediction in that they are concerned with ag-
gregate measures such as the fraction of the vote
each candidate or party will win in an election or
how much money a movie will make at the box
office, whereas vote prediction is concerned with
predicting how individual people will vote on a
much wider variety of news/political topics.
</bodyText>
<sectionHeader confidence="0.937733" genericHeader="introduction">
2 Corpus
</sectionHeader>
<footnote confidence="0.739268">
SodaHead2 is a social polling website where users
vote on and ask questions about a wide variety of
topics ranging from the serious (e.g., “Should the
2http://www.sodahead.com
</footnote>
<bodyText confidence="0.9999112">
U.S. raise the minimum wage?”) to the silly (e.g
“What is your favorite kind of pie?”). Whenever a
user votes on one of these questions, choosing one
of a set of predefined answers, she is prompted to
enter a comment giving an explanation of why she
chose the answer she did. Our corpus3 consists of
all the comments4 users posted under all featured
questions in the News &amp; Politics category of the
SodaHead website between March 12, 2008 and
August 21, 2013.
This dataset consists of a total of 997,379 com-
ments over 4,803 different questions, so an aver-
age of 208 comments are written in response to
each question. The length of an average comment
is 49 words. As Table 1 illustrates, these questions
may have more than two possible answers, with an
average question having 2.4 possible answers.
Each SodaHead user has her own profile that
contains demographic information about her. As
we can see from Table 2, many users choose to
provide only some information about themselves,
leaving many of the demographic fields blank.
108,462 users posted at least one comment in our
corpus, with an average user commenting on 9.2
of our questions.
</bodyText>
<sectionHeader confidence="0.982815" genericHeader="method">
3 Baseline Systems
</sectionHeader>
<bodyText confidence="0.999961333333333">
To perform our experiments, we first split our
comments into three sets, a test set for evaluating
performance, a training set for training classifiers,
and a development set for tuning parameters. In
order to ensure that the comparisons of our experi-
ments are valid, we construct our test set using the
same 20% of comments in the dataset regardless
of experiment. Since our goal is to plot a learning
curve illustrating how our various vote prediction
systems perform given different amounts of train-
ing and development data, we vary the size of our
training and development sets across experiments
so that in the smallest experiment, together they
comprise 25% of the remaining (non-test) com-
ments, and in the largest experiment, they com-
</bodyText>
<footnote confidence="0.998618363636364">
3http://www.hlt.utdallas.edu/%7epersingq/SocialPolls/ is
the distribution site for our corpus. We preserve user
anonymity by replacing the original id of each user with a
random number in our corpus.
4A “comment” is the text a user posted when submitting
her vote on a question. It does not include posts not associ-
ated with a vote (such as responses to other posts) or votes
where the user chose not to enter a comment. Thus, there
is a one-to-one relationship between comments in votes in
our dataset. The vote associated with a comment is always
known.
</footnote>
<page confidence="0.97773">
1128
</page>
<table confidence="0.998109777777778">
Question Vote Comment
Who Won Round Two of Barack Obama Binders full of women. That is all.
the Presidential Debate?
Mitt Romney Obama is inept and a liar. We can’t survive 4 more years of his crazy crap.
What’s the Best Way to in print Upside down like Luna Lovegood.
Read a Magazine?
online Print costs money. It also doesn’t have a Search function.
on a tablet device since sooooo many people have tablet devices why read it as print or online?
on a smartphone Clicked in print!!! Aargh
</table>
<tableCaption confidence="0.999224">
Table 1: Sample questions and comments. All of the pre-defined answers for these questions are repre-
sented by one comment.
</tableCaption>
<table confidence="0.999877764705883">
User ID 3479864 3189372
Age 25-34
Smoker No
Drinker No
Income
Sexual Orientation Straight
Relationship Status Single
Political Views Conservative Moderate
Ethnicity
Looking For
Career Industry
Children Undecided
Education High School
Gender Female Male
Religious Views Other Christian
Employment Status
Weight Type
</table>
<tableCaption confidence="0.997743">
Table 2: Sample user profiles.
</tableCaption>
<bodyText confidence="0.999950642857143">
prise 100% of the remaining comments. For each
experiment, we maintain a ratio of three training
comments to one development comment.
Recall that each comment in our dataset is writ-
ten in response to a particular question. For each
test comment, our goal is to predict the user’s an-
swer to the question given the text of her comment.
One of the major inherent difficulties of our task
is that it consists not of one, but of 4,803 sep-
arate multiclass classification problems (one for
each question). As a result, our approach to the
problem necessarily has to be somewhat generic,
as it would be too time-consuming to develop an
appropriate feature set for each question.
</bodyText>
<subsectionHeader confidence="0.995788">
3.1 Baseline 1
</subsectionHeader>
<bodyText confidence="0.999790769230769">
Our first baseline’s (B1) approach employs 4,803
multiclass classifiers (one for each question). Each
classifier is trained on one question’s training set,
representing each comment using only a bias fea-
ture. Each of our classifiers is trained using MAL-
LET’s (McCallum, 2002) implementation of max-
imum entropy (ME) classification. This is equiv-
alent to merely counting the number of training
set comments that voted for each possible answer,
selecting the most frequent answer, then applying
this label to all the comments in the test set. This
majority baseline serves primarily to tell us how
well our more sophisticated baseline performs.
</bodyText>
<subsectionHeader confidence="0.989907">
3.2 Baseline 2
</subsectionHeader>
<bodyText confidence="0.99998075">
Our second baseline (B2) is constructed in exactly
the same way as B1 except that each classifier is
trained using both a bias feature and a standard set
of feature types described below.
</bodyText>
<sectionHeader confidence="0.67046" genericHeader="method">
3.2.1 Features
</sectionHeader>
<bodyText confidence="0.999870193548387">
Since the questions in our dataset come from the
News &amp; Politics category of the SodaHead web-
site, many of the questions’ topics are political.
For that reason, it makes sense to use features
which have been shown to work well on other
political classification problems. We therefore
base our feature set on that used by Walker et
al. (2012b) for political debate classification. Our
features are described below.
N-grams. Unigrams have been shown to per-
form well in ideological debates (Somasundaran
and Wiebe, 2010), so we therefore present our
classifiers with lemmatized unigram, bigram, and
trigram features. We normalize the n-gram feature
vector to unit length to avoid giving undue influ-
ence to longer comments.
Cue Words. Based on other work (Fox Tree
and Schrock, 1999; Fox Tree and Schrock, 2002;
Groen et al., 2010; Walker et al., 2012b), we also
present our classifiers with features representing
the first lemmatized unigram, bigram, and trigram
appearing in each comment. These may be useful
in our task when, for example, a user’s comment
begins with or entirely consists of a restatement of
the answer she chose. So if the possible answers
for a given question are “Yes” and “No”, a user
might write in her comment “Yes. Because ...”,
and this would make the “CueWord:Yes” feature
useful for classifying this comment.
Emotion Frequency. For each word in a com-
ment, we used the NRC Emotion Word Lexicon
</bodyText>
<page confidence="0.978728">
1129
</page>
<bodyText confidence="0.999608758064516">
(Mohammad and Yang, 2011) to discover if the
word conveys any emotion. Then, for each emo-
tion or sentiment covered by the lexicon (anger,
anticipation, disgust, fear, joy, sadness, surprise,
trust, positive, or negative) ez, we construct a fea-
ture e c(ei) describin how much of the comment
a total g
consists of words conveying emotion ez, where
C(ez) is the count of words in the comment bear-
ing emotion ez and total is the number of words
in the comment. To understand why this fea-
ture may be useful, consider the question “Does
Sarah Palin deserve VP?” We suspect that users
who post comments laden with words associated
with positive emotions like joy are more likely
to vote “Yes” because the positive emotions im-
ply they are happy about a Sarah Palin vice presi-
dency. Similarly, users who post comments laden
with negative emotions like anger might be more
likely to vote “No”.
Dependencies. We use the Stanford Parser (de
Marneffe et al., 2006) to extract a set of depen-
dencies from each comment. For an example of
how dependencies might help in our task, con-
sider the second comment in Table 1. From this
comment, we can extract the dependency triple
dependency:(nsubj,inept,obama), which indicates
that the user who wrote it does not like Obama and
is therefore more likely to have voted for Romney
in the question. Dependency feature vectors are
normalized to unit length.
Emotion Dependencies. To form an emo-
tion dependency feature, we take a regular de-
pendency feature and replace each of its words
where possible with the emotion it evokes as deter-
mined by the NRC Emotion Word Lexicon. Thus
from the dependency:(nsubj,inept,obama) exam-
ple above, we would generate three features: emo-
tiondependency:(nsubj,anger,obama), emotionde-
pendency:(nsubj,disgust,obama), and emotionde-
pendency:(nsubj,negative,obama). These features
help generalize dependencies, and this is use-
ful because predictive features like emotiondepen-
dency:(nsubj,negative,obama) appear frequently
in the comments for this question, but depen-
dency:(nsubj,inept,obama) does not. Emotion De-
pendency feature vectors are normalized to unit
length.
Post Information. Features under this category
just calculate some basic statistics about a com-
ment. These features may be useful because, for
example, the question “Most Scandalous Politi-
cians of 2008− Who deserves the title?” has six
possible answers, each except the last naming a
particular well-known politician. The last choice
is “The most scandalous politician of 2008 is ...”
and the user is expected to name a politician in her
comment. It would make sense for users choos-
ing this option to have written longer responses
since they have to name and possibly explain their
choice to users who might not necessarily know
who their chosen politician is.
</bodyText>
<subsectionHeader confidence="0.736878">
3.2.2 Feature Selection
</subsectionHeader>
<bodyText confidence="0.999991421052632">
Because some of the feature types (n-grams, cue
words, dependencies, and emotion dependencies)
described in the previous subsection are expected
to generate a large number of non-predictive fea-
tures, we trim some of the most irrelevant fea-
tures out of the feature set to avoid memory prob-
lems. Therefore, following Yang and Pedersen
(1997), for each question we calculate the infor-
mation gain of each feature of these types on the
training set. We then remove those features having
the lowest information gain as well as those fea-
tures occurring less than ten times in the dataset.
Early experiments showed that 1,000 was a rea-
sonable number of features to keep, so for all ex-
periments we keep only the top 1,000 features of
these types. Note that we do not apply feature se-
lection to emotion frequency or post information
features, as each of these sets consists of a small
number of real-valued features.
</bodyText>
<sectionHeader confidence="0.993129" genericHeader="method">
4 Demographic Features
</sectionHeader>
<bodyText confidence="0.999992947368421">
As mentioned in the introduction, a major diffi-
culty inherent to our problem is that in many cases
a comment contains insufficient information for
inferring the underlying vote. Aside from being
short, the comments shown in Table 1 are typ-
ical of comments found in the dataset. Some
comments are like the first and third in the table,
requiring some obscure bit of world knowledge
to understand what the writer is saying. Others
like the fourth only explain why the user did not
choose a particular answer, which is always po-
tentially useful, but sufficient only if the comment
excludes every other possible choice.
Because it is difficult to tell how a user voted
given her comment, we exploit the demographic
information users provide in their profiles as an
additional source of information. Since many
of the questions in our dataset deal with poli-
tics, we anticipate that information about things
</bodyText>
<page confidence="0.947357">
1130
</page>
<bodyText confidence="0.999976029411765">
such as whether a comment was written by a
conservative or progressive user would be use-
ful for predicting the answers of many comments.
For each comment, we encode demographic in-
formation as features in the following way. For
each field in the user’s profile shown in Table 2
(aside from user ID), we construct a feature of the
form FZ:VZ if the user filled in field FZ with value
VZ. Thus, any comment made by user 3479864
would include the features Age:25−34, Politi-
calViews:Conservative, Gender:Female, and Reli-
gion:Other.
Here is an example of a comment whose
predicted vote gets corrected by adding demo-
graphic features to our system. For the ques-
tion, “LPGA Decides to Allow Transgender Com-
petitors: Good or Bad Move for Golf?”, user
2252750 writes, “LPGA ...can let monkeys play if
they wish....nobody gives a rip... bark”. Of the
three possible answers for this question, “Good
move”, “Bad move”, and “Undecided”, our base-
line system without demographics believes that
user 2252750 probably voted for the third, as
“nobody gives a rip” makes him sound apathetic
toward the issue. However, our demographic
system notices that his profile contains “Reli-
gion:Christian”, and users with this demographic
attribute choose “Bad Move” 64% of the time.
Thus, demographic features allowed our system to
correctly predict his vote for “Bad Move”.
Since demographics are also expected to gen-
erate a large number of non-predictive features,
we apply feature selection to them as described in
Section 3.2.2.
</bodyText>
<sectionHeader confidence="0.975274" genericHeader="method">
5 Enforcing Constraints
</sectionHeader>
<bodyText confidence="0.999982384615385">
We mentioned earlier that an average SodaHead
question contains 208 comments. This implies
that there are only about 31−125 comments5 in
the average training set for one of our ME classi-
fiers. It would be difficult to train a good classi-
fier from a training set this small even if we had
feature sets tailored to work well on each of the
4,803 questions. While we have already attempted
to exploit user information (in the form of de-
mographic features) to help improve our system’s
performance, this approach still treats the task as
4,803 separate classification problems. It does not
allow for the possibility that classification on one
</bodyText>
<footnote confidence="0.531819">
5At the low and high end of the learning curve respec-
tively.
</footnote>
<bodyText confidence="0.999803823529412">
question may be improved by exploiting informa-
tion gleaned from votes on other questions.
One way we might exploit such information is
by first noticing that, for any pair of questions,
there may be multiple users who commented on
both. This overlap between questions allows us to
calculate how predictive a user’s vote on one ques-
tion is of how she will vote on the other. For ex-
ample, on the question “Who Would You Rather
Have Dinner With?”, we found that users who
voted for “Mitt Romney” were much more likely
to choose “No, I’m still voting for him” on the
question “Does Mitt Romney’s ’Entitled’ Remarks
Change Your Opinion of Him?”. Similarly, users
who voted to have dinner with “Barack Obama”
were much more likely to vote “Yes, I’m not vot-
ing for him anymore” on the “entitled” question.
A system that somehow takes into account this in-
formation might correctly classify a difficult com-
ment on the “entitled” question if it notices that the
comment was written by a user who commented
on both questions and it knows how the user voted
on the “dinner” question. We call the kind of con-
straint described here a QuestionPair constraint.
We might also exploit information from other
questions by noticing that there are users who
share similar attitudes on a wide variety of top-
ics in our dataset. We can gauge how often a
pair of users agree with each other by compar-
ing their votes on every question on which they
have both voted where their comments appear in
the training set. So for example, if we see that
two users have agreed on questions about George
H.W. Bush, Bill Clinton, and George W. Bush,
we can guess that they will also agree on a ques-
tion about Barack Obama. Similarly, if they dis-
agreed on all those questions, they are likely to
disagree on the last question. A system that takes
into account this kind of information could cor-
rectly classify an otherwise difficult comment if it
knows how another user voted on this question and
also knows how often the two users agree on other
questions. We call the kind of constraint described
here a VoterPair constraint.
In order to enforce both kinds of constraints,
we introduce a variation of the label propagation
algorithm (Zhu and Ghahramani, 2002). In our
version of the label propagation algorithm, each
comment in our dataset is represented by a node
in a graph. Each node is associated with a proba-
bility distribution indicating the likelihood that the
</bodyText>
<page confidence="0.966723">
1131
</page>
<bodyText confidence="0.999648515151515">
comment belongs to each of its question’s possible
answers. Thus, when we initialize the graph, each
training set node’s probability distribution is set to
reflect its comment’s actual label (with a proba-
bility of 1 for the comment’s actual label and 0
for each other answer), and each development or
test set node’s probability distribution is set to the
value predicted by another classifier such as B2 or
B2 + Dem since the algorithm is not permitted
to see the comment’s actual label. Lines 7−12 in
Figure 1 describe the graph’s initialization.
Now that we have set up the graph’s nodes, we
need to explain how our graph’s edges work. As
we discussed earlier in this section, the edges in
our graph will represent two kinds of soft con-
straints. Each edge allows one of a node’s neigh-
bors to cast a vote (in the form of a probability dis-
tribution over possible answers) for what it thinks
the node’s answer should be. Let us call the com-
ment node whose label we are trying to predict the
target node and the comment node which casts the
vote the source node.
Our graph contains a QuestionPair edge be-
tween any source and target comments written by
the same user. Since a user cannot comment more
than once on any question, the source and target
comments will occur in two different questions. In
order to determine how the source node votes over
a QuestionPair edge, we need to calculate some
probabilities. In particular, we need to determine
the probability that a user will vote for possible
answer k in the target question QI given that she
voted for answer l in the source question QJ:
</bodyText>
<equation confidence="0.997622">
P(QIk|QJl) = C(QIk ,QJl)+γ
(C(QIm,QJl)+γ)
QPS,T (QIk) = E PS(QJm)P(QIk|QJm)
m∈A(QJ)
</equation>
<bodyText confidence="0.999823">
where PS(QJm) is the probability currently asso-
ciated with answer m in 5’s question (QJ).
The graph contains a VoterPair edge between
any source and target nodes on the same question
if the users who posted these comments have both
voted on at least one other question together and
their comments on the other question(s) occurred
in the training set. To determine how the source
node votes over a VoterPair edge, we need to cal-
culate the probability that the source and target
users will agree on a generic issue:
</bodyText>
<equation confidence="0.9984995">
Cagr(US,UT )+1
Pagr(US, UT ) = Cagr(US,UT)+Cdis(US,UT)+2
</equation>
<bodyText confidence="0.9992217">
where Cagr(US, UT) is the number of questions
on which users US and UT voted for the same
answer and both their comments occurred in the
training set, Cdis(US, UT) is the number of ques-
tions on which US and UT voted for different
answers where both their comments occurred in
the training set, and the +1 and +2 are used for
smoothing. The probability distribution that the
source node 5 votes for on target node T is then
given by:
</bodyText>
<equation confidence="0.966471333333333">
V PS,T(QIk) = PS(QIk)Pagr(US, UT)
(PS(QIm)) 1 − Pagr(US, UT)
|A(QI) |− 1
</equation>
<bodyText confidence="0.999799111111111">
where PS(QIn) is the probability currently asso-
ciated with answer n in the source node’s question
(QI), and |A(QI) |is the number of possible an-
swers on QI. We divide the second term, which
deals with disagreement, by |A(QI) |− 1 because,
even if we know that the target and source users
disagreed on the answer to a particular question
and that the source user did not vote for answer
k, there is only a |A(QI)|−1 chance that the target
</bodyText>
<equation confidence="0.637897">
1
</equation>
<bodyText confidence="0.984020645161291">
user voted for answer k since there are |A(QI)|−1
non-k answers to choose from.
Now that we have described how edges are
added to the graph and how source comment nodes
vote over the edges, we are ready to begin iterat-
ing over the label propagation algorithm (line 13 in
Figure 1). For each iteration of the algorithm, we
update each development or test set node’s answer
probability distribution by assigning it a weighted
sum of (1) the initial probability distribution as-
signed to the node, (2) the sum of the Question-
Pair edges’ votes, and (3) the sum of the VoterPair
edges’ votes (line 16 in Figure 1). Upon comple-
tion of the algorithm, if our soft constraints work
as expected, the new labeling of comment nodes
should be more accurate than their initial labeling.
We tune the parameters WI, WV , WQ, and
iterations jointly by an exhaustive search of the
parameter space to maximize classification accu-
racy on the development set. Each of the weight
parameters is allowed to take one of the values 0,
1, or 2, and the iteration parameter is allowed take
one of the values 0, 1, 2, 3, 4, 5.
m∈A(QI)
where C(QIn, QJl) is the number of users who
voted for answer n in QI and answer l in QJ, and
A(QI) is the set of possible answers on QI. We
set γ, the smoothing factor, to 10 since this value
worked well in earlier experiments. The source
node 5 casts its vote on target node T for the prob-
ability distribution given by:
</bodyText>
<figure confidence="0.60741425">
�
+
m∈A(QI),
m=,4k
</figure>
<page confidence="0.972903">
1132
</page>
<listItem confidence="0.9404735">
1: LabelPropagation(Tr, D, Te, iterations, Wi, WV , WQ, I)
2: Inputs:
3: Tr, D, Te: Comments in Training, Development, and Test set
4: iterations: The number of iterations to perform
5: Wi, WV , WQ: Weights assigned to initial, VoterPair, and QuestionPair constraints
6: I: Initial answer probability distribution for all comments. Should reflect actual labels for training set comments and
classifier predictions for development and test set comments
7: for all C E Tr U D U Te do
8: Create node representing C
9: CV +— IC
</listItem>
<figure confidence="0.904593833333333">
10: // CV: node C’s current probability distribution over possible answers
11: // IC: initial answer probability distribution for comment C
12: end for
13: for j = 1 to iterations do
14: for all node C E D U Te do
15: Add all edges targeting node C
� �
16: CV +— Norm(WIIC + WV k V Pk,C + WQ k QPk,C)
17: // VPk,C, QPk,C: kth VoterPair, and kth QuestionPair votes for node C
18: Remove all edges targeting node C
19: end for
20: end for
</figure>
<figureCaption confidence="0.99994">
Figure 1: Our label propagation algorithm.
</figureCaption>
<bodyText confidence="0.999787416666667">
One may be surprised to notice how we add
edges to the graph in the algorithm only to delete
them three lines later (lines 15 and 18 in Figure 1).
Though edges can be added at any point in the al-
gorithm, one benefit of using the label propagation
algorithm is that it is simple enough that it is not
necessary store all the edges in memory at once.
The only time we need to store an edge is when its
target is being voted on. This means that the label
propagation algorithm can handle large datasets
like ours with huge numbers of nodes and edges
without being prohibitively space-expensive.
</bodyText>
<sectionHeader confidence="0.999675" genericHeader="evaluation">
6 Evaluation
</sectionHeader>
<subsectionHeader confidence="0.997679">
6.1 Experimental Setup
</subsectionHeader>
<bodyText confidence="0.9999869">
We mentioned in Section 3 that we split our
dataset of 997,379 comments into a test set com-
prising about 20% of the dataset’s comments and
a training and development set comprising some
fraction of the remaining 80% of the comments.
We actually split the data up like this five different
times so that each comment appears in an experi-
ment’s test set exactly once. In this way, through
the use of five fold cross-validation, we can report
our results on the entire dataset.
</bodyText>
<subsectionHeader confidence="0.935612">
6.2 Results and Discussion
</subsectionHeader>
<bodyText confidence="0.998754147058823">
Figure 2a shows the accuracy of the predictions
made by various systems. First, let us compare
our first and second baselines. Recall that the first
baseline (B1) predicts that all test comments will
have the same label as the majority of training
comments, and the second baseline’s (B2) predic-
tions are the output of ME classifiers trained with a
generic feature set. As we can see from the graph,
at very small training set sizes, the standard set of
features supplied to B2 does little more than con-
fuse the ME learner, as it performs slightly but not
significantly worse6 than the first baseline when
the training/development set comprises only 25%
of the available data. This is understandable, as
25% of an average question’s available data is only
42 comments, an extremely small number of ex-
amples to learn from for most NLP tasks. Clearly
a better approach than the one provided by the sec-
ond baseline is needed. Though the average train-
ing set sizes at the 50%, 75%, and 100% levels are
still relatively small, B2 significantly outperforms
B1 at all these levels.
The small improvement sizes yielded by B2
may be attributable to some of the inherent dif-
ficulties of the problem, particularly that (1) it is
composed of so many (4,803) separate subprob-
lems that it is impractical for us to tailor a unique
feature set for each one, (2) the average question is
associated with a very small number of comments
(about 208), making it difficult to train a reason-
ably good classifier for any question, and (3) many
of the comments contain insufficient information
for inferring the underlying votes. Perhaps some
of our proposed extensions to B2 can help address
</bodyText>
<footnote confidence="0.982403">
6All significance tests are paired t-tests, with p &lt; 0.05.
Because we calculate a large number of significance results,
the p values we report are obtained using Holm-Bonferroni
multiple testing correction (Holm, 1979).
</footnote>
<page confidence="0.983443">
1133
</page>
<figure confidence="0.998506813953488">
Accuracy (%)
Accuracy (%)
25 50 75 100
Training/Development Set Size (%)
(a) Vote prediction.
25 50 75 100
Training/Development Set Size (%)
(b) Arbitrary User Vote Prediction.
70
69
68
67
66
65
64
63
62
B2+Dem+QPair+VPair
B2+Dem+VPair
B2+Dem+QPair
B2+QPair+VPair
B2+VPair
B2+QPair
B2+Dem
B2
B1
70
69
68
67
66
65
64
63
62
B1+Dem+QPair+VPair
B1+Dem+VPair
B1+Dem+QPair
B1+QPair+VPair
B1+VPair
B1+QPair
B1+Dem
B1
</figure>
<figureCaption confidence="0.999716">
Figure 2: Five-fold cross-validation vote prediction learning curves.
</figureCaption>
<bodyText confidence="0.9995512">
some of these problems.
The first improvement we proposed involved
exploiting demographic features provided by users
to help with our prediction tasks. When we com-
bine Dem and B2’s feature sets, the resulting
system (B2 + Dem) performs better than any of
the systems discussed thus far at all four train-
ing/development set size levels, yielding signifi-
cant improvements over B2 at all four levels. This
demonstrates that our demographic features are a
useful complement to a standard approach like the
one used by B2.
The second improvement we proposed involved
using a variation of the label propagation algo-
rithm to enforce QuestionPair constraints. Ques-
tionPair constraints, recall, allowed us to exploit
the observed voting patterns of users who voted
in the training set on any particular pair of ques-
tions. These constraints were expected to improve
our predictions for any user who voted on both
questions when at least one of their votes appeared
in the test set. System B2 + QPair corresponds
to following the algorithm in Figure 1, using sys-
tem B2’s ME classifiers to initialize a label prop-
agation graph, and then setting the VoterPair edge
weight (WV ) to 0, thus allowing only Question-
Pair constraints. When we compare this system to
B2, we see that the performance boost Question-
Pair constraints give us over the baseline is consis-
tently greater than the boost given by adding de-
mographic features to it (B2 + Dem) across all
training/development set sizes. The improvement
over B2 is even significant at the 75% and 100%
training/development set sizes.
The last improvement we proposed involved
adding VoterPair constraints to the label propaga-
tion graph. Recall that VoterPair constraints al-
lowed us to exploit how frequently we observed
two users agreeing with each other to predict
whether they will agree on any question they both
voted on. System B2 +VPair corresponds to fol-
lowing the label propagation algorithm using B2’s
ME classifiers to initialize the graph, then setting
the QuestionPair edge weight (WQ) to 0, thus al-
lowing only VoterPair constraints. The addition of
VoterPair constraints yields the largest significant
improvements over B2 at all four levels, indicating
that, in the absence of our other proposed improve-
ments, VoterPair edge constraints are the most im-
portant addition we can make to our baseline.
While we have now shown that each of our pro-
posed extensions yields significant improvements
over B2, this does not necessarily mean that each
one is useful in the presence of the others. For
example, it might be the case that QuestionPair
constraints and Demographic features correct the
same kinds of classification errors, and therefore it
may be sufficient to use either one or the other to
obtain good results, but using both is unnecessary.
To test how useful they are in each other’s pres-
</bodyText>
<page confidence="0.990004">
1134
</page>
<bodyText confidence="0.9998995">
ence, we perform the following experiment. First,
we run the algorithm using all three improvements
(B2 + Dem + QPair + VPair in Figure 2a). We
then run the same experiment three more times,
each time removing one of the three extensions.
By measuring how much performance decreases
when we remove each of the three improvements,
we can determine whether each improvement pro-
vides unique useful information, or whether the in-
formation it provides is already being provided by
one of the other improvements.
To see what happens when we remove demo-
graphic features from the full system, we need to
compare B2 +Dem+QPair +V Pair and B2 +
QPair +V Pair in Figure 2a. While the decrease
in performance after removing demographic fea-
tures was modest, the difference is nevertheless
significant at all four training/development set
sizes, suggesting that demographic features do
provide unique information to the system.
By comparing line B2 + Dem + QPair +
VPair to line B2 +Dem+V Pair, we can deter-
mine the impact of QuestionPair constraints. Re-
moving QuestionPair constraints also had a mod-
est impact on the full system’s performance, de-
creasing accuracy at all four training/development
set sizes, significantly so at the 50%, 75%, and
100% levels. Interestingly, the impact of Ques-
tionPair constraints appears to grow with the train-
ing set, while the demographic features appear
to have a greater impact when the training set is
small. We can see this by noting that the two lines
cross at around 55%. This suggests that Question-
Pair constraints are especially useful in problems
where it is cheap to obtain a lot of training data,
but in problems where the data has to be manually
annotated, demographic features are more useful.
Finally, we can compare line B2 + Dem +
QPair + VPair to line B2 + Dem + QPair to
see what happens when we remove VoterPair con-
straints from our system. This comparison illus-
trates that VoterPair constraints are by far the most
important improvement we removed from the full
system, as removing them yielded large significant
decreases at all four levels.
Though thus far we have only used it to analyze
the the contributions of different individual im-
provements, the full system B2+Dem+QPair+
VPair is interesting in itself. Of all the systems
we have constructed, it performs the best, yield-
ing improvements of up to 5.18% and 3.88% when
compared to B1 and B2 respectively. Its improve-
ments over both baselines are statistically signifi-
cant at all four training/development set sizes.
</bodyText>
<subsectionHeader confidence="0.999792">
6.3 Arbitrary User Vote Prediction
</subsectionHeader>
<bodyText confidence="0.9979189375">
One interesting question that we have not yet ad-
dressed is, is it possible to predict how a user
would vote on a question she has not yet seen?
This problem is interesting because an average
question receives votes from only 0.2% of the
users in our dataset, and thus a system for predict-
ing an arbitrary user’s vote would be able to pre-
dict the votes of the other 99.8% of users. A solu-
tion to this prediction problem would have practi-
cal applications in areas such as directed advertis-
ing (e.g., if we could predict how a user would vote
on the magazine question in Table 1, we would
have a better idea of what kinds of reading de-
vices/services would interest her).
We can mimic this problem with our dataset
by treating the comment text associated with test
votes as unseen since we cannot expect an arbi-
trary user to have commented on any particular
question we are interested in7. It does, however,
make sense for us to expect our arbitrary user to
have provided some personal demographic infor-
mation, and thus a system for making these types
of predictions could reasonably make use of de-
mographic features. Similarly, in this situation we
would expect to have knowledge of all users’ train-
ing set voting histories. Thus, it would also be rea-
sonable for our system to exploit the QuestionPair
and VoterPair constraints described in Section 5.
Thus, to test how well our system performs on this
task, we repeat all experiments from the previous
section while replacing B2 (which uses a ME clas-
sifier trained on comment-based features) with B1
(the most frequent baseline, which uses a ME clas-
sifier trained using only a bias feature). The results
of these experiments are shown in Figure 2b.
If we compare the results from B1 to B1+Dem
(which compliments B1’s bias feature with the de-
mographic feature set), we notice that B1 + Dem
is significantly worse than B1 at all training set
sizes. This confirms our suspicion from the pre-
7Although we are trying to mimic the situation in which
we predict how an arbitrary user would vote on an arbitrary
question, we caution that the vote data we train and evaluate
on was not obtained from a set of arbitrary SodaHead users. It
consists only of votes from users who chose which questions
they wanted to answer. For this reason, the data we train and
evaluate on for any question might not be a representative
sample of SodaHead users as a whole.
</bodyText>
<page confidence="0.973927">
1135
</page>
<bodyText confidence="0.999914821428572">
vious section that demographic features by them-
selves serve only to confuse the learner, though we
will see in a moment that they are a helpful sup-
plement to more sophisticated systems.
We can evaluate QuestionPair constraints in this
setting by comparing the results from B1 to B1 +
QPair. B1+QPair consistently outperforms B1
at all four training set sizes, significantly so at the
75% and 100% levels, and thus QuestionPair con-
straints are also a useful addition to our system.
VoterPair constraints can be evaluated in this
setting by comparing B1 to B1 + VPair. B1 +
VPair significantly outperforms B1 at all four
training set sizes, and from the graph it appears
to be our most beneficial improvement.
To evaluate whether demographic features are
useful in the presence of the other improve-
ments, we compare the full system, B1 + Dem +
QPair + VPair, to its corresponding version
without demographic features, B1 + QPair +
VPair. Though B1 + QPair + VPair signif-
icantly outperforms the full system at the 25%
training set size, the full system significantly out-
performs B1 + QPair + VPair at the 75% and
100% levels, indicating that in this setting, demo-
graphic features are useful in the presence of a
large training set.
We can evaluate the utility of QuestionPair con-
straints in this setting by comparing the full system
to B1 + Dem + VPair. When we remove Ques-
tionPair constraints, accuracy is consistently low-
ered at all four training set sizes, significantly so
at 50%, 75%, and 100%. This tells us that Ques-
tionPair constraints are useful in this setting.
We can evaluate how useful VoterPair con-
straints are by checking how much B1 + Dem +
V Pair+QPair’s performance drops when we re-
move VoterPair constraints from it, yielding B1 +
Dem + QPair. Performance drops considerably
and significantly at all four training set sizes after
removing VoterPair constraints, suggesting that in
this setting, VoterPair constraints are still the most
important of our proposed improvements.
Finally, while we have already established that
all our proposed improvements can improve per-
formance under both settings (comments visible
and comments invisible), it may be worthwhile
to compare the two sets of experiments to deter-
mine whether the comment features used in sys-
tems with B2 are useful.
A casual inspection of the two figures shows
that, broadly, each system that uses comment-
based features in Figure 2a tends to slightly out-
perform the most comparable system in Figure 2b.
At the low end of the curves, the two systems often
differ by about 1.0% in absolute accuracy, though
at the high end, the difference tends to be much
smaller, with the full system with comment fea-
tures outperforming the full system without com-
ment features by only 0.3%. Since in this setting
it is reasonable to assume a large training set, this
last result is the one we are most interested in, and
it suggests that our full system’s performance does
not suffer much due to the absence of comment
features.
One final observation we can make is that, when
comments are not visible, demographic features
appear to actively harm the performance of sys-
tems trained on a small amount of data, though
at larger training set sizes they are mostly help-
ful. We can tell this by comparing systems with
demographic features to systems without them in
Figure 2b (e.g., by comparing B1+Dem+QPair
to B1 + QPair or B1 + Dem + VPair to B1 +
VPair) at the 25% training set size. This is not
the case in the setting where comments are visi-
ble, as we see that demographic features always
appear helpful in Figure 2a. This reinforces the
notion that demographic features provide useful
information in general, but that they are by them-
selves too sparsely available to do more than con-
fuse the learner. They need to be supplemented by
other information sources in order for the learner
to draw correct conclusions.
</bodyText>
<sectionHeader confidence="0.998452" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.999997125">
We examined the task of vote prediction on com-
ments from the SodaHead website. To address this
task, we exploited not only information extracted
from the comments but also extra-textual informa-
tion, including demographic information and two
types of inter-comment constraints, QuestionPair
constraints and VoterPair constraints. Our exper-
iments involving 997,379 comments showed that
each of these extensions significantly improved a
baseline that exploited only textual information,
with VoterPair constraints being the most effective
and demographic information being the least ef-
fective. When used in combination, they obtained
up to a 3.88% improvement in absolute accuracy
over the baseline. To stimulate research on this
task, we make our dataset publicly available.
</bodyText>
<page confidence="0.990559">
1136
</page>
<sectionHeader confidence="0.998948" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.999972125">
We thank the three anonymous reviewers for their
detailed and insightful comments on an earlier
draft of this paper. This work was supported in
part by NSF Grants IIS-1147644 and IIS-1219142.
Any opinions, findings, conclusions or recommen-
dations expressed in this paper are those of the au-
thors and do not necessarily reflect the views or of-
ficial policies, either expressed or implied, of NSF.
</bodyText>
<sectionHeader confidence="0.998476" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999448618556701">
Sitaram Asur and Bernardo A. Huberman. 2010. Pre-
dicting the future with social media. In Proceedings
of the 2010 IEEE/WIC/ACM International Confer-
ence on Web Intelligence and Intelligent Agent Tech-
nology, pages 492–499.
Mohit Bansal, Claire Cardie, and Lillian Lee. 2008.
The power of negative thinking: Exploiting label
disagreement in the min-cut classification frame-
work. In COLING 2008: Companion Volume:
Posters, pages 15–18.
Clinton Burfoot, Steven Bird, and Timothy Baldwin.
2011. Collective classification of congressional
floor-debate transcripts. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 1506–1515.
John D. Burger, John Henderson, George Kim, and
Guido Zarrella. 2011. Gender discrimination on
twitter. In Proceedings of the 2011 Conference on
Empirical Methods in Natural Language Process-
ing, pages 1301–1309.
Marie-Catherine de Marneffe, Bill Maccartney, and
Christopher D. Manning. 2006. Generating typed
dependency parses from phrase structure parses. In
Proceedings of the Fifth International Conference
on Language Resources and Evaluation, pages 449–
454.
Jean E. Fox Tree and Josef C. Schrock. 1999. Dis-
course markers in spontaneous speech: Oh what a
difference an oh makes. Journal of Memory and
Language, 40:280–295.
Jean E. Fox Tree and Josef C. Schrock. 2002. Basic
meanings of you know and i mean. Journal ofPrag-
matics, 34:427–447.
Daniel Gayo-Avello, Panagiotis Takis Metaxas, and
Eni Mustafaraj. 2011. Limits of electoral predic-
tions using twitter. In Proceedings of the Fifth In-
ternational AAAI Conference on Weblogs and Social
Media, pages 490–493.
Martin Groen, Jan Noyes, and Frans Verstraten. 2010.
The effect of substituting discourse markers on their
role in dialogue. Discourse Processes: A Multidis-
ciplinary Journal, 47:388–420.
Kazi Saidul Hasan and Vincent Ng. 2013. Stance
classification of ideological debates: Data, mod-
els, features, and constraints. In Proceedings of
the Sixth International Joint Conference on Natural
Language Processing, pages 1348–1356.
Sture Holm. 1979. A simple sequentially rejective
multiple test procedure. Scandinavian Journal of
Statistics, 6:65–70.
Yue Lu, Hongning Wang, ChengXiang Zhai, and Dan
Roth. 2012. Unsupervised discovery of opposing
opinion networks from forum discussions. In Pro-
ceedings of the 21st ACM International Conference
on Information and Knowledge Management, pages
1642–1646.
Andrew Kachites McCallum. 2002. Mallet: A ma-
chine learning for language toolkit. http://mallet.cs.
umass.edu.
Saif Mohammad and Tony Yang. 2011. Tracking sen-
timent in mail: How genders differ on emotional
axes. In Proceedings of the 2nd Workshop on Com-
putational Approaches to Subjectivity and Sentiment
Analysis, pages 70–79.
Brendan O’Connor, Ramnath Balasubramanyan,
Bryan R. Routledge, and Noah A. Smith. 2010.
From tweets to polls: Linking text sentiment to
public opinion time series. In Proceedings of the
Fourth International AAAI Conference on Weblogs
and Social Media, pages 122–129.
Delip Rao and David Yarowsky. 2010. Detecting latent
user properties in social media. In Proceedings of
the NIPS workshop on Machine Learning for Social
Networks.
Swapna Somasundaran and Janyce Wiebe. 2010. Rec-
ognizing stances in ideological on-line debates. In
Proceedings of the NAACL HLT 2010 Workshop on
Computational Approaches to Analysis and Genera-
tion of Emotion in Text, pages 116–124.
Matt Thomas, Bo Pang, and Lillian Lee. 2006. Get out
the vote: Determining support or opposition from
Congressional floor-debate transcripts. In Proceed-
ings of the 2006 Conference on Empirical Methods
in Natural Language Processing, pages 327–335.
Andranik Tumasjan, Timm Sprenger, Philipp Sandner,
and Isabell Welpe. 2010. Predicting elections with
twitter: What 140 characters reveal about political
sentiment. In Proceedings of the Fourth Interna-
tional AAAI Conference on Weblogs and Social Me-
dia, pages 178–185.
Marilyn Walker, Pranav Anand, Rob Abbott, and Ricky
Grant. 2012a. Stance classification using dialogic
properties of persuasion. In Proceedings of the 2012
Conference of the North American Chapter of the
Association for Computational Linguistics: Human
Language Technologies, pages 592–596.
</reference>
<page confidence="0.872862">
1137
</page>
<reference confidence="0.999785208333334">
Marilyn A. Walker, Pranav Anand, Rob Abbott, Jean
E. Fox Tree, Craig Martell, and Joseph King. 2012b.
That is your evidence?: Classifying stance in on-
line political debate. Decision Support Systems,
53(4):719–729.
Yafang Wang, Bin Yang, Lizhen Qu, Marc Spaniol,
and Gerhard Weikum. 2011. Harvesting facts from
textual web sources by constrained label propaga-
tion. In Proceedings of the 20th ACM International
Conference on Information and Knowledge Man-
agement, pages 837–846.
Yafang Wang, Maximilian Dylla, Marc Spaniol, and
Gerhard Weikum. 2012. Coupling label propaga-
tion and constraints for temporal fact extraction. In
Proceedings of the ACL 2012 Conference Short Pa-
pers, pages 233–237.
Yiming Yang and Jan O. Pedersen. 1997. A compara-
tive study on feature selection in text categorization.
In Proceedings of the 14th International Conference
on Machine Learning, pages 412–420.
Xiaojin Zhu and Zoubin Ghahramani. 2002. Learning
from labeled and unlabeled data with label propaga-
tion. Technical Report CMU-CALD-02-107, CMU
CALD.
</reference>
<page confidence="0.99522">
1138
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.920633">
<title confidence="0.999057">Vote Prediction on Comments in Social Polls</title>
<author confidence="0.971245">Persing Ng</author>
<affiliation confidence="0.999293">Human Language Technology Research Institute University of Texas at Dallas</affiliation>
<address confidence="0.987605">Richardson, TX 75083-0688</address>
<abstract confidence="0.997945368421053">A poll consists of a question and a set of predefined answers from which voters can select. We present the new problem of vote prediction on comments, which involves determining which of these answers a voter selected given a comment she wrote after voting. To address this task, we exploit not only the information extracted from the comments but also extra-textual information such as user demographic information and inter-comment constraints. In an evaluation involving nearly one million comments collected from the popular SodaHead social polling website, we show that a vote prediction system that exploits only textual information can be improved significantly when extended with extra-textual information.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Sitaram Asur</author>
<author>Bernardo A Huberman</author>
</authors>
<title>Predicting the future with social media.</title>
<date>2010</date>
<booktitle>In Proceedings of the 2010 IEEE/WIC/ACM International Conference on Web Intelligence and Intelligent Agent Technology,</booktitle>
<pages>492--499</pages>
<contexts>
<context position="5768" citStr="Asur and Huberman (2010)" startWordPosition="921" endWordPosition="924">cts from the web (e.g., Wang et al. (2011) and Wang et al. (2012)). While we are the first to address the vote prediction task, other researchers have previously used social media to predict the outcomes of various events, primarily by analyzing Twitter data. For example, Tumasjan et al. (2010) and Gayo-Avello et al. (2011) performed the related task of predicting the outcomes of elections. Rather than predicting election outcomes, O’Connor et al. (2010) focused on finding correlations between measures derived from tweets and the outcomes of political events like elections and polls. Finally, Asur and Huberman (2010) predicted movies’ box office success. These tasks contrast with our task of vote prediction in that they are concerned with aggregate measures such as the fraction of the vote each candidate or party will win in an election or how much money a movie will make at the box office, whereas vote prediction is concerned with predicting how individual people will vote on a much wider variety of news/political topics. 2 Corpus SodaHead2 is a social polling website where users vote on and ask questions about a wide variety of topics ranging from the serious (e.g., “Should the 2http://www.sodahead.com </context>
</contexts>
<marker>Asur, Huberman, 2010</marker>
<rawString>Sitaram Asur and Bernardo A. Huberman. 2010. Predicting the future with social media. In Proceedings of the 2010 IEEE/WIC/ACM International Conference on Web Intelligence and Intelligent Agent Technology, pages 492–499.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mohit Bansal</author>
<author>Claire Cardie</author>
<author>Lillian Lee</author>
</authors>
<title>The power of negative thinking: Exploiting label disagreement in the min-cut classification framework.</title>
<date>2008</date>
<booktitle>In COLING 2008: Companion Volume: Posters,</booktitle>
<pages>15--18</pages>
<contexts>
<context position="3105" citStr="Bansal et al. (2008)" startWordPosition="497" endWordPosition="500">CreateDebate1 allow users to create profiles with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author constraints (e.g., Thomas et al. (2006), Bansal et al. (2008), Walker et al. (2012a), Hasan and Ng (2013)), which specify that two documents written by the same author for the same topic should have the same stance. However, in vote prediction, author constraints are not useful because a user is not permitted to cast more than one vote per question, unlike in stance prediction, where users may engage in a debate and therefore post more than once per debate topic. Consequently, we propose two new types of constraints for exploiting inter topic user voting patterns. One constraint involves pairs of authors and the other involves pairs of questions. These </context>
</contexts>
<marker>Bansal, Cardie, Lee, 2008</marker>
<rawString>Mohit Bansal, Claire Cardie, and Lillian Lee. 2008. The power of negative thinking: Exploiting label disagreement in the min-cut classification framework. In COLING 2008: Companion Volume: Posters, pages 15–18.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Clinton Burfoot</author>
<author>Steven Bird</author>
<author>Timothy Baldwin</author>
</authors>
<title>Collective classification of congressional floor-debate transcripts.</title>
<date>2011</date>
<booktitle>In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies,</booktitle>
<pages>1506--1515</pages>
<contexts>
<context position="4655" citStr="Burfoot et al., 2011" startWordPosition="742" endWordPosition="745">social media sites typically allow users to comment on multiple topics. Note that enforcing constraints involving two questions is by no means trivial, as the possible class values associated with the two comments may not necessarily be the same. Another contribution of our work lies in our adaptation of the label propagation algorithm (Zhu and Ghahramani, 2002) to enforce constraints for vote prediction. Recall that existing stance classification approaches enforce constraints using minimum cut (Thomas et al., 2006), integer linear programming (Lu et al., 2012), and loopy belief propagation (Burfoot et al., 2011). Our decision to employ label propagation stems in part from the inability of loopy belief propagation and integer linear programming to efficiently process the nearly one million comments we have, and in part from the inability of the traditional two-way minimum cut algorithm to handle multiclass classification. It is worth noting, however, that other variations of the label propagation algorithm have been proposed for unrelated NLP tasks such as automatically harvesting temporal facts from the web (e.g., Wang et al. (2011) and Wang et al. (2012)). While we are the first to address the vote </context>
</contexts>
<marker>Burfoot, Bird, Baldwin, 2011</marker>
<rawString>Clinton Burfoot, Steven Bird, and Timothy Baldwin. 2011. Collective classification of congressional floor-debate transcripts. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies, pages 1506–1515.</rawString>
</citation>
<citation valid="true">
<authors>
<author>John D Burger</author>
<author>John Henderson</author>
<author>George Kim</author>
<author>Guido Zarrella</author>
</authors>
<title>Gender discrimination on twitter.</title>
<date>2011</date>
<booktitle>In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>1301--1309</pages>
<contexts>
<context position="2680" citStr="Burger et al. (2011)" startWordPosition="431" endWordPosition="434">rmation for inferring the user’s vote, or in some cases may even be entirely absent. In light of this difficulty, we exploit two additional types of information in the prediction process. First, we employ demographic features derived from user profiles. Demographic features may be broadly useful for other opinion mining tasks such as stance classification (Somasundaran and Wiebe, 2010), as many social media websites like CreateDebate1 allow users to create profiles with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author constraints (e.g., Thomas et al. (2006), Bansal et al. (2008), Walker et al. (2012a), Hasan and Ng (2013)), which specify that two documents written by the same author for the same topic should have the same stance. However, in vote pre</context>
</contexts>
<marker>Burger, Henderson, Kim, Zarrella, 2011</marker>
<rawString>John D. Burger, John Henderson, George Kim, and Guido Zarrella. 2011. Gender discrimination on twitter. In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 1301–1309.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marie-Catherine de Marneffe</author>
<author>Bill Maccartney</author>
<author>Christopher D Manning</author>
</authors>
<title>Generating typed dependency parses from phrase structure parses.</title>
<date>2006</date>
<booktitle>In Proceedings of the Fifth International Conference on Language Resources and Evaluation,</booktitle>
<pages>449--454</pages>
<marker>de Marneffe, Maccartney, Manning, 2006</marker>
<rawString>Marie-Catherine de Marneffe, Bill Maccartney, and Christopher D. Manning. 2006. Generating typed dependency parses from phrase structure parses. In Proceedings of the Fifth International Conference on Language Resources and Evaluation, pages 449– 454.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jean E Fox Tree</author>
<author>Josef C Schrock</author>
</authors>
<title>Discourse markers in spontaneous speech: Oh what a difference an oh makes.</title>
<date>1999</date>
<journal>Journal of Memory and Language,</journal>
<pages>40--280</pages>
<contexts>
<context position="12115" citStr="Tree and Schrock, 1999" startWordPosition="1977" endWordPosition="1980">son, it makes sense to use features which have been shown to work well on other political classification problems. We therefore base our feature set on that used by Walker et al. (2012b) for political debate classification. Our features are described below. N-grams. Unigrams have been shown to perform well in ideological debates (Somasundaran and Wiebe, 2010), so we therefore present our classifiers with lemmatized unigram, bigram, and trigram features. We normalize the n-gram feature vector to unit length to avoid giving undue influence to longer comments. Cue Words. Based on other work (Fox Tree and Schrock, 1999; Fox Tree and Schrock, 2002; Groen et al., 2010; Walker et al., 2012b), we also present our classifiers with features representing the first lemmatized unigram, bigram, and trigram appearing in each comment. These may be useful in our task when, for example, a user’s comment begins with or entirely consists of a restatement of the answer she chose. So if the possible answers for a given question are “Yes” and “No”, a user might write in her comment “Yes. Because ...”, and this would make the “CueWord:Yes” feature useful for classifying this comment. Emotion Frequency. For each word in a comme</context>
</contexts>
<marker>Tree, Schrock, 1999</marker>
<rawString>Jean E. Fox Tree and Josef C. Schrock. 1999. Discourse markers in spontaneous speech: Oh what a difference an oh makes. Journal of Memory and Language, 40:280–295.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jean E Fox Tree</author>
<author>Josef C Schrock</author>
</authors>
<title>Basic meanings of you know and i mean.</title>
<date>2002</date>
<journal>Journal ofPragmatics,</journal>
<pages>34--427</pages>
<contexts>
<context position="12143" citStr="Tree and Schrock, 2002" startWordPosition="1982" endWordPosition="1985">eatures which have been shown to work well on other political classification problems. We therefore base our feature set on that used by Walker et al. (2012b) for political debate classification. Our features are described below. N-grams. Unigrams have been shown to perform well in ideological debates (Somasundaran and Wiebe, 2010), so we therefore present our classifiers with lemmatized unigram, bigram, and trigram features. We normalize the n-gram feature vector to unit length to avoid giving undue influence to longer comments. Cue Words. Based on other work (Fox Tree and Schrock, 1999; Fox Tree and Schrock, 2002; Groen et al., 2010; Walker et al., 2012b), we also present our classifiers with features representing the first lemmatized unigram, bigram, and trigram appearing in each comment. These may be useful in our task when, for example, a user’s comment begins with or entirely consists of a restatement of the answer she chose. So if the possible answers for a given question are “Yes” and “No”, a user might write in her comment “Yes. Because ...”, and this would make the “CueWord:Yes” feature useful for classifying this comment. Emotion Frequency. For each word in a comment, we used the NRC Emotion </context>
</contexts>
<marker>Tree, Schrock, 2002</marker>
<rawString>Jean E. Fox Tree and Josef C. Schrock. 2002. Basic meanings of you know and i mean. Journal ofPragmatics, 34:427–447.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Gayo-Avello</author>
</authors>
<title>Panagiotis Takis Metaxas, and Eni Mustafaraj.</title>
<date>2011</date>
<booktitle>In Proceedings of the Fifth International AAAI Conference on Weblogs and Social Media,</booktitle>
<pages>490--493</pages>
<marker>Gayo-Avello, 2011</marker>
<rawString>Daniel Gayo-Avello, Panagiotis Takis Metaxas, and Eni Mustafaraj. 2011. Limits of electoral predictions using twitter. In Proceedings of the Fifth International AAAI Conference on Weblogs and Social Media, pages 490–493.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Martin Groen</author>
<author>Jan Noyes</author>
<author>Frans Verstraten</author>
</authors>
<title>The effect of substituting discourse markers on their role in dialogue.</title>
<date>2010</date>
<booktitle>Discourse Processes: A Multidisciplinary Journal,</booktitle>
<pages>47--388</pages>
<contexts>
<context position="12163" citStr="Groen et al., 2010" startWordPosition="1986" endWordPosition="1989">shown to work well on other political classification problems. We therefore base our feature set on that used by Walker et al. (2012b) for political debate classification. Our features are described below. N-grams. Unigrams have been shown to perform well in ideological debates (Somasundaran and Wiebe, 2010), so we therefore present our classifiers with lemmatized unigram, bigram, and trigram features. We normalize the n-gram feature vector to unit length to avoid giving undue influence to longer comments. Cue Words. Based on other work (Fox Tree and Schrock, 1999; Fox Tree and Schrock, 2002; Groen et al., 2010; Walker et al., 2012b), we also present our classifiers with features representing the first lemmatized unigram, bigram, and trigram appearing in each comment. These may be useful in our task when, for example, a user’s comment begins with or entirely consists of a restatement of the answer she chose. So if the possible answers for a given question are “Yes” and “No”, a user might write in her comment “Yes. Because ...”, and this would make the “CueWord:Yes” feature useful for classifying this comment. Emotion Frequency. For each word in a comment, we used the NRC Emotion Word Lexicon 1129 (M</context>
</contexts>
<marker>Groen, Noyes, Verstraten, 2010</marker>
<rawString>Martin Groen, Jan Noyes, and Frans Verstraten. 2010. The effect of substituting discourse markers on their role in dialogue. Discourse Processes: A Multidisciplinary Journal, 47:388–420.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kazi Saidul Hasan</author>
<author>Vincent Ng</author>
</authors>
<title>Stance classification of ideological debates: Data, models, features, and constraints.</title>
<date>2013</date>
<booktitle>In Proceedings of the Sixth International Joint Conference on Natural Language Processing,</booktitle>
<pages>1348--1356</pages>
<contexts>
<context position="3149" citStr="Hasan and Ng (2013)" startWordPosition="505" endWordPosition="508">with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author constraints (e.g., Thomas et al. (2006), Bansal et al. (2008), Walker et al. (2012a), Hasan and Ng (2013)), which specify that two documents written by the same author for the same topic should have the same stance. However, in vote prediction, author constraints are not useful because a user is not permitted to cast more than one vote per question, unlike in stance prediction, where users may engage in a debate and therefore post more than once per debate topic. Consequently, we propose two new types of constraints for exploiting inter topic user voting patterns. One constraint involves pairs of authors and the other involves pairs of questions. These constraints are also potentially useful for </context>
</contexts>
<marker>Hasan, Ng, 2013</marker>
<rawString>Kazi Saidul Hasan and Vincent Ng. 2013. Stance classification of ideological debates: Data, models, features, and constraints. In Proceedings of the Sixth International Joint Conference on Natural Language Processing, pages 1348–1356.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sture Holm</author>
</authors>
<title>A simple sequentially rejective multiple test procedure.</title>
<date>1979</date>
<journal>Scandinavian Journal of Statistics,</journal>
<pages>6--65</pages>
<contexts>
<context position="30735" citStr="Holm, 1979" startWordPosition="5183" endWordPosition="5184">is impractical for us to tailor a unique feature set for each one, (2) the average question is associated with a very small number of comments (about 208), making it difficult to train a reasonably good classifier for any question, and (3) many of the comments contain insufficient information for inferring the underlying votes. Perhaps some of our proposed extensions to B2 can help address 6All significance tests are paired t-tests, with p &lt; 0.05. Because we calculate a large number of significance results, the p values we report are obtained using Holm-Bonferroni multiple testing correction (Holm, 1979). 1133 Accuracy (%) Accuracy (%) 25 50 75 100 Training/Development Set Size (%) (a) Vote prediction. 25 50 75 100 Training/Development Set Size (%) (b) Arbitrary User Vote Prediction. 70 69 68 67 66 65 64 63 62 B2+Dem+QPair+VPair B2+Dem+VPair B2+Dem+QPair B2+QPair+VPair B2+VPair B2+QPair B2+Dem B2 B1 70 69 68 67 66 65 64 63 62 B1+Dem+QPair+VPair B1+Dem+VPair B1+Dem+QPair B1+QPair+VPair B1+VPair B1+QPair B1+Dem B1 Figure 2: Five-fold cross-validation vote prediction learning curves. some of these problems. The first improvement we proposed involved exploiting demographic features provided by us</context>
</contexts>
<marker>Holm, 1979</marker>
<rawString>Sture Holm. 1979. A simple sequentially rejective multiple test procedure. Scandinavian Journal of Statistics, 6:65–70.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Lu</author>
<author>Hongning Wang</author>
<author>ChengXiang Zhai</author>
<author>Dan Roth</author>
</authors>
<title>Unsupervised discovery of opposing opinion networks from forum discussions.</title>
<date>2012</date>
<booktitle>In Proceedings of the 21st ACM International Conference on Information and Knowledge Management,</booktitle>
<pages>1642--1646</pages>
<contexts>
<context position="4602" citStr="Lu et al., 2012" startWordPosition="733" endWordPosition="736">ics ion mining tasks involving social media, as social media sites typically allow users to comment on multiple topics. Note that enforcing constraints involving two questions is by no means trivial, as the possible class values associated with the two comments may not necessarily be the same. Another contribution of our work lies in our adaptation of the label propagation algorithm (Zhu and Ghahramani, 2002) to enforce constraints for vote prediction. Recall that existing stance classification approaches enforce constraints using minimum cut (Thomas et al., 2006), integer linear programming (Lu et al., 2012), and loopy belief propagation (Burfoot et al., 2011). Our decision to employ label propagation stems in part from the inability of loopy belief propagation and integer linear programming to efficiently process the nearly one million comments we have, and in part from the inability of the traditional two-way minimum cut algorithm to handle multiclass classification. It is worth noting, however, that other variations of the label propagation algorithm have been proposed for unrelated NLP tasks such as automatically harvesting temporal facts from the web (e.g., Wang et al. (2011) and Wang et al.</context>
</contexts>
<marker>Lu, Wang, Zhai, Roth, 2012</marker>
<rawString>Yue Lu, Hongning Wang, ChengXiang Zhai, and Dan Roth. 2012. Unsupervised discovery of opposing opinion networks from forum discussions. In Proceedings of the 21st ACM International Conference on Information and Knowledge Management, pages 1642–1646.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andrew Kachites McCallum</author>
</authors>
<title>Mallet: A machine learning for language toolkit.</title>
<date>2002</date>
<note>http://mallet.cs. umass.edu.</note>
<contexts>
<context position="10752" citStr="McCallum, 2002" startWordPosition="1756" endWordPosition="1757">ajor inherent difficulties of our task is that it consists not of one, but of 4,803 separate multiclass classification problems (one for each question). As a result, our approach to the problem necessarily has to be somewhat generic, as it would be too time-consuming to develop an appropriate feature set for each question. 3.1 Baseline 1 Our first baseline’s (B1) approach employs 4,803 multiclass classifiers (one for each question). Each classifier is trained on one question’s training set, representing each comment using only a bias feature. Each of our classifiers is trained using MALLET’s (McCallum, 2002) implementation of maximum entropy (ME) classification. This is equivalent to merely counting the number of training set comments that voted for each possible answer, selecting the most frequent answer, then applying this label to all the comments in the test set. This majority baseline serves primarily to tell us how well our more sophisticated baseline performs. 3.2 Baseline 2 Our second baseline (B2) is constructed in exactly the same way as B1 except that each classifier is trained using both a bias feature and a standard set of feature types described below. 3.2.1 Features Since the quest</context>
</contexts>
<marker>McCallum, 2002</marker>
<rawString>Andrew Kachites McCallum. 2002. Mallet: A machine learning for language toolkit. http://mallet.cs. umass.edu.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Saif Mohammad</author>
<author>Tony Yang</author>
</authors>
<title>Tracking sentiment in mail: How genders differ on emotional axes.</title>
<date>2011</date>
<booktitle>In Proceedings of the 2nd Workshop on Computational Approaches to Subjectivity and Sentiment Analysis,</booktitle>
<pages>70--79</pages>
<contexts>
<context position="12786" citStr="Mohammad and Yang, 2011" startWordPosition="2091" endWordPosition="2094">0; Walker et al., 2012b), we also present our classifiers with features representing the first lemmatized unigram, bigram, and trigram appearing in each comment. These may be useful in our task when, for example, a user’s comment begins with or entirely consists of a restatement of the answer she chose. So if the possible answers for a given question are “Yes” and “No”, a user might write in her comment “Yes. Because ...”, and this would make the “CueWord:Yes” feature useful for classifying this comment. Emotion Frequency. For each word in a comment, we used the NRC Emotion Word Lexicon 1129 (Mohammad and Yang, 2011) to discover if the word conveys any emotion. Then, for each emotion or sentiment covered by the lexicon (anger, anticipation, disgust, fear, joy, sadness, surprise, trust, positive, or negative) ez, we construct a feature e c(ei) describin how much of the comment a total g consists of words conveying emotion ez, where C(ez) is the count of words in the comment bearing emotion ez and total is the number of words in the comment. To understand why this feature may be useful, consider the question “Does Sarah Palin deserve VP?” We suspect that users who post comments laden with words associated w</context>
</contexts>
<marker>Mohammad, Yang, 2011</marker>
<rawString>Saif Mohammad and Tony Yang. 2011. Tracking sentiment in mail: How genders differ on emotional axes. In Proceedings of the 2nd Workshop on Computational Approaches to Subjectivity and Sentiment Analysis, pages 70–79.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Brendan O’Connor</author>
<author>Ramnath Balasubramanyan</author>
<author>Bryan R Routledge</author>
<author>Noah A Smith</author>
</authors>
<title>From tweets to polls: Linking text sentiment to public opinion time series.</title>
<date>2010</date>
<booktitle>In Proceedings of the Fourth International AAAI Conference on Weblogs and Social Media,</booktitle>
<pages>122--129</pages>
<marker>O’Connor, Balasubramanyan, Routledge, Smith, 2010</marker>
<rawString>Brendan O’Connor, Ramnath Balasubramanyan, Bryan R. Routledge, and Noah A. Smith. 2010. From tweets to polls: Linking text sentiment to public opinion time series. In Proceedings of the Fourth International AAAI Conference on Weblogs and Social Media, pages 122–129.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Delip Rao</author>
<author>David Yarowsky</author>
</authors>
<title>Detecting latent user properties in social media.</title>
<date>2010</date>
<booktitle>In Proceedings of the NIPS workshop on Machine Learning for Social Networks.</booktitle>
<contexts>
<context position="2658" citStr="Rao and Yarowsky (2010)" startWordPosition="427" endWordPosition="430">ontains insufficient information for inferring the user’s vote, or in some cases may even be entirely absent. In light of this difficulty, we exploit two additional types of information in the prediction process. First, we employ demographic features derived from user profiles. Demographic features may be broadly useful for other opinion mining tasks such as stance classification (Somasundaran and Wiebe, 2010), as many social media websites like CreateDebate1 allow users to create profiles with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author constraints (e.g., Thomas et al. (2006), Bansal et al. (2008), Walker et al. (2012a), Hasan and Ng (2013)), which specify that two documents written by the same author for the same topic should have the same stance</context>
</contexts>
<marker>Rao, Yarowsky, 2010</marker>
<rawString>Delip Rao and David Yarowsky. 2010. Detecting latent user properties in social media. In Proceedings of the NIPS workshop on Machine Learning for Social Networks.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Swapna Somasundaran</author>
<author>Janyce Wiebe</author>
</authors>
<title>Recognizing stances in ideological on-line debates.</title>
<date>2010</date>
<booktitle>In Proceedings of the NAACL HLT 2010 Workshop on Computational Approaches to Analysis and Generation of Emotion in Text,</booktitle>
<pages>116--124</pages>
<contexts>
<context position="2448" citStr="Somasundaran and Wiebe, 2010" startWordPosition="393" endWordPosition="396">s about what kind of content/ads related to the question the user would like to see. Unfortunately, a major difficulty of vote prediction arises from the casual nature of discussion in social media. A comment often contains insufficient information for inferring the user’s vote, or in some cases may even be entirely absent. In light of this difficulty, we exploit two additional types of information in the prediction process. First, we employ demographic features derived from user profiles. Demographic features may be broadly useful for other opinion mining tasks such as stance classification (Somasundaran and Wiebe, 2010), as many social media websites like CreateDebate1 allow users to create profiles with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author cons</context>
<context position="11854" citStr="Somasundaran and Wiebe, 2010" startWordPosition="1935" endWordPosition="1938">sifier is trained using both a bias feature and a standard set of feature types described below. 3.2.1 Features Since the questions in our dataset come from the News &amp; Politics category of the SodaHead website, many of the questions’ topics are political. For that reason, it makes sense to use features which have been shown to work well on other political classification problems. We therefore base our feature set on that used by Walker et al. (2012b) for political debate classification. Our features are described below. N-grams. Unigrams have been shown to perform well in ideological debates (Somasundaran and Wiebe, 2010), so we therefore present our classifiers with lemmatized unigram, bigram, and trigram features. We normalize the n-gram feature vector to unit length to avoid giving undue influence to longer comments. Cue Words. Based on other work (Fox Tree and Schrock, 1999; Fox Tree and Schrock, 2002; Groen et al., 2010; Walker et al., 2012b), we also present our classifiers with features representing the first lemmatized unigram, bigram, and trigram appearing in each comment. These may be useful in our task when, for example, a user’s comment begins with or entirely consists of a restatement of the answe</context>
</contexts>
<marker>Somasundaran, Wiebe, 2010</marker>
<rawString>Swapna Somasundaran and Janyce Wiebe. 2010. Recognizing stances in ideological on-line debates. In Proceedings of the NAACL HLT 2010 Workshop on Computational Approaches to Analysis and Generation of Emotion in Text, pages 116–124.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matt Thomas</author>
<author>Bo Pang</author>
<author>Lillian Lee</author>
</authors>
<title>Get out the vote: Determining support or opposition from Congressional floor-debate transcripts.</title>
<date>2006</date>
<booktitle>In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing,</booktitle>
<pages>327--335</pages>
<contexts>
<context position="3083" citStr="Thomas et al. (2006)" startWordPosition="493" endWordPosition="496">l media websites like CreateDebate1 allow users to create profiles with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author constraints (e.g., Thomas et al. (2006), Bansal et al. (2008), Walker et al. (2012a), Hasan and Ng (2013)), which specify that two documents written by the same author for the same topic should have the same stance. However, in vote prediction, author constraints are not useful because a user is not permitted to cast more than one vote per question, unlike in stance prediction, where users may engage in a debate and therefore post more than once per debate topic. Consequently, we propose two new types of constraints for exploiting inter topic user voting patterns. One constraint involves pairs of authors and the other involves pair</context>
<context position="4556" citStr="Thomas et al., 2006" startWordPosition="725" endWordPosition="728">tar. c�2014 Association for Computational Linguistics ion mining tasks involving social media, as social media sites typically allow users to comment on multiple topics. Note that enforcing constraints involving two questions is by no means trivial, as the possible class values associated with the two comments may not necessarily be the same. Another contribution of our work lies in our adaptation of the label propagation algorithm (Zhu and Ghahramani, 2002) to enforce constraints for vote prediction. Recall that existing stance classification approaches enforce constraints using minimum cut (Thomas et al., 2006), integer linear programming (Lu et al., 2012), and loopy belief propagation (Burfoot et al., 2011). Our decision to employ label propagation stems in part from the inability of loopy belief propagation and integer linear programming to efficiently process the nearly one million comments we have, and in part from the inability of the traditional two-way minimum cut algorithm to handle multiclass classification. It is worth noting, however, that other variations of the label propagation algorithm have been proposed for unrelated NLP tasks such as automatically harvesting temporal facts from the</context>
</contexts>
<marker>Thomas, Pang, Lee, 2006</marker>
<rawString>Matt Thomas, Bo Pang, and Lillian Lee. 2006. Get out the vote: Determining support or opposition from Congressional floor-debate transcripts. In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing, pages 327–335.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Andranik Tumasjan</author>
<author>Timm Sprenger</author>
<author>Philipp Sandner</author>
<author>Isabell Welpe</author>
</authors>
<title>Predicting elections with twitter: What 140 characters reveal about political sentiment.</title>
<date>2010</date>
<booktitle>In Proceedings of the Fourth International AAAI Conference on Weblogs and Social Media,</booktitle>
<pages>178--185</pages>
<contexts>
<context position="5439" citStr="Tumasjan et al. (2010)" startWordPosition="870" endWordPosition="873">nearly one million comments we have, and in part from the inability of the traditional two-way minimum cut algorithm to handle multiclass classification. It is worth noting, however, that other variations of the label propagation algorithm have been proposed for unrelated NLP tasks such as automatically harvesting temporal facts from the web (e.g., Wang et al. (2011) and Wang et al. (2012)). While we are the first to address the vote prediction task, other researchers have previously used social media to predict the outcomes of various events, primarily by analyzing Twitter data. For example, Tumasjan et al. (2010) and Gayo-Avello et al. (2011) performed the related task of predicting the outcomes of elections. Rather than predicting election outcomes, O’Connor et al. (2010) focused on finding correlations between measures derived from tweets and the outcomes of political events like elections and polls. Finally, Asur and Huberman (2010) predicted movies’ box office success. These tasks contrast with our task of vote prediction in that they are concerned with aggregate measures such as the fraction of the vote each candidate or party will win in an election or how much money a movie will make at the box</context>
</contexts>
<marker>Tumasjan, Sprenger, Sandner, Welpe, 2010</marker>
<rawString>Andranik Tumasjan, Timm Sprenger, Philipp Sandner, and Isabell Welpe. 2010. Predicting elections with twitter: What 140 characters reveal about political sentiment. In Proceedings of the Fourth International AAAI Conference on Weblogs and Social Media, pages 178–185.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marilyn Walker</author>
<author>Pranav Anand</author>
<author>Rob Abbott</author>
<author>Ricky Grant</author>
</authors>
<title>Stance classification using dialogic properties of persuasion.</title>
<date>2012</date>
<booktitle>In Proceedings of the 2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies,</booktitle>
<pages>592--596</pages>
<contexts>
<context position="3126" citStr="Walker et al. (2012" startWordPosition="501" endWordPosition="504">ers to create profiles with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author constraints (e.g., Thomas et al. (2006), Bansal et al. (2008), Walker et al. (2012a), Hasan and Ng (2013)), which specify that two documents written by the same author for the same topic should have the same stance. However, in vote prediction, author constraints are not useful because a user is not permitted to cast more than one vote per question, unlike in stance prediction, where users may engage in a debate and therefore post more than once per debate topic. Consequently, we propose two new types of constraints for exploiting inter topic user voting patterns. One constraint involves pairs of authors and the other involves pairs of questions. These constraints are also </context>
<context position="11677" citStr="Walker et al. (2012" startWordPosition="1910" endWordPosition="1913">o tell us how well our more sophisticated baseline performs. 3.2 Baseline 2 Our second baseline (B2) is constructed in exactly the same way as B1 except that each classifier is trained using both a bias feature and a standard set of feature types described below. 3.2.1 Features Since the questions in our dataset come from the News &amp; Politics category of the SodaHead website, many of the questions’ topics are political. For that reason, it makes sense to use features which have been shown to work well on other political classification problems. We therefore base our feature set on that used by Walker et al. (2012b) for political debate classification. Our features are described below. N-grams. Unigrams have been shown to perform well in ideological debates (Somasundaran and Wiebe, 2010), so we therefore present our classifiers with lemmatized unigram, bigram, and trigram features. We normalize the n-gram feature vector to unit length to avoid giving undue influence to longer comments. Cue Words. Based on other work (Fox Tree and Schrock, 1999; Fox Tree and Schrock, 2002; Groen et al., 2010; Walker et al., 2012b), we also present our classifiers with features representing the first lemmatized unigram, </context>
</contexts>
<marker>Walker, Anand, Abbott, Grant, 2012</marker>
<rawString>Marilyn Walker, Pranav Anand, Rob Abbott, and Ricky Grant. 2012a. Stance classification using dialogic properties of persuasion. In Proceedings of the 2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 592–596.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Marilyn A Walker</author>
<author>Pranav Anand</author>
<author>Rob Abbott</author>
<author>Jean E Fox Tree</author>
<author>Craig Martell</author>
<author>Joseph King</author>
</authors>
<title>That is your evidence?: Classifying stance in online political debate. Decision Support Systems,</title>
<date>2012</date>
<volume>53</volume>
<issue>4</issue>
<contexts>
<context position="3126" citStr="Walker et al. (2012" startWordPosition="501" endWordPosition="504">ers to create profiles with similar demographic information. Previous work has attempted to predict such latent features (e.g., Rao and Yarowsky (2010), Burger et al. (2011)) rather than employing them for opinion mining tasks. Second, we exploit inter-comment constraints to help us perform joint inference over votes on different questions. Note that previous work on debate stance recognition has also employed constraints to improve the inference process. Specifically, in stance prediction, it is typical to employ so-called author constraints (e.g., Thomas et al. (2006), Bansal et al. (2008), Walker et al. (2012a), Hasan and Ng (2013)), which specify that two documents written by the same author for the same topic should have the same stance. However, in vote prediction, author constraints are not useful because a user is not permitted to cast more than one vote per question, unlike in stance prediction, where users may engage in a debate and therefore post more than once per debate topic. Consequently, we propose two new types of constraints for exploiting inter topic user voting patterns. One constraint involves pairs of authors and the other involves pairs of questions. These constraints are also </context>
<context position="11677" citStr="Walker et al. (2012" startWordPosition="1910" endWordPosition="1913">o tell us how well our more sophisticated baseline performs. 3.2 Baseline 2 Our second baseline (B2) is constructed in exactly the same way as B1 except that each classifier is trained using both a bias feature and a standard set of feature types described below. 3.2.1 Features Since the questions in our dataset come from the News &amp; Politics category of the SodaHead website, many of the questions’ topics are political. For that reason, it makes sense to use features which have been shown to work well on other political classification problems. We therefore base our feature set on that used by Walker et al. (2012b) for political debate classification. Our features are described below. N-grams. Unigrams have been shown to perform well in ideological debates (Somasundaran and Wiebe, 2010), so we therefore present our classifiers with lemmatized unigram, bigram, and trigram features. We normalize the n-gram feature vector to unit length to avoid giving undue influence to longer comments. Cue Words. Based on other work (Fox Tree and Schrock, 1999; Fox Tree and Schrock, 2002; Groen et al., 2010; Walker et al., 2012b), we also present our classifiers with features representing the first lemmatized unigram, </context>
</contexts>
<marker>Walker, Anand, Abbott, Tree, Martell, King, 2012</marker>
<rawString>Marilyn A. Walker, Pranav Anand, Rob Abbott, Jean E. Fox Tree, Craig Martell, and Joseph King. 2012b. That is your evidence?: Classifying stance in online political debate. Decision Support Systems, 53(4):719–729.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yafang Wang</author>
<author>Bin Yang</author>
<author>Lizhen Qu</author>
<author>Marc Spaniol</author>
<author>Gerhard Weikum</author>
</authors>
<title>Harvesting facts from textual web sources by constrained label propagation.</title>
<date>2011</date>
<booktitle>In Proceedings of the 20th ACM International Conference on Information and Knowledge Management,</booktitle>
<pages>837--846</pages>
<contexts>
<context position="5186" citStr="Wang et al. (2011)" startWordPosition="828" endWordPosition="831">near programming (Lu et al., 2012), and loopy belief propagation (Burfoot et al., 2011). Our decision to employ label propagation stems in part from the inability of loopy belief propagation and integer linear programming to efficiently process the nearly one million comments we have, and in part from the inability of the traditional two-way minimum cut algorithm to handle multiclass classification. It is worth noting, however, that other variations of the label propagation algorithm have been proposed for unrelated NLP tasks such as automatically harvesting temporal facts from the web (e.g., Wang et al. (2011) and Wang et al. (2012)). While we are the first to address the vote prediction task, other researchers have previously used social media to predict the outcomes of various events, primarily by analyzing Twitter data. For example, Tumasjan et al. (2010) and Gayo-Avello et al. (2011) performed the related task of predicting the outcomes of elections. Rather than predicting election outcomes, O’Connor et al. (2010) focused on finding correlations between measures derived from tweets and the outcomes of political events like elections and polls. Finally, Asur and Huberman (2010) predicted movies’</context>
</contexts>
<marker>Wang, Yang, Qu, Spaniol, Weikum, 2011</marker>
<rawString>Yafang Wang, Bin Yang, Lizhen Qu, Marc Spaniol, and Gerhard Weikum. 2011. Harvesting facts from textual web sources by constrained label propagation. In Proceedings of the 20th ACM International Conference on Information and Knowledge Management, pages 837–846.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yafang Wang</author>
<author>Maximilian Dylla</author>
<author>Marc Spaniol</author>
<author>Gerhard Weikum</author>
</authors>
<title>Coupling label propagation and constraints for temporal fact extraction.</title>
<date>2012</date>
<booktitle>In Proceedings of the ACL 2012 Conference Short Papers,</booktitle>
<pages>233--237</pages>
<contexts>
<context position="5209" citStr="Wang et al. (2012)" startWordPosition="833" endWordPosition="836"> al., 2012), and loopy belief propagation (Burfoot et al., 2011). Our decision to employ label propagation stems in part from the inability of loopy belief propagation and integer linear programming to efficiently process the nearly one million comments we have, and in part from the inability of the traditional two-way minimum cut algorithm to handle multiclass classification. It is worth noting, however, that other variations of the label propagation algorithm have been proposed for unrelated NLP tasks such as automatically harvesting temporal facts from the web (e.g., Wang et al. (2011) and Wang et al. (2012)). While we are the first to address the vote prediction task, other researchers have previously used social media to predict the outcomes of various events, primarily by analyzing Twitter data. For example, Tumasjan et al. (2010) and Gayo-Avello et al. (2011) performed the related task of predicting the outcomes of elections. Rather than predicting election outcomes, O’Connor et al. (2010) focused on finding correlations between measures derived from tweets and the outcomes of political events like elections and polls. Finally, Asur and Huberman (2010) predicted movies’ box office success. Th</context>
</contexts>
<marker>Wang, Dylla, Spaniol, Weikum, 2012</marker>
<rawString>Yafang Wang, Maximilian Dylla, Marc Spaniol, and Gerhard Weikum. 2012. Coupling label propagation and constraints for temporal fact extraction. In Proceedings of the ACL 2012 Conference Short Papers, pages 233–237.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yiming Yang</author>
<author>Jan O Pedersen</author>
</authors>
<title>A comparative study on feature selection in text categorization.</title>
<date>1997</date>
<booktitle>In Proceedings of the 14th International Conference on Machine Learning,</booktitle>
<pages>412--420</pages>
<contexts>
<context position="15907" citStr="Yang and Pedersen (1997)" startWordPosition="2586" endWordPosition="2589"> expected to name a politician in her comment. It would make sense for users choosing this option to have written longer responses since they have to name and possibly explain their choice to users who might not necessarily know who their chosen politician is. 3.2.2 Feature Selection Because some of the feature types (n-grams, cue words, dependencies, and emotion dependencies) described in the previous subsection are expected to generate a large number of non-predictive features, we trim some of the most irrelevant features out of the feature set to avoid memory problems. Therefore, following Yang and Pedersen (1997), for each question we calculate the information gain of each feature of these types on the training set. We then remove those features having the lowest information gain as well as those features occurring less than ten times in the dataset. Early experiments showed that 1,000 was a reasonable number of features to keep, so for all experiments we keep only the top 1,000 features of these types. Note that we do not apply feature selection to emotion frequency or post information features, as each of these sets consists of a small number of real-valued features. 4 Demographic Features As mentio</context>
</contexts>
<marker>Yang, Pedersen, 1997</marker>
<rawString>Yiming Yang and Jan O. Pedersen. 1997. A comparative study on feature selection in text categorization. In Proceedings of the 14th International Conference on Machine Learning, pages 412–420.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xiaojin Zhu</author>
<author>Zoubin Ghahramani</author>
</authors>
<title>Learning from labeled and unlabeled data with label propagation.</title>
<date>2002</date>
<tech>Technical Report CMU-CALD-02-107, CMU CALD.</tech>
<contexts>
<context position="4398" citStr="Zhu and Ghahramani, 2002" startWordPosition="702" endWordPosition="705">eatedebate.com/ 1127 Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1127–1138, October 25-29, 2014, Doha, Qatar. c�2014 Association for Computational Linguistics ion mining tasks involving social media, as social media sites typically allow users to comment on multiple topics. Note that enforcing constraints involving two questions is by no means trivial, as the possible class values associated with the two comments may not necessarily be the same. Another contribution of our work lies in our adaptation of the label propagation algorithm (Zhu and Ghahramani, 2002) to enforce constraints for vote prediction. Recall that existing stance classification approaches enforce constraints using minimum cut (Thomas et al., 2006), integer linear programming (Lu et al., 2012), and loopy belief propagation (Burfoot et al., 2011). Our decision to employ label propagation stems in part from the inability of loopy belief propagation and integer linear programming to efficiently process the nearly one million comments we have, and in part from the inability of the traditional two-way minimum cut algorithm to handle multiclass classification. It is worth noting, however</context>
<context position="21855" citStr="Zhu and Ghahramani, 2002" startWordPosition="3602" endWordPosition="3605">eorge W. Bush, we can guess that they will also agree on a question about Barack Obama. Similarly, if they disagreed on all those questions, they are likely to disagree on the last question. A system that takes into account this kind of information could correctly classify an otherwise difficult comment if it knows how another user voted on this question and also knows how often the two users agree on other questions. We call the kind of constraint described here a VoterPair constraint. In order to enforce both kinds of constraints, we introduce a variation of the label propagation algorithm (Zhu and Ghahramani, 2002). In our version of the label propagation algorithm, each comment in our dataset is represented by a node in a graph. Each node is associated with a probability distribution indicating the likelihood that the 1131 comment belongs to each of its question’s possible answers. Thus, when we initialize the graph, each training set node’s probability distribution is set to reflect its comment’s actual label (with a probability of 1 for the comment’s actual label and 0 for each other answer), and each development or test set node’s probability distribution is set to the value predicted by another cla</context>
</contexts>
<marker>Zhu, Ghahramani, 2002</marker>
<rawString>Xiaojin Zhu and Zoubin Ghahramani. 2002. Learning from labeled and unlabeled data with label propagation. Technical Report CMU-CALD-02-107, CMU CALD.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>