<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000003">
<title confidence="0.993533">
Autocorrection Of Arabic Common Errors For Large Text Corpus
</title>
<author confidence="0.99477">
Taha Zerrouki
</author>
<affiliation confidence="0.7831442">
Bouira University, Bouira,
Algeria
The National Computer Sci-
ence Engineering School
(ESI), Algiers, Algeria
</affiliation>
<email confidence="0.997382">
t_zerrouki@esi.dz
</email>
<note confidence="0.604804">
QALB-2014 Shared Task
</note>
<title confidence="0.378455">
Khaled Alhawaity
</title>
<author confidence="0.471629">
Tabuk University, KSA
</author>
<affiliation confidence="0.478032">
al-
</affiliation>
<email confidence="0.995293">
howity@hotmail.com
</email>
<author confidence="0.904801">
Amar Balla
</author>
<affiliation confidence="0.620066">
The National Computer Sci-
ence Engineering School
(ESI), Algiers, Algeria
</affiliation>
<email confidence="0.90016">
a_balla@esi٫dz
</email>
<sectionHeader confidence="0.993945" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999864928571429">
Automatic correction of misspelled words
means offering a single proposal to correct
a mistake, for example, switching two let-
ters, omitting letter or a key press. In Ara-
bic, there are some typical common errors
based on letter errors, such as confusing in
the form of Hamza ةﺰﻤھ, confusion between
Daad دﺎﺿ and Za ءﺎﻇ, and the omission dots
with Yeh ءﺎﯾ and Teh ءﺎﺗ .
So we propose in this paper a system de-
scription of a mechanism for automatic
correction of common errors in Arabic
based on rules, by using two methods, a
list of words and regular expressions.
</bodyText>
<keyword confidence="0.964518">
Keywords: AutoCorrect, spell checking, Arabic
language processing.
</keyword>
<sectionHeader confidence="0.999761" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999655266666667">
Spell check is the most important functions of
correct writing, whether manual or assisted by
programs, it detects errors and suggests correc-
tions.
Conventional spelling checkers detect typ-
ing errors simply by comparing each token of a
text against a dictionary of words that are
known to be correctly spelled.
Any token that matches an element of the
dictionary, possibly after some minimal mor-
phological analysis, is deemed to be correctly
spelled; any token that matches no element is
flagged as a possible error, with near-matches
displayed as suggested corrections (Hirst,
2005).
</bodyText>
<sectionHeader confidence="0.918371" genericHeader="introduction">
2 Auto-correction
</sectionHeader>
<bodyText confidence="0.974745705882353">
An auto-correction mechanism watches out for
certain predefined “errors” as the user types,
replacing them with a “correction” and giving
no indication or warning of the change.
Such mechanisms are intended for un-
doubted typing errors for which only one cor-
rection is plausible, such as correcting acco-
modate* to accommodate (Hirst, 2005).
In Arabic, we found some common errors
types, like the confusion in Hamza forms, e.g.
the word Isti&apos;maal (لﺎﻤﻌﺘﺳإ*) must be written by
a simple Alef, not Alef with Hamza below.
This error can be classed as a kind of errors
and not a simple error in a word (Shaalan,
2003, Habash, 2011).
Spellchecking and autocorrection are widely
applicable for tasks such as:
</bodyText>
<listItem confidence="0.997001333333333">
• word- processing
• Post-processing Optical Character
Recognition.
• Correction of large content site like
Wikipedia.
• Correction of corpora.
• Search queries
• Mobile auto-completion and autocor-
rection programs.
</listItem>
<sectionHeader confidence="0.999438" genericHeader="method">
3 Related works
</sectionHeader>
<bodyText confidence="0.964534285714286">
Current works on autocorrection in Arabic
are limited; there are some works on improv-
ing spell checking to select one plausible cor-
rection especially for correcting large texts like
corpus. In English, Deorowicz (2005) had
worked on correcting spelling errors by model-
ing their causes, he propose to classify mis-
</bodyText>
<page confidence="0.951789">
127
</page>
<bodyText confidence="0.931804772727273">
Proceedings of the EMNLP 2014 Workshop on Arabic Natural Langauge Processing (ANLP), pages 127–131,
October 25, 2014, Doha, Qatar. c�2014 Association for Computational Linguistics
takes causes in order to improve replacement
suggestion.
In Arabic, Microsoft office provides an au-
tocorrect word list of common errors, which is
limited and not studied.
Google search engine had improved its
search algorithm for Arabic query by using
some rules on letters which can be mistaken,
for better words split based on letters proper-
ties, for example if we type [لاﺎﻤﺠﻟاﺔﻌﺋااار]*, the
engine can give results for “Rae&apos;at alJamaal”
[لاﺎﻤﺠﻟاﺔﻌﺋااار]*and [لﺎﻤﺠﻟا ﺔﻌﺋار]. , some other
example: “Altarbia wa alta&apos;lim”, “Google”,
“Jaridat alahraam”, [ ، *[ﻞﻗوﻮﻗ] ، *[ماﺮھﻻاةﺪﯾﺮﺟ
ﻢﯿﯿﻠﻌﺘﻟاوﺔﯿﺑﺮﺘﻟا ] ]*.
Google Arabia says in its blog, that “this
improvement which looked very simple, en-
hance search in Arabic language by 10%
which is in real an impressive change” (Ham-
mad, 2010).
</bodyText>
<sectionHeader confidence="0.979608" genericHeader="method">
4 Our approach
</sectionHeader>
<bodyText confidence="0.998929166666667">
We have launched our first project about au-
tocorrection for a special objective to enhance
Wikipedia article spell checking. Wikipedia is
a large text database written by thousands of
persons with different language skill levels and
with multiple origins, which make a lot of mis-
takes. The idea is to provide an automatic
script which can detect common errors by us-
ing regular expressions and a word replace-
ment list1.
This objective can be extended to answer
other needs for users in office, chat, tweets,
etc.
The idea is to use a non-ambiguous regular
expressions or word list, to prevent common
errors, while writing or as an automated script
for large texts data.
As we say above, our method is based on:
- Regular expressions which can be used to
identify errors and give one replacement.
- Replacement list which contains the mis-
spelled word, and the exact correction for this
case, this way is used for cases which can&apos;t be
modeled as regular expression.
</bodyText>
<subsectionHeader confidence="0.983388">
4.1 Regular Expressions
</subsectionHeader>
<bodyText confidence="0.9958067">
We use regular expression pattern to detect.errors
in words by using word weight (Wazn) and affixes.
For example we can detect that words with the
1 The script is named AkhtaBot, which is applied
to arabic wikipedia, the Akhtabot is available
on http://ar.wikipedia.org/wiki/مﺪﺨﺘﺴﻣ:AkhtaBot
weight INFI&apos;AL لﺎﻌﻔﻧا must be written by Hamza
Wasl, and we consider the form لﺎﻌﻔﻧإ* as wrong.
Then, we represent all forms of this weight with all
possible affixes.
</bodyText>
<table confidence="0.988406666666667">
Suffixes Weight prefixes
&amp;6 &amp;C.A &amp;4 &amp;CA &amp;C.M �����A � &amp;� &amp;�A &amp;� ...
U &amp;d &amp;LA &amp;4...
</table>
<tableCaption confidence="0.997609">
Table 1 Infi&apos;aal wheight with its affixation
</tableCaption>
<table confidence="0.620485">
# rules for JUﻌﻔﻧا
ur&apos;\b( نإ(|لا)(|ب|ك)(|ف|و(\w\w)ا(\w)(ﻦﯿﺗ|ة |تا |ﻦﯾ)(|ي |)\b&apos;
ur&apos;\b( نإ(|ﻞﻟ)(|ف|و(\w\w)ا(\w)(ة|ﻦﯿﺗ |تا |ﻦﯾ)(|ي|)\b&apos;
ur&apos;\b( نإ( |ل |ب|ك)(|ف|و (\w\w)ا(\w)(
ﮭﺗا|ﻚﺗ|ﺎﮭﺗ|ﮫﺗ|ﺎﻨﺗ |ﻦﻜﺗ |ﻦﮭﺗ|ﻢﻜﺗ|ﻢﮭﺗ|ﺎﻤﻜﺗ|ﺎﻤﮭﺗ|ﺎھ |ك |ه|ﺎﻧ |ﻦﻛ |ﻦھ|ﻢﻛ|ﻢھ|ﺎﻤﻛ|ﺎﻤھ)(|ي
ﻚﺗا|ﺎﮭﺗا|ﮫﺗا|ﺎﻨﺗا |ﻦﻜﺗا |ﻦﮭﺗا|ﻢﻜﺗا|ﻢﮭﺗا|ﺎﻤﻜﺗا|ﺎﻣ |)\b&apos;
ur&apos;\b( نإ(|لا)(|ف|و (\w\w)ا(\w)( نو |نﺎﺗ |ﻦﯿﺗ |نا |ﻦﯾ)(|ي |)\b&apos;
ur&apos;\b( نإ(|ف|و (\w\w)ا(\w)( ا |ًا |ا(ً(|ي|)\b&apos;
</table>
<tableCaption confidence="0.548678">
Table 2 Rules for the Infi&apos;al weight in all forms
</tableCaption>
<bodyText confidence="0.8787175">
By regular expressions we have modeled the
following cases (cf. ):
</bodyText>
<listItem confidence="0.9943855">
• words with weights (infi&apos;al and ifti&apos;al
لﺎﻌﺘﻓاو لﺎﻌﻔﻧا)
• Words with Alef Maksura followed by
Hamza, for example ﺊﺳ will be cor-
rected ad ءﻲﺳ.
• words with Teh Marbuta misplaced,
like ﻢﻠﻌﻟاﺔﺳرﺪﻣ to be corrected to ﺔﺳرﺪﻣ
ﻢﻠﻌﻟا.
</listItem>
<table confidence="0.999656176470588">
Regular expression replacement
# removing kashida (Tatweel)
ur&apos;([\u0621-\u063F\u0641- ur&apos;\1\2&apos;
\u064A])\u0640+([\u0621-
\u063F\u0641-\u064A])&apos;
# rules for JUﻌﻔﻧا
ur&apos;\b( نإ(|لا)(|ب|ك)(|ف|و(\w\w)ا(\w)( ur&apos;\1\2\3 \نا4\ا5\6\7&apos;
ﻦﯿﺗ|ة|تا |ﻦﯾ)(|ي|)\b&apos;
ur&apos;\b( نإ(|ﻞﻟ)(|ف|و(\w\w)ا(\w)( ur&apos;\1\2 \نا3 \ا4\5\6&apos;
ة |ﻦﯿﺗ |تا |ﻦﯾ)(|ي|)\b&apos;
ur&apos;\b( نإ( |ل |ب|ك)(|ف|و(\w\w)ا(\w)( ur&apos;\1\2 \نا3 \ا4\5\6&apos;
ﺗ|ﺎﻤﻜﺗ|ﺎﻤﮭﺗ|ﺎھ |ك |ه|ﺎﻧ |ﻦﻛ |ﻦھ|ﻢﻛ|ﻢھ|ﺎﻤﻛ|ﺎﻤھ)(|ي
ﻜﺗا|ﻢﮭﺗا|ﺎﻤﻜﺗا|ﺎﻤﮭﺗا|ﻚﺗ|ﺎﮭﺗ|ﮫﺗ|ﺎﻨﺗ |ﻦﻜﺗ |ﻦﮭﺗ|ﻢﻜﺗ|ﻢھ
ﻚﺗا|ﺎﮭﺗا|ﮫﺗا|ﺎﻨﺗا |ﻦﻜﺗا |ﻦﮭﺗا|م |)\b&apos;
ur&apos;\b( نإ(|لا)(|ف|و(\w\w)ا(\w)( ur&apos;\1\2 \نا3 \ا4\5\6&apos;
نو |نﺎﺗ |ﻦﯿﺗ |نا |ﻦﯾ)(|ي|)\b&apos;
ur&apos;\b( نإ(|ف|و(\w\w)ا(\w)(ا |ًا|ا(ً(|ي|)\b&apos; ur&apos;\1 \نا2\ا3\4\5&apos;
</table>
<tableCaption confidence="0.999415">
Table 3 Rules expressed by regular expressions.
</tableCaption>
<subsectionHeader confidence="0.710453">
4.2 Wordlist
</subsectionHeader>
<bodyText confidence="0.9952105">
Most common mistakes cannot be repre-
sented as regular expressions, such as errors in
</bodyText>
<page confidence="0.992224">
128
</page>
<bodyText confidence="0.996762285714286">
the confusion between the Dhad and Za, and
omitted dots on Teh and Yeh, such as in the
ﮫﺒﺘﻜﻤﻟا * and *ﻰﻓ, So we resort to build a list of
common misspelled words.
To build an autocorrect word list, we sup-
pose to use statistical extraction from a corpus,
but we think that&apos;s not possible in Arabic lan-
guage, because the common mistakes can have
certain pattern and style, for example, people
who can&apos;t differentiate between Dhad and Zah,
make mistakes in all words containing these
letters. Mistakes on Hamzat are not limited to
some words, but can be typical and occur ac-
cording to letters not especially for some
words.
For this reason, we propose to build a word
list based on Attia (2012) spell-checking word
list, by generating errors for common letters
errors, then filter resulted word list to obtain an
autocorrect word list without ambiguity.
How to build generated word list:
</bodyText>
<listItem confidence="0.959429214285714">
1- take a correct word list
2- select candidate words:
➢ words start by Hamza Qat&apos; or Wasl.
➢ words end by Yeh or Teh marbuta.
➢ Words contain Dhad or Zah.
3- Make errors on words by replacing can-
didate letters by errors.
4- Spell check the wordlist, and eliminate
correct words, because some modified words
can be correct, for example, if we take the
word ﻞﺿَ Dhalla ، then modify it to ﻞﻇ Zalla ,
the modified word exists in the dictionary, then
we exclude it from autocorrect wordlist, and
we keep only misspelled modified words.
</listItem>
<table confidence="0.998756857142857">
words modified Spellcheck Add to
word list
ﺔﺒﺘﻜﻤﺑ ﮫﺒﺘﻜﻤﺑ True
ﺔﺒﺘﻜﻤﻟا ﮫﺒﺘﻜ ﻤﻟا False ﮫﺒﺘﻜﻤﻟا
ﺔﺒﺘﻜﻤﻟﺎﺑ ﮫﺒﺘﻜﻤﻟﺎﺑ False ﮫﺒﺘﻜﻤﻟﺎﺑ
ﺔﺒﺘﻜﻤﻟﺎﺑو ﮫﺒﺘﻜﻤﻟﺎﺑو False ﮫﺒﺘﻜﻤﻟﺎﺑو
ﺔﺒﺘﻜﻣو ﮫﺒﺘﻜﻣو True
</table>
<tableCaption confidence="0.9868">
Table 4 Example of word errors generating
</tableCaption>
<bodyText confidence="0.97381175">
For example, if we have the word مﻼﺳإ Islam, it can
be written as مﻼﺳا Islam by mistake because that
have the same pronociation. We can generate errors
on words by appling some rule:
</bodyText>
<listItem confidence="0.998431428571429">
• Alef with Hamza above ﻊﻄﻗ ةﺰﻤھ &lt;=&gt; Alef
ﻞﺻو ةﺰﻤھ
• Alef with Hamza below ﻒﻟﻷا ﺖﺤﺗ ةﺰﻤھ
&lt;=&gt; Alef ﻞﺻو ةﺰﻤھ
• Dhah ض &lt;=&gt; Zah ظ
• The Marbuta ة &lt;=&gt; Heh ـھ
• Yeh ي &lt;=&gt; Alef Maksura ى
</listItem>
<bodyText confidence="0.5030325">
We suppose that we have the following word
list, this list is chosen to illustrate some cases.
</bodyText>
<equation confidence="0.411645466666667">
مﻼﺳإ
مﻼﻇ
ﻞﻇ
ﺔﺒﺘﻜﻣ
ﺔﺒﺘﻜﻤﻟا
مﻼﻋإ
For every word, we map an mistaken word,
then we get a list like this:
Word candidate word
مﻼﺳإ مﻼﺳا
مﻼﻇ مﻼﺿ
ﻞﻇ ﻞﺿ
ﺔﺒﺘﻜﻣ ﮫﺒﺘﻜﻣ
ﺔﺒﺘﻜﻤﻟا ﮫﺒﺘﻜﻤﻟا
مﻼﻋإ مﻼﻋا
</equation>
<bodyText confidence="0.825835666666667">
We note that some candidate words are right, then
we remove it, and the remaining words consititute
the autocorrect wordlist
</bodyText>
<equation confidence="0.9188878">
Word candidate word
مﻼﺳإ مﻼﺳا
مﻼﻇ مﻼﺿ
ﺔﺒﺘﻜﻤﻟا ﮫﺒﺘﻜﻤﻟ ا
مﻼﻋإ مﻼﻋا
</equation>
<bodyText confidence="0.879762111111111">
The following list (cf. Table5 ) shows the
number of words in each type of errors,
Error type Words count
words started by Hamza Qat&apos; 101853
words ended by Yeh 700198
words ended by Teh marbuta 152210
words contained Dhad 396506
words contained Zah 94395
Total 1445162
</bodyText>
<tableCaption confidence="0.618236">
Table 5 Errors categories in wordlist
</tableCaption>
<bodyText confidence="0.998231666666667">
The large number of words is due to the mul-
tiple forms per word, which avoids the mor-
phological analysis, in such programs.
</bodyText>
<subsectionHeader confidence="0.979505">
Customized Wordlist
</subsectionHeader>
<bodyText confidence="0.998318666666667">
Large number of replacement cases in gener-
ated autocorrect list encourages us to make an
improvement to generate customized list for
specific cases in order to reduce list length.
We apply the following algorithm to generate
customized list from large text data set:
</bodyText>
<listItem confidence="0.99287325">
1. Extract misspelled words from dataset
by using Hunspell spellchecker.
2. Generate suggestions given by Hun-
spell
</listItem>
<page confidence="0.946499">
129
</page>
<listItem confidence="0.9950658">
3. Study suggestions to choose the best
one in hypothesis that words have
common errors on letters according to
modified letters.
4. Exclude ambiguous cases.
</listItem>
<bodyText confidence="0.992699333333333">
The automatically generated word list is used
to autocorrect the dataset instead of default
word list
</bodyText>
<sectionHeader confidence="0.5588" genericHeader="method">
5 Tools and resources
</sectionHeader>
<bodyText confidence="0.6677145">
In our program we have used the following
resources:
</bodyText>
<listItem confidence="0.996414">
• Arabic word list for spell checking con-
taining 9 million Arabic words, from Attia
works (2012).
• a simple Python script to generate errors.
• Hunspell spellchecker program with
Ayaspell dictionary (Hadjir 2009, Zer-
rouki, 2013). and Attia spellchecking
wordlist (2012).
• our autocorrect program named Ghalatawi2
( cf. a screenshot on Figure 1) ٫
• A script to select best suggestion from
Hunspell correction suggestions to gener-
ate customized autocorrect list.
</listItem>
<figureCaption confidence="0.9238115">
Figure 1 Ghalatawi program, autocorrection
example
</figureCaption>
<sectionHeader confidence="0.993532" genericHeader="evaluation">
6 Evaluation
</sectionHeader>
<bodyText confidence="0.960500648648649">
In order to evaluate the performance of auto-
matic correction program, we used the data set
provided in the shared task test (Behrang,
2014). After that autocorrect the texts by Ga-
latawi program based on regular expressions
and a wordlist.
For this evaluation we have used two auto-
correct word lists:
- a generic word list generated from Attia
wordlist, this wordlist is used for general pur-
poses. This word list is noted in evaluation as
“STANDARD”.
- a customized wordlist based on dataset, by
generating a special word list according to data
set, in order to improve auto correction and
avoid unnecessary replacement. this wordlist is
noted in evaluation as “CUSTOMIZED”.
The customized autocorrect word list is built
in the same way as STANDARD, by replacing
the source dictionary by misspelled words
from QALB corpus (Zaghouani, 2014).
How customized list is built from dataset?
1- Hunspell detects 3463 unrepeated mis-
spelled word in the dataset, like
* فﻻا ، *ﻦﯿﯿﻜﯾﺮﻣﻼﻟ
ﻲﺑﻮﯿﺛإا
ﻒﺳاا ,
ﺐﻌﺸﻟاا
ﻞﺗﺎﻘﻟاا
ﻦﯾﺮھﺎﻈﺘﻤﻟاا ,
ﻮﻋﺪﻤﻟاا ,
مﻮﺳﺮﻤﻟاا ، ﻦﯿﻧﺪﻤﻟاا ,
2- Hunspell generates suggestions for mis-
spelled words, like
@(#) International Ispell Ver-
sion 3.2.06 (but really Hun-
spell 1.3.2)
</bodyText>
<equation confidence="0.944816333333333">
ﻦﯿﯿﻜﯾﺮﻣﻸﻟ :4 1 ﻦﯿﯿﻜﯾﺮﻣﻼﻟ &amp;
،فﻻإ ،فﻵأ ،فﻷأ ،قﻻأ ،فﻻأ ،فﻵا ،فﻷا :1 15 فﻻا &amp;
فﻼﻏ ،فﻼﺗ ،فﻼﻟ ،ﺎﻓﻻ ،فﻵآ ،فﻷآ ،فﻻآ ،قﻻإ
</equation>
<bodyText confidence="0.999062625">
3- the script can select all words with one sug-
gestion, and words with near suggestion as a
common error. The script has select only 1727
non ambiguous case (not repeated).
The customized autocorrected list is used in
test as CUSTOMIZED.
We got the following results (cf. Table 6) by
using the M2 scorer (Dahlmeier et al 2012):
</bodyText>
<table confidence="0.999007">
Training Test
STAND. CUST. STAND. CUST.
Precision 0.6785 0.7383 0.698 0.7515
Recall 0.1109 0.2280 0.1233 0.2315
F_1.0 0.1906 0.3484 0.2096 0.35
</table>
<tableCaption confidence="0.995476">
Table 6 Training dataset evaluation
</tableCaption>
<bodyText confidence="0.92806675">
We note that the customized wordlist give
us precision and recall better than the use of
standard wordlist.
Example
</bodyText>
<sectionHeader confidence="0.997627" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.9883624">
2 The Ghalatawi autocorrect program is available
as an open source program at
http://ghalatawi.sourceforge.net
AutoCorrect for words is to propose a one cor-
rection for common errors in writing.
</bodyText>
<page confidence="0.989511">
130
</page>
<bodyText confidence="0.999950272727273">
In Arabic there are the following common
mistakes: failure to differentiate between
Hamza Wasl and Qat&apos;, confusion between the
Dhah and Zah, and the omission of dots on
Teh and under Yeh.
We have tried in this paper to find a way to
adjust these errors automatically without hu-
man review, using a list of words and regular
expressions to detect and correct errors.
This technique has been tried on the QALB
corpus and gave mentioned results.
</bodyText>
<sectionHeader confidence="0.999143" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998541403846154">
Hadjir،I٫ &amp;quot;Towards an open source arabic spell
checker”, magister in Natural language process-
ing, scientific and technique research center to
arabic language development, 2009.
Zerrouki T, &amp;quot;Improving the spell checking dic-
tionary by users feedback&amp;quot; A meeting of experts
check the spelling and grammar and composition
automation, Higher Institute of Applied Science
and Technology of Damascus, the Arab Organi-
zation for Education, Science and Culture, Da-
mascus, April 18 to 20, 2011.
Deorowicz S٫, Marcin G. Ciura, Correcting Spell-
ing Errors By Modeling Their Causes. Int. J.
Appl. Math. Comput. Sci., 2005, Vol. 15, No. 2,
275–285
Hammad M٫ and Mohamed Alhawari, recent im-
provement of arabic language search, Google
Arabia Blog, Google company, 2010
http://google-arabia.blogspot.com/.
K Shaalan, A Allah, Towards automatic spell
checking for Arabic... - Conference on Lan-
guage Engineering, 2003 - claes.sci.eg
Graeme Hirst And Alexander Budanitsky, Correct-
ing real-word spelling errors by restoring lexical
cohesion, Natural Language Engineering 11 (1):
87–111, 2005 Cambridge University Press
Nizar Habash, Ryan M. Roth, Using Deep Mor-
phology to Improve Automatic Error Detection
in Arabic Handwriting Recognition, ACL, page
875-884. The Association for Computer Linguis-
tics, (2011)
Behrang Mohit, Alla Rozovskaya, Wajdi Zag-
houani, Ossama Obeid, and Nizar Habash ,
2014. The First shared Task on Automatic Text
Correction for Arabic.
Wajdi Zaghouani, Behrang Mohit, Nizar Habash,
Ossama Obeid, Nadi Tomeh, Alla Rozovskaya,
Noura Farra, Sarah Alkuhlani, and Kemal
Oflazer. 2014. Large Scale Arabic Error Annota-
tion: Guidelines and Framework. In Proceedings
of the Ninth International Conference on Lan-
guage Resources and Evaluation
(LREC’14), Reykjavik, Iceland.
Golding and Roth. “A Winnow based approach to
Context-Sensitive Spelling Correction”. 1999.
Dahlmeier, Daniel and Ng, Hwee Tou. 2012. Bet-
ter evaluation for grammatical error correction.
In Proceedings of NAACL.
Habash, Nizar Y. &amp;quot;Introduction to Arabic natural
language processing.&amp;quot; Synthesis Lectures on
Human Language Technologies 3.1 (2010): 1-
187
</reference>
<page confidence="0.997922">
131
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.074371">
<title confidence="0.998499">Autocorrection Of Arabic Common Errors For Large Text Corpus</title>
<author confidence="0.971442">Taha</author>
<affiliation confidence="0.897089666666667">Bouira University, National Computer ence Engineering</affiliation>
<address confidence="0.993949">(ESI), Algiers, Algeria</address>
<email confidence="0.957266">t_zerrouki@esi.dz</email>
<author confidence="0.310149">QALB- Shared Task</author>
<affiliation confidence="0.6980585">Khaled Tabuk University,</affiliation>
<email confidence="0.998459">howity@hotmail.com</email>
<author confidence="0.812013">Amar</author>
<affiliation confidence="0.8387145">National Computer ence Engineering</affiliation>
<address confidence="0.980798">(ESI), Algiers, Algeria</address>
<abstract confidence="0.99504705882353">Automatic correction of misspelled words means offering a single proposal to correct a mistake, for example, switching two letters, omitting letter or a key press. In Arabic, there are some typical common errors based on letter errors, such as confusing in form of Hamza confusion between Za and the omission dots Yeh Teh So we propose in this paper a system description of a mechanism for automatic correction of common errors in Arabic based on rules, by using two methods, a list of words and regular expressions. spell checking, Arabic language processing.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Hadjir،I٫</author>
</authors>
<title>Towards an open source arabic spell checker”, magister in Natural language processing, scientific and technique research center to arabic language development,</title>
<date>2009</date>
<marker>Hadjir،I٫, 2009</marker>
<rawString>Hadjir،I٫ &amp;quot;Towards an open source arabic spell checker”, magister in Natural language processing, scientific and technique research center to arabic language development, 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Zerrouki</author>
</authors>
<title>Improving the spell checking dictionary by users feedback&amp;quot; A meeting of experts check the spelling and grammar and composition automation,</title>
<date></date>
<booktitle>Higher Institute of Applied Science and Technology of Damascus, the Arab Organization for Education, Science and Culture,</booktitle>
<volume>18</volume>
<location>Damascus,</location>
<marker>Zerrouki, </marker>
<rawString>Zerrouki T, &amp;quot;Improving the spell checking dictionary by users feedback&amp;quot; A meeting of experts check the spelling and grammar and composition automation, Higher Institute of Applied Science and Technology of Damascus, the Arab Organization for Education, Science and Culture, Damascus, April 18 to 20, 2011.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Deorowicz S٫</author>
<author>Marcin G Ciura</author>
</authors>
<title>Correcting Spelling Errors By Modeling Their Causes.</title>
<date>2005</date>
<journal>Int. J. Appl. Math. Comput. Sci.,</journal>
<volume>15</volume>
<pages>275--285</pages>
<marker>S٫, Ciura, 2005</marker>
<rawString>Deorowicz S٫, Marcin G. Ciura, Correcting Spelling Errors By Modeling Their Causes. Int. J. Appl. Math. Comput. Sci., 2005, Vol. 15, No. 2, 275–285</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hammad M٫</author>
<author>Mohamed Alhawari</author>
</authors>
<title>recent improvement of arabic language search, Google Arabia Blog, Google company,</title>
<date>2010</date>
<note>http://google-arabia.blogspot.com/.</note>
<marker>M٫, Alhawari, 2010</marker>
<rawString>Hammad M٫ and Mohamed Alhawari, recent improvement of arabic language search, Google Arabia Blog, Google company, 2010 http://google-arabia.blogspot.com/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Shaalan</author>
</authors>
<title>A Allah, Towards automatic spell checking for Arabic...</title>
<date>2003</date>
<booktitle>Conference on Language Engineering,</booktitle>
<note>claes.sci.eg</note>
<contexts>
<context position="2250" citStr="Shaalan, 2003" startWordPosition="356" endWordPosition="357">on An auto-correction mechanism watches out for certain predefined “errors” as the user types, replacing them with a “correction” and giving no indication or warning of the change. Such mechanisms are intended for undoubted typing errors for which only one correction is plausible, such as correcting accomodate* to accommodate (Hirst, 2005). In Arabic, we found some common errors types, like the confusion in Hamza forms, e.g. the word Isti&apos;maal (لﺎﻤﻌﺘﺳإ*) must be written by a simple Alef, not Alef with Hamza below. This error can be classed as a kind of errors and not a simple error in a word (Shaalan, 2003, Habash, 2011). Spellchecking and autocorrection are widely applicable for tasks such as: • word- processing • Post-processing Optical Character Recognition. • Correction of large content site like Wikipedia. • Correction of corpora. • Search queries • Mobile auto-completion and autocorrection programs. 3 Related works Current works on autocorrection in Arabic are limited; there are some works on improving spell checking to select one plausible correction especially for correcting large texts like corpus. In English, Deorowicz (2005) had worked on correcting spelling errors by modeling their </context>
</contexts>
<marker>Shaalan, 2003</marker>
<rawString>K Shaalan, A Allah, Towards automatic spell checking for Arabic... - Conference on Language Engineering, 2003 - claes.sci.eg</rawString>
</citation>
<citation valid="true">
<authors>
<author>Graeme Hirst</author>
</authors>
<title>And Alexander Budanitsky, Correcting real-word spelling errors by restoring lexical cohesion,</title>
<date>2005</date>
<journal>Natural Language Engineering</journal>
<volume>11</volume>
<issue>1</issue>
<pages>87--111</pages>
<publisher>Cambridge University Press</publisher>
<contexts>
<context position="1620" citStr="Hirst, 2005" startWordPosition="250" endWordPosition="251">e processing. 1 Introduction Spell check is the most important functions of correct writing, whether manual or assisted by programs, it detects errors and suggests corrections. Conventional spelling checkers detect typing errors simply by comparing each token of a text against a dictionary of words that are known to be correctly spelled. Any token that matches an element of the dictionary, possibly after some minimal morphological analysis, is deemed to be correctly spelled; any token that matches no element is flagged as a possible error, with near-matches displayed as suggested corrections (Hirst, 2005). 2 Auto-correction An auto-correction mechanism watches out for certain predefined “errors” as the user types, replacing them with a “correction” and giving no indication or warning of the change. Such mechanisms are intended for undoubted typing errors for which only one correction is plausible, such as correcting accomodate* to accommodate (Hirst, 2005). In Arabic, we found some common errors types, like the confusion in Hamza forms, e.g. the word Isti&apos;maal (لﺎﻤﻌﺘﺳإ*) must be written by a simple Alef, not Alef with Hamza below. This error can be classed as a kind of errors and not a simple </context>
</contexts>
<marker>Hirst, 2005</marker>
<rawString>Graeme Hirst And Alexander Budanitsky, Correcting real-word spelling errors by restoring lexical cohesion, Natural Language Engineering 11 (1): 87–111, 2005 Cambridge University Press</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nizar Habash</author>
<author>Ryan M Roth</author>
</authors>
<title>Using Deep Morphology to Improve Automatic Error Detection in Arabic Handwriting Recognition, ACL,</title>
<date>2011</date>
<pages>875--884</pages>
<marker>Habash, Roth, 2011</marker>
<rawString>Nizar Habash, Ryan M. Roth, Using Deep Morphology to Improve Automatic Error Detection in Arabic Handwriting Recognition, ACL, page 875-884. The Association for Computer Linguistics, (2011)</rawString>
</citation>
<citation valid="true">
<authors>
<author>Behrang Mohit</author>
<author>Alla Rozovskaya</author>
<author>Wajdi Zaghouani</author>
<author>Ossama Obeid</author>
<author>Nizar Habash</author>
</authors>
<date>2014</date>
<booktitle>The First shared Task on Automatic Text Correction for Arabic.</booktitle>
<marker>Mohit, Rozovskaya, Zaghouani, Obeid, Habash, 2014</marker>
<rawString>Behrang Mohit, Alla Rozovskaya, Wajdi Zaghouani, Ossama Obeid, and Nizar Habash , 2014. The First shared Task on Automatic Text Correction for Arabic.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wajdi Zaghouani</author>
</authors>
<title>Behrang Mohit, Nizar Habash, Ossama Obeid, Nadi Tomeh, Alla Rozovskaya, Noura Farra, Sarah Alkuhlani, and Kemal Oflazer.</title>
<date>2014</date>
<booktitle>In Proceedings of the Ninth International Conference on Language Resources and Evaluation (LREC’14),</booktitle>
<location>Reykjavik, Iceland.</location>
<contexts>
<context position="12036" citStr="Zaghouani, 2014" startWordPosition="1919" endWordPosition="1920"> and a wordlist. For this evaluation we have used two autocorrect word lists: - a generic word list generated from Attia wordlist, this wordlist is used for general purposes. This word list is noted in evaluation as “STANDARD”. - a customized wordlist based on dataset, by generating a special word list according to data set, in order to improve auto correction and avoid unnecessary replacement. this wordlist is noted in evaluation as “CUSTOMIZED”. The customized autocorrect word list is built in the same way as STANDARD, by replacing the source dictionary by misspelled words from QALB corpus (Zaghouani, 2014). How customized list is built from dataset? 1- Hunspell detects 3463 unrepeated misspelled word in the dataset, like * فﻻا ، *ﻦﯿﯿﻜﯾﺮﻣﻼﻟ ﻲﺑﻮﯿﺛإا ﻒﺳاا , ﺐﻌﺸﻟاا ﻞﺗﺎﻘﻟاا ﻦﯾﺮھﺎﻈﺘﻤﻟاا , ﻮﻋﺪﻤﻟاا , مﻮﺳﺮﻤﻟاا ، ﻦﯿﻧﺪﻤﻟاا , 2- Hunspell generates suggestions for misspelled words, like @(#) International Ispell Version 3.2.06 (but really Hunspell 1.3.2) ﻦﯿﯿﻜﯾﺮﻣﻸﻟ :4 1 ﻦﯿﯿﻜﯾﺮﻣﻼﻟ &amp; ،فﻻإ ،فﻵأ ،فﻷأ ،قﻻأ ،فﻻأ ،فﻵا ،فﻷا :1 15 فﻻا &amp; فﻼﻏ ،فﻼﺗ ،فﻼﻟ ،ﺎﻓﻻ ،فﻵآ ،فﻷآ ،فﻻآ ،قﻻإ 3- the script can select all words with one suggestion, and words with near suggestion as a common error. The script has select only 1727 non am</context>
</contexts>
<marker>Zaghouani, 2014</marker>
<rawString>Wajdi Zaghouani, Behrang Mohit, Nizar Habash, Ossama Obeid, Nadi Tomeh, Alla Rozovskaya, Noura Farra, Sarah Alkuhlani, and Kemal Oflazer. 2014. Large Scale Arabic Error Annotation: Guidelines and Framework. In Proceedings of the Ninth International Conference on Language Resources and Evaluation (LREC’14), Reykjavik, Iceland.</rawString>
</citation>
<citation valid="true">
<authors>
<author>“A</author>
</authors>
<title>Winnow based approach to Context-Sensitive Spelling Correction”.</title>
<date>1999</date>
<marker>“A, 1999</marker>
<rawString>Golding and Roth. “A Winnow based approach to Context-Sensitive Spelling Correction”. 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daniel Dahlmeier</author>
<author>Hwee Tou Ng</author>
</authors>
<title>Better evaluation for grammatical error correction.</title>
<date>2012</date>
<booktitle>In Proceedings of NAACL.</booktitle>
<marker>Dahlmeier, Ng, 2012</marker>
<rawString>Dahlmeier, Daniel and Ng, Hwee Tou. 2012. Better evaluation for grammatical error correction. In Proceedings of NAACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nizar Y Habash</author>
</authors>
<title>Introduction to Arabic natural language processing.&amp;quot;</title>
<date>2010</date>
<journal>Synthesis Lectures on Human Language Technologies</journal>
<volume>3</volume>
<pages>1--187</pages>
<marker>Habash, 2010</marker>
<rawString>Habash, Nizar Y. &amp;quot;Introduction to Arabic natural language processing.&amp;quot; Synthesis Lectures on Human Language Technologies 3.1 (2010): 1-187</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>