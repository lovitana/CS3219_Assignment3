<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.938314">
An ACG Analysis of the G-TAG Generation Process∗
</title>
<note confidence="0.7189718">
Laurence Danlos Aleksandre Maskharashvili and Sylvain Pogodalla
Universit´e Paris Diderot (Paris 7) INRIA Villers-l`es-Nancy, France
ALPAGE, INRIA Paris–Rocquencourt Universit´e de Lorraine,
Institut Universitaire de France, Paris, France CNRS, LORIA, UMR 7503
laurence.danlos@inria.fr Vandœuvre-l`es-Nancy, France
</note>
<email confidence="0.97172">
aleksandre.maskharashvili@inria.fr
sylvain.pogodalla@inria.fr
</email>
<sectionHeader confidence="0.994574" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.998207375">
This paper presents an encoding of
Generation-TAG (G-TAG) within Abstract
Categorial Grammars (ACG). We show
how the key notions of G-TAG have a nat-
ural interpretation in ACG, allowing us to
use its reversibility property for text gen-
eration. It also offers solutions to several
limitations of G-TAG.
</bodyText>
<sectionHeader confidence="0.985941" genericHeader="keywords">
1 Motivations
</sectionHeader>
<bodyText confidence="0.99193508">
G-TAG (Danlos, 1998; Danlos, 2000) is a formal-
ism based on the Tree Adjoining Grammar (TAG)
formalism (Joshi et al., 1975; Joshi and Schabes,
1997) dedicated to text generation. It focuses on
providing several notions to support useful data
structures, such as g-derivation trees or lexical
databases, to effectively relate a surface form (a
derived tree or a string) to a conceptual represen-
tation. An actual implementation in ADA was first
provided for French (Meunier, 1997), and it has re-
cently been implemented in the .NET framework
as the EasyText NLG system and is operational
at Kantar Media, a French subsidiary company of
TNS-Sofres (Danlos et al., 2011).
The G-TAG proposal can be seen as a result
of the observation of the mismatch between the
derivation tree notion of TAG and the expected se-
mantic dependencies (Schabes and Shieber, 1994)
from a generation perspective. Several approaches
that extend the derivation tree notion of TAG have
been proposed to overcome this difficulty. Other
approaches showed that the derivation trees still
could be used without additional modifications.
Such approaches rely on unification (Kallmeyer
and Romero, 2004; Kallmeyer and Romero, 2007)
or a functional approach to TAG (Pogodalla, 2004;
∗This work has been supported by the French agency
Agence Nationale de la Recherche (ANR-12-CORD-0004).
Pogodalla, 2009)1 based on Abstract Categorial
Grammars (ACG) (de Groote, 2001). The latter
is intrinsically reversible: the grammars and the
algorithms are the same for parsing and for gener-
ation.
We propose then to study G-TAG under the
ACG perspective. We show that the key notion
of g-derivation tree naturally express itself in this
framework. The surface form construction from
a conceptual representation can then use the gen-
eral algorithms of ACG, the very same ones that
can be used in parsing to analyze mildly con-
text sensitive languages (TAG generated language,
LCFRS) (de Groote and Pogodalla, 2004), follow-
ing (Kanazawa, 2007)’s proposal here applied to
give an ACG account of G-TAG. We do not con-
sider here the G-TAG treatment of preferences be-
tween the different realizations of the same input.
Similarly, we do not consider the generation of
pronouns used in G-TAG and we will work on
integrating a theory of generation of referring ex-
pressions.
</bodyText>
<sectionHeader confidence="0.993636" genericHeader="introduction">
2 Sketching G-TAG
</sectionHeader>
<bodyText confidence="0.999604307692308">
G-TAG deals with the How to say it? task of gen-
eration. The input is a conceptual representation.
A G-TAG grammar includes elementary trees, as
any TAG grammar. But it also makes g-derivation
trees primary objects, relating them to the elemen-
tary trees and considering them as pivot to the con-
ceptual representation level.
Conceptual Representation G-TAG concep-
tual representation makes use of notions as sec-
ond order relation, first order relation and thing.
Second order relations have two arguments which
are relations (either first or second order ones)
and typically correspond to discourse relations,
</bodyText>
<footnote confidence="0.963510333333333">
1Synchronous approaches (Nesson and Shieber, 2006) are
similar in many respects, as shown in (Storoshenk and Frank,
2012).
</footnote>
<page confidence="0.985362">
35
</page>
<note confidence="0.746332">
Proceedings of the 8th International Natural Language Generation Conference, pages 35–44,
</note>
<bodyText confidence="0.957985230769231">
Philadelphia, Pennsylvania, 19-21 June 2014. c�2014 Association for Computational Linguistics
whereas first order relations have things as their
arguments. While (Danlos, 2000) uses reified for-
mulas of a logical conceptual representation lan-
guage as G-TAG inputs, it can also be represented
as a higher-order logical formula (Meunier, 1997)
or as a SDRT-like formula (Danlos et al., 2001).
We follow here this presentation. Equation (1) ex-
emplifies an input that could be realized as Jean
a pass´e l’aspirateur pour ˆetre r´ecompens´e par
Marie. Puis il a fait une sieste (John has vacumed
in order to be rewarded by Mary. Then he took a
nap).
</bodyText>
<equation confidence="0.783456666666667">
SUCCESSION(GOAL(VACUUMING(Jean),
REWARDING(Marie, Jean)),
NAPPING(Jean)) (1)
</equation>
<bodyText confidence="0.987130020408163">
G-TAG Lexical Database A lexical entry of G-
TAG corresponds to a lemma. For each lexical en-
try (i.e. lemma) there is a set of TAG elementary
trees which corresponds to it. Among the TAG el-
ementary trees that correspond to a given lexical
entry, there is the canonical representative, and all
the other representatives are represented by adding
features to the canonical representative. For exam-
ple, if the lexical entry is to love, then the canon-
ical representative will be the active form of the
verb to love. Then the passive alternation is rep-
resented by adding a feature [+passive] to to love.
Moreover, all the lexical entries attached to a con-
cept (such as SUCCESSION) belong to a same lexi-
cal base. So for a concept, there can be a lexical
entry describing verbal realizations of the concept.
These realizations can correspond to the active or
to the passive forms, etc. There can also be a lex-
ical entry which corresponds to nominal realiza-
tions, etc.
G-Derivation Trees A TAG derivation tree can
be seen as a record of the substitutions and adjunc-
tion occurring during a TAG analysis. The same is
true for g-derivation tree. However, while TAG
derivation trees are considered as a by-product,
with inflected anchors, G-TAG derivation trees are
first class structures that are combined in order to
reflect the conceptual input. To abstract from the
surface form and from the derived tree they can
relate to, they don’t correspond to inflected forms
but bear features that are used in a post-processing
step. Complex g-derivation trees are built by going
through the dynamic selection process of a lexi-
cal item from the set of appropriate candidates for
a given concept. So contrary to TAG derivation
trees, they are not fully instantiated trees: their ar-
guments are represented by variables whose lexi-
calization are not carried out yet.
G-Derived Trees A g-derivation tree defines a
unique g-derived tree corresponding to it. This
correspondance is maintained all along the real-
ization process and a post-processing module out-
puts the surface representation (text) from the g-
derived tree. In addition to inflecting forms using
the feature values it can make some rewriting to
propose different versions of the initial text. In
this particular sense, g-derived tree corresponds
to possibly multiple text outputs generated by the
post-processing module.
</bodyText>
<sectionHeader confidence="0.992872" genericHeader="method">
3 The G-TAG Generation Process
</sectionHeader>
<bodyText confidence="0.999928851851852">
Let us assume the input of Equation 1. The G-TAG
process starts by lexicalizing relations that have
the widest scope in the conceptual representation:
typically second order relations, then first order re-
lations, and things.2 Back to the example, we first
lexicalize the second order relation SUCCESSION.
Several items are associated with this relation:
apr`es (after), avant (before), ensuite (afterwards),
auparavant (beforehand), puis (then), etc. Each of
them has two arguments, however, some of them
produce texts comprising two or more sentences,
like ensuite(afterwards); some of them can pro-
duce either two sentence texts or one sentence text,
while others produce only one sentence. For in-
stance, Jean a pass´e l’aspirateur. Ensuite, il a fait
une sieste (John has vacuumed. Afterwards, he
took a nap) is a two sentences text while John a
fait une sieste apr`es avoir pass´e l’aspirateur (John
took a nap after having vacuumed) is a one sen-
tence text. For this reason, items describing the
arguments or the result of second order relations
have features expressing the following constraints:
(+T, +S) indicates it is a text (two ore more sen-
tences); (+S) indicates it is either a single sen-
tence or a text; (−T, +S) indicates it is a sentence
(not a text). Every second order relation has three
features: one for output, and two for inputs. 3
</bodyText>
<footnote confidence="0.73126325">
2Correctness of the process is ensured because the gram-
mars don’t contain auxiliary trees that would reverse the pred-
ication order. (Danlos, 2000) argues such cases don’t occur in
technical texts, the first target of G-TAG. We don’t elaborate
on this point since the ACG approach we propose remove this
constraint for free.
3In G-TAG, any discourse connective has exactly two ar-
guments. A discussion about this point is provided in (Dan-
</footnote>
<page confidence="0.99924">
36
</page>
<bodyText confidence="0.9998938">
Let us assume that the G-TAG g-derivation tree
ensuite(+T, +S) belonging to the lexical database
associated with the concept SUCCESSION is first
chosen, resulting in a text rather than a sentence
(illustrated by the leftmost g-derivation tree of Fig-
ure 1 . The process then tries to realize its two ar-
guments. The first one involves the GOAL relation
that can be realized either by pour (in order to) or
by pour que (so that), as exemplified by the right-
most g-derivation trees of Figure 1. Both have fea-
tures (−T, +S) for the inputs (i.e. arguments) and
return a tree labeled at the root by (−T, +S).
Despite pour and pour que bearing the same
features, the syntactic trees corresponding to pour
and pour que are quite different. For pour que
S substitution nodes can be substituted by two
tensed sentences, while pour takes a finite sen-
tence and a “sentence” in the infinitive form with-
out any nominal subject. Figure 2 shows the asso-
ciated elementary trees. Selecting one or the other
during the generation process restricts the possible
realizations for the arguments. This is enforced by
a feature associated to the elementary tree, namely
the (+reduc-subj) feature as shown in Fig. 3.
Again, we may assume that G-TAG selects pour,
</bodyText>
<figureCaption confidence="0.7746055">
Figure 2: Elementary trees of pour que (so that)
and pour (in order to)
</figureCaption>
<bodyText confidence="0.976125357142857">
which will enforce, because of the associated ele-
mentary trees, that the subject of the first and the
second arguments are the same. Afterwards, we
need to lexicalize these two arguments with a com-
mon subject Jean. From a semantic point of view,
the agent of VACUUMING has to be the beneficiary
of REWARDING (the rewardee). VACUUMING can
only be lexicalized as passer-l’aspirateur (run-the-
vacuum-cleaner), while there are several lexical-
los, 2000).
ization options for the REWARDING: r´ecompenser
(to reward), donner-r´ecompense (to give-reward),
and recevoir-r´ecompense (to receive-reward). Let
us notice that donner-r´ecompense does not meet
the constraint on a shared subject as it cannot
have the rewardee as its subject4. The remaining
options are: recevoir-r´ecompense, whose canon-
ical representation has the rewardee as subject;
and r´ecompense whose passive construction has
the rewardee as subject. s Assuming a choice of
r´ecompenser[+passive],5 the lexicalizations of the
arguments of the first order relations remain. As
Marie occurs only once and in subject position,
it can only be lexicalized as Marie. On the other
hand, Jean three times: one will be the implicit
subject of the subordinate, then as argument of
VACUUMING and NAPPING. Therefore it can be ei-
ther lexicalized in both of the cases as Jean, or
Jean and the pronoun il (he). In G-TAG, there
are some post-processing rules that take care of
the generation of referring expressions, but not in
a really principled way so we do not demonstrate
them here. We assume a lexicalization by Jean in
both cases. Figure 3 shows the g-derivation tree
associated with the input of Equation 1 and Fig. 4
show the unique resulting (non-flected) derived
tree. The post-processing modules then outputs:
Jean a passe l’aspirateur pour etre recompense
par Marie. Ensuite, il a fait une sieste. (John
vacuumed in order to be rewarded by Mary. Af-
terwards, he took a nap.)
ensuite
</bodyText>
<figureCaption confidence="0.991674">
Figure 3: Fully instantiated g-derivation tree
</figureCaption>
<sectionHeader confidence="0.947446" genericHeader="method">
4 ACG Definition
</sectionHeader>
<bodyText confidence="0.3730035">
Abstract Categorial Grammars
(ACGs) (de Groote, 2001) are a type theo-
</bodyText>
<footnote confidence="0.976353666666667">
4It lacks passivation in French and there is no form equiv-
alent to: John was given a reward by Mary.
5Of course, all these branching points offer several real-
</footnote>
<bodyText confidence="0.57712">
izations of the same entry. But for explanatory purposes, we
describe only one at each step.
</bodyText>
<figure confidence="0.993999653846154">
S
S (arg1) PP
S(arg2)
(mood:inf)
Prep
pour
arg2
faire-la-sieste
arg1
arg1
pour
(+reduc-subj)
Jean
arg2
arg1
passer-l’aspirateur
arg1
Jean
recompenser
(+reduc-subj, +passive)
arg1 arg2
Marie e
ensuite pour pour que
(+T, +S) (−T, +S) (−T, +S)
(1st event) (2nd event) (ACTION) (PURPOSE) (ACTION) (PURPOSE)
(+S) (+S) (−T, +S) (−T, +S) (−T, +S) (−T, +S)
</figure>
<figureCaption confidence="0.998596">
Figure 1: G-derivation trees samples
</figureCaption>
<figure confidence="0.544859333333333">
arg1 arg2
arg1 arg2
arg1 arg2
S
S (arg1) PP
Prep
pour
C
que
S(arg2)
(mood:subj)
S
</figure>
<page confidence="0.920316">
37
</page>
<figureCaption confidence="0.999772">
Figure 4: Non-inflected derived tree
</figureCaption>
<bodyText confidence="0.999714">
retical framework that is able to encode several
grammatical formalisms (de Groote and Pogo-
dalla, 2004). An ACG defines two languages:
the abstract one and the object one. The abstract
level describe the admissible parse structures and
a lexicon maps these structures to the ones we
observe at the object level (strings for surface
forms, logical formulas for semantic forms). In
all cases, the considered languages are sets of
λ-terms that generalize string and tree languages.
</bodyText>
<listItem confidence="0.840298111111111">
Definition. A higher-order linear signature (also
called a vocabulary) is defined to be a triple E =
(A, C, r), where:
• A is a finite set of atomic types (also noted
AE),
• C is a finite set of constants (also noted CQ),
• and r is a mapping from C to TA the set of
types built on A: TA ::= AITA -+ TA (also
noted TE).
</listItem>
<bodyText confidence="0.9030664">
Given a higher-order linear signature E, A(E) is
the set of λ-terms built on E, and for t E A(E)
and α E TE such that t has type α, we note t :E α
(the E subscript is omitted when obvious from the
context).
</bodyText>
<listItem confidence="0.9608252">
Definition. An abstract categorial grammar is a
quadruple G = (E, °, L, s) where:
1. E and ° are two higher-order linear signa-
tures, which are called the abstract vocabu-
lary and the object vocabulary, respectively;
2. L : E −-+ ° is a lexicon from the abstract
vocabulary to the object vocabulary. It is
a homomorphism that maps types and terms
built on E to types and terms built on ° as
follows:
• if α -+ 6 E TE then L(α -+ 6) =
L(α) -+ L(6)
• if x E A(E) (resp. λx.t E A(E) and
t u E A(E)) then L(x) = x (resp.
L(λx.t) = λx.L(t) and L(t u) =
</listItem>
<equation confidence="0.565725">
L(t) L(u))
</equation>
<bodyText confidence="0.995839833333333">
It is then enough to define L on the atomic
types and on the constants of E to define it
on all types and terms, provided that for any
constant c : α of E we have L(c) : L(α).
We note t:=&amp; u if L(t) = u and omit the G
subscript if obvious from the context.
</bodyText>
<listItem confidence="0.844466">
3. s E TE is a type of the abstract vocabulary,
which is called the distinguished type of the
grammar.
</listItem>
<bodyText confidence="0.99427825">
Table 1 provides an ACG example Gd-ed trees
where the abstract typed constants of Ederθ en-
code the combinatorial properties of the associated
(through the lexicon Ld-ed trees) elementary trees.
Definition. The abstract language of an ACG G =
(E, °, L, s) is A(G ) = It E A(E) I t :E s}
The object language of the grammar O(G ) =
It E A(°) I lu E A(G ). t = LG(u)}
For instance, the term Creward IS Iv CMary CJean :
S E Gd-ed trees, and its image, the derived tree for
Marie r´ecompense Jean (Mary rewards John).
It is important to note that, from a purely math-
ematical point of view, there is no structural differ-
ence between the abstract and the object vocabu-
lary: both are higher-order signatures. This allows
for combining ACGs in different ways:
</bodyText>
<listItem confidence="0.99271225">
• by having a same abstract vocabulary shared
by several ACGs: this can be used to make
two object terms (for instance a string and
a logical formula) share the same underlying
structure. Gd-ed trees and GLog in Fig. 5 illustrate
such a composition.
• by making the abstract vocabulary of one
ACG the object vocabulary of another ACG,
allowing for the control of the admissible
structures of the former by the latter. Gyield
and Gd-ed trees in Fig. 5 illustrate such a com-
position.
</listItem>
<figureCaption confidence="0.998551">
Figure 5: ACG architecture for TAG
</figureCaption>
<figure confidence="0.996695741935484">
S
S
PP
Prep S
ur NP Va V PP
S
Adv S
NP V
ite
S
NP V
.
pour
e
ˆetre
Prep
r´ecompenser
par
Marie perP
ensuite
Jean z
fait une sieste
Jean
passer l’aspirateur
GLog
Gd-ed trees
A(Ederθ)
A(Etrees)
A(ELog)
A(Estring)
Gyield
</figure>
<page confidence="0.994575">
38
</page>
<bodyText confidence="0.999954">
Crucial to our analysis is that ACG parsing of
a term u amounts to finding an abstract term t
such that t:= u, no matter whether u represents
a string, a tree, or a logical formula. This can be
done in polynomial time for ACGs whose abstract
constant types are at most of order 2: second order
ACGs as (Kanazawa, 2007) shows.6 The result re-
lies on a reduction of the parsing problem to Data-
log querying where the term to be parsed is stored
in a database. Interestingly, this database can rep-
resent a set of terms (Kanazawa, 2011, Section
4.2) and the query reduces to checking whether at
least one of them can be retrieved. This allows the
query associated with a term representing a logical
formula to extend to all the terms that are equiva-
lent modulo the associativity and the commutativ-
ity of the conjunction.
</bodyText>
<sectionHeader confidence="0.995236" genericHeader="method">
5 ACG Encoding
</sectionHeader>
<subsectionHeader confidence="0.967225">
5.1 TAG as ACG
</subsectionHeader>
<bodyText confidence="0.9939688">
Because ACG considers both the abstract lan-
guage and the object language, the encoding of
TAG into ACG makes (abstract) terms represent-
ing derivation trees primary. The encoding uses
two ACGs Gd-ed trees = (Ederθ, Etrees, Ld-ed trees, S)
and Gyield = (Etrees, Estring, Lyield, τ).
We exemplify the encoding7 of a TAG analyz-
ing (2) in Fig. 6.8
sites where no adjunction actually takes place
in a TAG derivation.
Etrees: Its unique atomic type is τ the type of
trees. Then, for any X of arity n belong-
ing to the ranked alphabet describing the ele-
mentary trees of the TAG, we have a constant
n times
</bodyText>
<equation confidence="0.981762">
Xn : � τ ( · · · ( τ ( τ
</equation>
<bodyText confidence="0.993614714285714">
Estring: Its unique atomic type is σ the type of
strings. The constants are the terminal sym-
bols of the TAG (with type σ), the concatena-
tion + : σ ( σ ( σ and the empty string
ε : σ.
Table 1 illustrates Ld-ed trees.9 Lyield is defined as
follows:
</bodyText>
<listItem confidence="0.9898758">
• Lyield(τ) = σ;
• for n &gt; 0, Lyield(Xn) = λx1 ··· xn.x1 +
··· + xn;
• for n = 0, X0 : τ represents a terminal sym-
bol and Lyield(X0) = X.
</listItem>
<bodyText confidence="0.9452015">
Then, the derivation tree, the derived tree, and the
yield of Fig. 6 are represented by:
</bodyText>
<figure confidence="0.967994">
r
(b) Derived tree
</figure>
<figureCaption confidence="0.986635">
Figure 6: Marie r´ecompense ensuite Jean
</figureCaption>
<figure confidence="0.9990753">
np
Marie
7then 7Marie 7Jean
(a) Derivation tree
7reward
S
v
v ensuite
np
Jean
</figure>
<bodyText confidence="0.980833133333333">
This sentence is usually analyzed in TAG with a
derivation tree where the adverb adjoins at the v
node.
The three higher-order signatures are:
Ederθ: Its atomic types include S, v, np, SA,
vA... where the X types stand for the cate-
gories X of the nodes where a substitution
can occur while the XA types stand for the
categories X of the nodes where an adjunc-
tion can occur. For each elementary tree
γlex. entry it contains a constant Clex. entry whose
type is based on the adjunction and substitu-
tion sites as Table 1 shows. It additionally
contains constants IX : XA that are meant
to provide a fake auxiliary tree on adjunction
</bodyText>
<footnote confidence="0.948917333333333">
6It actually extends this result to almost linear object
terms where variables with atomic type can be duplicated,
as it commonly happens at the semantic level.
7This corresponds to the systematic encoding of (Pogo-
dalla, 2009) of TAG and its semantics into ACG.
8We follow the grammar of (Abeill´e, 2002).
</footnote>
<equation confidence="0.997381833333333">
γ5 = Creward IS (Cvthen IS) CMarie CJean
Ld-ed trees(γ5)
= S3 (np1 Marie)
(v2 (v1 r´ecompense) ensuite) (np1 Jean)
Lyield(Ld-ed trees(γ5)) = Marie + r´ecompense
+ ensuite + Jean
</equation>
<subsectionHeader confidence="0.991648">
5.2 G-TAG as ACG
</subsectionHeader>
<bodyText confidence="0.999988875">
In order to model G-TAG in ACG, first we need to
design the abstract signature Eg-derθ in which we
can have entries for G-TAG. This entries will re-
flect the ideology that G-TAG is based on. For
instance, in G-TAG discourse level words like en-
suite can take as its arguments texts and sentences
and produces text. In order to model this, we
introduce types S and T. Then, we can define
</bodyText>
<sectionHeader confidence="0.745178" genericHeader="method">
DSS
</sectionHeader>
<bodyText confidence="0.8706915">
then: S ( S ( T, which means that DSS
then has
takes two arguments of type S and returns a re-
sult of type T. As in G-TAG, ensuite can take two
</bodyText>
<figure confidence="0.5570285">
9With Ld-ed trees(XA) = T ( T and for any other type
X, Ld-ed trees(XA) = T.
(2) Marie r´ecompense ensuite Jean
Mary rewards then John
</figure>
<page confidence="0.915956">
39
</page>
<table confidence="0.996606545454545">
Abstract constants of Σdere Their images by Yd-ed trees The corresponding TAG trees
CJean : np : n
cJean =τnp1 Jean γJean =
Jean
v vA v : (τ ( τ) ( (τ ( τ) =
Cthen : vA cthen = λovx.v (v2 xensuite) γthen v
v∗ ensuite
Creward : SA ( vA ( np : (τ ( τ) ( (τ ( τ) ( τ γreward = S np
( np ( S creward ( τ ( τ np v
= λoavso.a (S3 s (v (v1 r´ecompense)) o) r
IX : XA λx.x : τ ( τ
</table>
<tableCaption confidence="0.99988">
Table 1: A TAG as an ACG: Yd-ed trees and Llog.sem lexicons
</tableCaption>
<bodyText confidence="0.999187333333333">
texts as arguments and return text as well, we need
to do have another entry for modeling this fact.
This makes us to introduce another constant DTT:
</bodyText>
<equation confidence="0.910193125">
then
T ( T ( T. For the same kind of reason, we in-
troduce following constants: DST
then: S ( T ( T,
DT S and T ( S ( T. Other relations, like au-
then
paravant is modeled in the same way as ensuite in
Eg-dere.
</equation>
<bodyText confidence="0.994876720588235">
Apart from ensuite and auparavant, there are
connectives as avant (before) and apr`es (after) that
need to be modeled differently from ensuite. In-
deed, while ensuite results in a text, placing side
by side a text and a sentence separated with a pe-
riod, avant and apr`es in French combine in a sin-
gle sentence a (full) clause and an infinitive clause
with an implicit subject: the one of the first clause.
It is clear that in order to type avant and apr`es in
the Eg-dere signature, one should use a type which
schematically looks as ... ( S. On the other
hand, one needs to give the exact type to them.
Despite that in TAG and G-TAG avant and apr`es
take two sentential arguments (labelled by S), the
second argument bears a feature indicating it lacks
the subject and that the latter has to be shared with
the first sentence. For instance: Jean a fait une
sieste apr`es avoir pass´e l’aspirateur (John took
a nap after having vacuumed), here the subject
of avoir pass´e l’aspirateur (having vacuumed) is
Jean, which comes from the sentence Jean a fait
une sieste (John took a nap). So, Jean a fait une
sieste (John took a nap) can be seen as a sentence
whose subject is shared by another sentence as
well. In order to model this point, we use fol-
lowing type: Sws ( Sh ( np ( S. Indeed,
the Sws and the Sh types correspond to the type
of sentences missing a subject. Furthermore, we
need to model pour and pour que, which were in-
troduced in order to lexicalize the GOAL relation in
G-TAG. First, let us have a look at pour que. It can
take as its arguments two complete (from a syntax
point of view) sentences and results in a sentence
as in: Il travaille pour que vous puissiez manger.
So, Dpour que, which is an entry corresponding to
pour que, can be assigned a S ( S ( S type.
The syntactic difference between pour que and
pour was highlighted in Section 3: pour takes
as arguments a complete sentence and an infini-
tive form of a sentence missing a subject whose
subject comes from the first argument. Thus, in
this case, similarly to case of avant and apr`es,
pour has to be modeled as an entry that has type
Sws ( Sinf ( np ( S, where Sinf stands for
the type of an infinitive form of a clause missing a
subject. We also need to deal with encoding differ-
ent forms of a verb. For instance, r´ecompenser has
an active and a passive form. In G-TAG deriva-
tion, both of them can be encountered. In order
to model this fact, two different entries are intro-
duced: one for the passive form and one for the
active form, which is the canonical construction
for r´ecompenser. So, we need to have two distinct
entries Dpassive and Dactive and both of them
recompense recompense,
have type SA ( vA ( np ( np ( S. More-
over, (Danlos, 2000) poses the problem that G-
TAG cannot handle a text where the adverb adjoin
at the v node rather than on the S node as in: Jean
a pass´e l’aspirateur. Il a
(John vacuumed. He then
to (Danlos, 2000) modelling such text production
requires a formalism more powerful than TAG. In
the ACG framework, this observations translates
into defining an entry Dvthen : S ( (vA ( S) (
T in Eg-dere which is third order and that is, as such,
beyond the TAC into ACG encoding (that only re-
quires second-order types).10 This also offers a
</bodyText>
<footnote confidence="0.662281">
10Currently, there is no theoretical complexity result for
parsing such ACG fragments. However, in this particu-
</footnote>
<table confidence="0.6385965">
ensuite fait une sieste
took a nap.) According
</table>
<page confidence="0.992798">
40
</page>
<bodyText confidence="0.999665818181818">
general mechanism for providing constants encod-
ing adverbial connectives with two arguments as
in discourse grammars such as D-STAG (Danlos,
2011), but contrary to D-LTAG where one of the
arguments is anaphorically given from the preced-
ing discourse (Webber, 2004).
G-Derivation Trees to Derivation Trees We
translate terms of Eg-derθ, which correspond to g-
derivation trees, into the TAG derivation tree lan-
guage defined on Ederθ using the lexicon Lder-der
of Table 2. It is interesting to see how to inter-
</bodyText>
<equation confidence="0.999952375">
Lder-der(S) = Lder-der(T) = Lder-der(Sws)
= Lder-der(Sinf) = Lder-der(Sh)
= S
Lder-der(SA) = SA
Lder-der(vA) = vA
Lder-der(np) = np
Lder-der(IS) = IS
Lder-der(Iv) = Iv
</equation>
<tableCaption confidence="0.90167">
Table 2: The Lder-der lexicon
</tableCaption>
<bodyText confidence="0.978766176470588">
pret Dvthen: S ( (vA ( S) ( T into Ederθ.
For this reason, we introduce in Ederθ the follow-
ing constant: s2 : S ( S ( S that allows
for combining two sentences with a period. Now,
it is possible to translate Dvthen into Ederθ as fol-
lows: Lder-der(Dvthen) = λoS1 S2. s2 S1(S2 Cvthen).
It means that Dv then is interpreted as performing
both the operation of combining two sentences
with a period and the adjunction of ensuite on the
v node of the second sentence.
G-Derived Trees as Interpretation of G-
Derivation Trees As soon as g-derivation trees
as term built on Eg-derθ are interpreted as term
built on Ederθ, we can map them to derived trees.
Thus, by composing the two lexicons Lder-der and
Ld-ed trees we can get directly from G-TAG into de-
rived trees
</bodyText>
<subsectionHeader confidence="0.9994645">
5.3 From G-TAG to Montague Style
Semantics Using ACGs
</subsectionHeader>
<bodyText confidence="0.997625346153846">
(Pogodalla, 2009) defines a signature ELog and a
lexicon LLog from Ederθ to ELog. The entries in
ELog have Montague like semantics. The lexicon
translates a derivation tree into a corresponding
formula. We will use the same kind of semantic
language for conceptual representations. In other
words, our language will produce the formulas
lar case, we could use a second-order—and polynomial—
encoding of multi-component TAG into ACG.
that are used in the conceptual representation of
G-TAG, while we will stick to the Montague style
translations from syntax to semantics.
So, we define a signature Econrep of conceptual
representation that is similar to the one of (Pogo-
dalla, 2009). Econrep defines two atomic types e
and t and constants such as: j, m ... of type e, the
constant REWARD of type e ( e ( t, the con-
stant CLAIM of type e ( t ( t and the constant
SEEM of type t ( t. Moreover, we have constants
SUCC, GOAL of type t ( t ( t.
We are able to translate Eg-derθ into Econrep
with the help of the lexicon Lder-con. The
lexicon Lder-con is extension of the lexicon
defined in (Pogodalla, 2009), because we
are adding to the domain (i.e. abstract lan-
guage) the constants that are not in the Ederθ.
</bodyText>
<equation confidence="0.994490259259259">
Lder-con(S) = Lder-con(T) = t
Lder-con(vA) = (e → t) ( (e → t)
Lder-con(SA) = t ( t
Lder-con(np) = (e → t) ( t
Lder-con(Djean) = λoP.P(j)
Lder-con(DST
then) = Lder-con(DSS
then)
= Lder-con(DST)
then
= Lder-con(DT S
then)
= Lder-con(DT T
then)
= λs2s1.SUCC s2 s1
Lder-con(DST
bef. ) = Lder-con(DSS
bef. )
= Lder-con(DST
bef. )
= Lder-con(DT S
bef. )
= TT
Lder-con(Dbef. )
= λos1s2. SUCC s2 s1
Lder-con(Drewards) = λos a O S.s(S(a(λox.O(λoy.
(REWARD x y))))
</equation>
<bodyText confidence="0.9997725">
Note that the interpretation of np is JnpK =
(e → t) ( t, using a non-linear implication (but
almost linear). Typically, the sharing of the sub-
ject by the two clauses related by pour or avant de
induces non linearity.
The Sinf, Sh, and Sws types all are interpreted
as JnpK ( JSK = ((e → t) ( t) ( t as they
denote clauses lacking a subject. Then we trans-
late the constants Dpour, Dapr`es, and Davant in
the following way:
</bodyText>
<equation confidence="0.9414816">
Lder-con(Dpour) =
λos1.λos2.λoN.N(λx.(GOAL(s1(λP.P x))
(s2(λP.P x))))
Lder-con(Dapres) =
λos1.λos2.λoN.N(λx.(SUCC(s1(λP.P x))
(s2(λP.P x))))
41
Lder-con(Davant) =
λos1.λos2.λoN.N(λx.(SUCC(s2(λP.P x))
(s1(λP.P x))))
</equation>
<sectionHeader confidence="0.5143425" genericHeader="method">
5.4 The G-TAG Process as a Morphism
Composition
</sectionHeader>
<bodyText confidence="0.9964014">
We exemplify the whole process using the term
T0 = SUCC(VAC(jean), REWARD(marie, jean))
of type t.11 The terms representing the g-
derivation trees that generate this conceptual rep-
resentation are the antecedents of To by L −1
</bodyText>
<equation confidence="0.829646333333333">
der-con:
L−1
der-con(T0) = {t1, ... , t8} that all are of type
</equation>
<bodyText confidence="0.999821636363636">
T. They are given in Figure 7. Each of these re-
trieved terms t1, ... , t8 are then mapped to terms
representing TAG derivation trees, i.e. built on
Σderθ via the lexicon Lder-der. They can be can
in turn be interpreted as syntactic derived trees
via the lexicon Ld-ed trees, and the latter can be
interpreted as strings using the lexicon Lyield.
So from T0 we can have eight surface forms:
Lyield(Ld-ed trees(Lder-der(ti))), i ∈ [1, 8]. Let us
show this process on the example of t512. It il-
lustrates the generation of the example (3).13
</bodyText>
<equation confidence="0.9481243125">
t1 = DSS
then(DvacISIvDjean)(DrewardISIvDmarieDjean)
t2 = DSS
then(DvacISIvDjean)(Dpassive
rewardISIvDmarieDjean)
t3 = DSS
bef.(DrewardISIvDmarieDjean)(DvacISIvDjean)
t4 = DSS
bef.(Dpassive
rewardISIvDjeanDmarie)(DvacISIvDjean)
t5 = Dvthen(DvacISIvDjean)(λoa.Dreward IS a DmarieDjean)
t6 = Dvthen(DvacISIvDjean)(DpassiveISIvDjeanDmarie)
reward
t7 = Dafter(Dsws
vacISIv)(Dreceive-rew.ISIvDjean)Dmarie
t8 = Dbef.(Dsws
</equation>
<bodyText confidence="0.337213">
vacISIv)(Dreceive-rew.ISIvDjean)Dmarie
</bodyText>
<figureCaption confidence="0.999681">
Figure 7: Antecedents of T0 by Lder-con
</figureCaption>
<sectionHeader confidence="0.999862" genericHeader="conclusions">
6 Related Work
</sectionHeader>
<bodyText confidence="0.999893454545455">
We can only quickly mention two related pieces
of work. On the one hand, (Gardent and Perez-
Beltrachini, 2010) also takes advantage of the
formal properties underlying the tree language
of derivation trees to propose a generation pro-
cess using TAG grammars. On the other hand,
(Nakatsu and White, 2010) also includes discourse
relations in the grammar with Discourse Combi-
natory Categorial Grammar and a type-theoretical
framework to provide a text (rather than sentence)
generation process.
</bodyText>
<listItem confidence="0.434919">
(3) Jean a pass´e l’aspirateur. Marie 7 Conclusion
</listItem>
<equation confidence="0.866749428571429">
John vacuumed. Mary
Lder-der(t5) = 8 (CvacISIvCjean)
(CrewardISCvthenCmarieCjean)
Ld-ed trees(Lder-der(t5) =
S3 (S2 (np1 Jean)(v1 a pass´e l’aspirateur))
·
(S3(np1 Marie)(v2 (v1 a r´ecompens´e) ensuite)(np1 Jean))
</equation>
<bodyText confidence="0.873710184210526">
And the surface forms is given by composing the
interpretations:
Lyield(Ld-ed trees(Lder-der(t5)) =
Jean + a pass´e + l’aspirateur + . +
Marie + a recompens´e + ensuite + Jean
11The associated conceptual input is a simplified version of
the conceptual input of Equation 1 without the GOAL concept
and a replacement of the NAP one by the REWARDING one.
12t5 is such that Lder-der(t5) = γ5 and the term γ5 was
used as example at Section 5.1.
13For sake of simplicity we assume the adverb adjoins on
the whole auxiliary+verb phrase rather than only on the aux-
iliary as it would be in French.
This paper shows how G-TAG can be encoded as
ACG. It relies on the fact that both G-TAG and the
encoding of TAG within ACG make the deriva-
tion tree a primary notion. Then we can bene-
fit from the polynomial reversibility of the ACG
framework. It also offers a generalization of the
process to all kinds of adjunctions, including the
predicative ones. It also offers a new insight on
discourse grammars for the adverbial connective
encoding (Danlos, 2011). Note that contrary to an
important part of G-TAG that offers a way (based
on a semantic and a linguistic analysis) to rank the
different realizations of a conceptual representa-
tion, we do not deal here with such preferences.
As syntactic ambiguity treatment is not usually
part of the syntactic formalism, we prefer the “re-
alization ambiguity” treatment not to be part of the
generation formalism. Finally, a crucial perspec-
tive is to integrate a theory of generation of re-
ferring expressions relying on type-theoretical ap-
proaches to dynamics semantics (de Groote, 2006;
de Groote and Lebedeva, 2010) that would ensure
a large compatibility with the ACG framework.
a r´ecompens´e ensuite Jean.
rewarded afterwards John.
</bodyText>
<page confidence="0.993235">
42
</page>
<sectionHeader confidence="0.982509" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999754855855856">
[Abeill´e2002] Anne Abeill´e. 2002. Une grammaire
´electronique du franc¸ais. Sciences du langage.
CNRS ´Editions.
[Danlos et al.2001] Laurence Danlos, Bertrand Gaiffe,
and Laurent Roussarie. 2001. Document sructuring
a` la SDRT. In Helmut Horacek, Nicolas Nicolov,
and Leo Wanner, editors, Proceedings of the ACL
2001 Eighth European Workshop on Natural Lan-
guage Generation (EWNLG). http://aclweb.
org/anthology/W/W01/W01-0803.pdf.
[Danlos et al.2011] Laurence Danlos, Fr´ed´eric Meu-
nier, and Vanessa Combet. 2011. EasyText: an
operational NLG system. In ENLG 2011, 13th
European Workshop on Natural Language Gener-
ation, September. http://hal.inria.fr/
inria-00614760/en/.
[Danlos1998] Laurence Danlos. 1998. G-TAG :
Un formalisme lexicalis´e pour la g´en´eration de
textes inspir´e de TAG. Traitement Automatique
des Langues, 39(2). http://hal.inria.fr/
inria-00098489.
[Danlos2000] Laurence Danlos. 2000. G-TAG: A lex-
icalized formalism for text generation inspired by
tree adjoining grammar. In Anne Abeill´e and Owen
Rambow, editors, Tree Adjoining Grammars: For-
malisms, Linguistic Analysis, and Processing, pages
343–370. CSLI Publications.
[Danlos2011] Laurence Danlos. 2011. D-STAG:
a formalism for discourse analysis based on
SDRT and using synchronous TAG. In Philippe
de Groote, Markus Egg, and Laura Kallmeyer, ed-
itors, 14th conference on Formal Grammar - FG
2009, volume 5591 of LNCS/LNAI, pages 64–84.
Springer. http://dx.doi.org/10.1007/
978-3-642-20169-1_5.
[de Groote and Lebedeva2010] Philippe de Groote and
Ekaterina Lebedeva. 2010. Presupposition ac-
commodation as exception handling. In Proceed-
ings of the SIGDIAL 2010 Conference, pages 71–74,
Tokyo, Japan, September. Association for Computa-
tional Linguistics. http://www.aclweb.org/
anthology/W/W10/W10-4313.
[de Groote and Pogodalla2004] Philippe de Groote and
Sylvain Pogodalla. 2004. On the expressive power
of Abstract Categorial Grammars: Representing
context-free formalisms. Journal of Logic, Lan-
guage and Information, 13(4):421–438. http:
//hal.inria.fr/inria-00112956.
[de Groote2001] Philippe de Groote. 2001. Towards
Abstract Categorial Grammars. In Association
for Computational Linguistics, 39th Annual Meet-
ing and 10th Conference of the European Chap-
ter, Proceedings of the Conference, pages 148–
155. http://aclweb.org/anthology/P/
P01/P01-1033.pdf.
[de Groote2006] Philippe de Groote. 2006. To-
wards a montagovian account of dynam-
ics. In Masayuki Gibson and Jonathan
Howell, editors, Proceedings of Semantics
and Linguistic Theory (SALT) 16. http:
//elanguage.net/journals/index.
php/salt/article/view/16.1/1791.
[Gardent and Perez-Beltrachini2010] Claire Gardent
and Laura Perez-Beltrachini. 2010. RTG based sur-
face realisation for TAG. In Proceedings of the 23rd
International Conference on Computational Lin-
guistics (COLING 2010), pages 367–375, Beijing,
China, August. Coling 2010 Organizing Committee.
http://www.aclweb.org/anthology/
C10-1042.
[Joshi and Schabes1997] Aravind K. Joshi and Yves
Schabes. 1997. Tree-adjoining grammars. In
G. Rozenberg and A. Salomaa, editors, Handbook
offormal languages, volume 3, chapter 2. Springer.
[Joshi et al.1975] Aravind K. Joshi, Leon S. Levy, and
Masako Takahashi. 1975. Tree adjunct gram-
mars. Journal of Computer and System Sciences,
10(1):136–163.
[Kallmeyer and Romero2004] Laura Kallmeyer and
Maribel Romero. 2004. LTAG semantics with
semantic unification. In Proceedings of TAG+7,
pages 155–162.
[Kallmeyer and Romero2007] Laura Kallmeyer and
Maribel Romero. 2007. Scope and situation
binding for LTAG. Research on Language and
Computation, 6(1):3–52. http://dx.doi.
org/10.1007/s11168-008-9046-6.
[Kanazawa2007] Makoto Kanazawa. 2007. Pars-
ing and generation as datalog queries. In Pro-
ceedings of the 45th Annual Meeting of the
Association of Computational Linguistics (ACL),
pages 176–183. http://www.aclweb.org/
anthology/P/P07/P07-1023.
[Kanazawa2011] Makoto Kanazawa, 2011. Parsing
and generation as Datalog query evaluation. Un-
der review. http://research.nii.ac.jp/
˜kanazawa/publications/pagadqe.pdf.
[Meunier1997] Fr´ed´eric Meunier. 1997. Implantation
du formalisme de g´en´eration G-TAG. Ph.D. thesis,
Universit´e Paris 7 — Denis Diderot.
[Nakatsu and White2010] Crytal Nakatsu and Michael
White. 2010. Generating with discourse com-
binatory categorial grammar. Linguistic Is-
sues in Language Technology, 4(1). http:
//elanguage.net/journals/index.
php/lilt/article/view/1277/871.
[Nesson and Shieber2006] Rebecca Nesson and
Stuart M. Shieber. 2006. Simpler TAG seman-
tics through synchronization. In Proceedings
of the 11th Conference on Formal Grammar,
Malaga, Spain, 29–30 July. CSLI Publications.
</reference>
<page confidence="0.995568">
43
</page>
<reference confidence="0.99892644">
http://cslipublications.stanford.
edu/FG/2006/nesson.pdf.
[Pogodalla2004] Sylvain Pogodalla. 2004. Comput-
ing Semantic Representation: Towards ACG Ab-
stract Terms as Derivation Trees. In Proceedings
of TAG+7, pages 64–71. http://hal.inria.
fr/inria-00107768.
[Pogodalla2009] Sylvain Pogodalla. 2009. Advances
in Abstract Categorial Grammars: Language The-
ory and Linguistic Modeling. ESSLLI 2009 Lec-
ture Notes, Part II. http://hal.inria.fr/
hal-00749297.
[Schabes and Shieber1994] Yves Schabes and Stu-
art M. Shieber. 1994. An alternative conception
of tree-adjoining derivation. Computational Lin-
guistics, 20(1):91–124. http://aclweb.org/
anthology/J/J94/J94-1004.pdf.
[Storoshenk and Frank2012] Dennis Ryan Storoshenk
and Robert Frank. 2012. Deriving syntax-semantics
mappings: node linking, type shifting and scope am-
biguity. In Proceedings of TAG+11, pages 10–18.
[Webber2004] Bonnie Webber. 2004. D-LTAG: Ex-
tending :exicalized TAG to discourse. Cognitive Sci-
ence, 28:751–779. http://dx.doi.org/0.
1207/s15516709cog2805_6.
</reference>
<page confidence="0.999288">
44
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.997172">ACG Analysis of the G-TAG Generation</title>
<author confidence="0.898237">Danlos Aleksandre Maskharashvili Pogodalla</author>
<affiliation confidence="0.791767666666667">Universit´e Paris Diderot (Paris 7) INRIA Villers-l`es-Nancy, France ALPAGE, INRIA Paris–Rocquencourt Universit´e de Lorraine, Institut Universitaire de France, Paris, France CNRS, LORIA, UMR 7503</affiliation>
<address confidence="0.802992">France</address>
<email confidence="0.940649">aleksandre.maskharashvili@inria.frsylvain.pogodalla@inria.fr</email>
<abstract confidence="0.980814088642659">This paper presents an encoding of Generation-TAG (G-TAG) within Abstract Categorial Grammars (ACG). We show how the key notions of G-TAG have a natural interpretation in ACG, allowing us to its for text generation. It also offers solutions to several limitations of G-TAG. 1 Motivations G-TAG(Danlos, 1998; Danlos, 2000)is a formalism based on the Tree Adjoining Grammar (TAG) formalism(Joshi et al., 1975; Joshi and Schabes, 1997)dedicated to text generation. It focuses on providing several notions to support useful data structures, such as g-derivation trees or lexical databases, to effectively relate a surface form (a derived tree or a string) to a conceptual representation. An actual implementation in ADA was first for French(Meunier, 1997),and it has recently been implemented in the .NET framework as the EasyText NLG system and is operational at Kantar Media, a French subsidiary company of TNS-Sofres(Danlos et al., 2011). The G-TAG proposal can be seen as a result of the observation of the mismatch between the derivation tree notion of TAG and the expected sedependencies(Schabes and Shieber, 1994) from a generation perspective. Several approaches that extend the derivation tree notion of TAG have been proposed to overcome this difficulty. Other approaches showed that the derivation trees still could be used without additional modifications. approaches rely on unification and Romero, 2004; Kallmeyer and Romero, 2007) a functional approach to TAG(Pogodalla, 2004; work has been supported by the French agency Agence Nationale de la Recherche (ANR-12-CORD-0004). based on Abstract Categorial (ACG)(de Groote, 2001).The latter the grammars and the algorithms are the same for parsing and for generation. We propose then to study G-TAG under the ACG perspective. We show that the key notion of g-derivation tree naturally express itself in this framework. The surface form construction from a conceptual representation can then use the general algorithms of ACG, the very same ones that can be used in parsing to analyze mildly context sensitive languages (TAG generated language, LCFRS)(de Groote and Pogodalla, 2004),following(Kanazawa, 2007)’sproposal here applied to give an ACG account of G-TAG. We do not consider here the G-TAG treatment of preferences between the different realizations of the same input. Similarly, we do not consider the generation of pronouns used in G-TAG and we will work on integrating a theory of generation of referring expressions. 2 Sketching G-TAG deals with the to say it? of generation. The input is a conceptual representation. G-TAG grammar includes as TAG grammar. But it also makes trees primary objects, relating them to the elementary trees and considering them as pivot to the conceptual representation level. Representation conceprepresentation makes use of notions as secorder order relation Second order relations have two arguments which first or second order ones) and typically correspond to discourse relations, approaches(Nesson and Shieber, 2006)are in many respects, as shown in(Storoshenk and Frank, 2012). 35 of the 8th International Natural Language Generation pages 35–44, Pennsylvania, 19-21 June 2014. Association for Computational Linguistics first order relations have their While(Danlos, 2000)uses reified formulas of a logical conceptual representation language as G-TAG inputs, it can also be represented a higher-order logical formula(Meunier, 1997) as a SDRT-like formula(Danlos et al., 2001). We follow here this presentation. Equation (1) exan input that could be realized as a pass´e l’aspirateur pour ˆetre r´ecompens´e par Puis il a fait une sieste has vacumed in order to be rewarded by Mary. Then he took a nap). (1) Lexical Database lexical entry of G- TAG corresponds to a lemma. For each lexical entry (i.e. lemma) there is a set of TAG elementary trees which corresponds to it. Among the TAG elementary trees that correspond to a given lexical entry, there is the canonical representative, and all the other representatives are represented by adding features to the canonical representative. For examif the lexical entry is love,then the canonical representative will be the active form of the Then the passive alternation is repby adding a feature [+passive] to Moreover, all the lexical entries attached to a con- (such as belong to a same lexi- So for a concept, there can be a lexical entry describing verbal realizations of the concept. These realizations can correspond to the active or to the passive forms, etc. There can also be a lexical entry which corresponds to nominal realizations, etc. Trees TAG derivation tree can be seen as a record of the substitutions and adjunction occurring during a TAG analysis. The same is true for g-derivation tree. However, while TAG derivation trees are considered as a by-product, with inflected anchors, G-TAG derivation trees are first class structures that are combined in order to reflect the conceptual input. To abstract from the surface form and from the derived tree they can relate to, they don’t correspond to inflected forms but bear features that are used in a post-processing step. Complex g-derivation trees are built by going through the dynamic selection process of a lexical item from the set of appropriate candidates for a given concept. So contrary to TAG derivation trees, they are not fully instantiated trees: their arguments are represented by variables whose lexicalization are not carried out yet. Trees g-derivation tree defines a unique g-derived tree corresponding to it. This correspondance is maintained all along the realization process and a post-processing module outputs the surface representation (text) from the gderived tree. In addition to inflecting forms using the feature values it can make some rewriting to versions the initial text. In this particular sense, g-derived tree corresponds to possibly multiple text outputs generated by the post-processing module. 3 The G-TAG Generation Process us assume the input of Equation1.The G-TAG process starts by lexicalizing relations that have the widest scope in the conceptual representation: typically second order relations, then first order reand Back to the example, we first the second order relation Several items are associated with this relation: (after), avant(before), ensuite(afterwards), auparavant (beforehand), puis (then), etc. Each of them has two arguments, however, some of them produce texts comprising two or more sentences, like ensuite(afterwards); some of them can produce either two sentence texts or one sentence text, while others produce only one sentence. For ina pass´e l’aspirateur. Ensuite, il a fait sieste has vacuumed. Afterwards, he a nap) is a two sentences text while a une sieste apr`es avoir pass´e l’aspirateur took a nap after having vacuumed) is a one sentence text. For this reason, items describing the arguments or the result of second order relations have features expressing the following constraints: indicates it is a text (two ore more sentences); (+S) indicates it is either a single senor a text; indicates it is a sentence (not a text). Every second order relation has three one for output, and two for inputs.3 of the process is ensured because the grammars don’t contain auxiliary trees that would reverse the predorder.(Danlos, 2000)argues such cases don’t occur in technical texts, the first target of G-TAG. We don’t elaborate on this point since the ACG approach we propose remove this constraint for free. G-TAG, any discourse connective has exactly two ar- A discussion about this point is provided in(Dan- 36 Let us assume that the G-TAG g-derivation tree belonging to the lexical database with the concept first chosen, resulting in a text rather than a sentence (illustrated by the leftmost g-derivation tree of Figure1. The process then tries to realize its two ar- The first one involves the that can be realized either by pour (in order to) or by pour que (so that), as exemplified by the rightg-derivation trees of Figure1.Both have feafor the inputs (i.e. arguments) and a tree labeled at the root by Despite pour and pour que bearing the same features, the syntactic trees corresponding to pour and pour que are quite different. For pour que nodes can be substituted by two tensed sentences, while pour takes a finite sentence and a “sentence” in the infinitive form withany nominal subject. Figure2shows the associated elementary trees. Selecting one or the other during the generation process restricts the possible realizations for the arguments. This is enforced by a feature associated to the elementary tree, namely (+reduc-subj) feature as shown in Fig.3. Again, we may assume that G-TAG selects pour, 2: Elementary trees of que that) order to) which will enforce, because of the associated elementary trees, that the subject of the first and the second arguments are the same. Afterwards, we need to lexicalize these two arguments with a comsubject From a semantic point of view, agent of to be the beneficiary rewardee). be lexicalized as passer-l’aspirateur (run-thewhile there are several lexicallos, 2000). options for the r´ecompenser (to reward), donner-r´ecompense (to give-reward), and recevoir-r´ecompense (to receive-reward). Let us notice that donner-r´ecompense does not meet the constraint on a shared subject as it cannot the rewardee as its The remaining options are: recevoir-r´ecompense, whose canonical representation has the rewardee as subject; and r´ecompense whose passive construction has the rewardee as subject. s Assuming a choice of the lexicalizations of the arguments of the first order relations remain. As only once and in subject position, can only be lexicalized as On the other times: one will be the implicit subject of the subordinate, then as argument of Therefore it can be eilexicalized in both of the cases as Jean,or Jeanand the pronoun il In G-TAG, there are some post-processing rules that take care of the generation of referring expressions, but not in a really principled way so we do not demonstrate here. We assume a lexicalization by Jeanin cases. Figure3shows the g-derivation tree with the input of Equation1and Fig.4 show the unique resulting (non-flected) derived tree. The post-processing modules then outputs: Jean a passe l’aspirateur pour etre recompense Marie. Ensuite, il a fait une sieste. vacuumed in order to be rewarded by Mary. Afterwards, he took a nap.) ensuite Figure 3: Fully instantiated g-derivation tree 4 ACG Definition Abstract Categorial Grammars (ACGs)(de Groote, 2001)are a type theolacks passivation in French and there is no form equivalent to: John was given a reward by Mary. course, all these branching points offer several realizations of the same entry. But for explanatory purposes, we describe only one at each step. S S (arg1) PP S(arg2) (mood:inf) pour arg2 faire-la-sieste arg1 arg1 pour Jean arg2 arg1 passer-l’aspirateur arg1 Jean arg1 arg2 Mariee ensuitepour pour que Figure 1: G-derivation trees samples arg1 arg2 arg1 arg2 arg1 arg2 S S (arg1) pour C que (mood:subj) S 37 Figure 4: Non-inflected derived tree retical framework that is able to encode several formalisms(de Groote and Pogo- 2004).An ACG defines two languages: the abstract one and the object one. The abstract level describe the admissible parse structures and these structures to the ones we observe at the object level (strings for surface forms, logical formulas for semantic forms). In all cases, the considered languages are sets of that generalize string and tree languages. linear signature a is defined to be a triple = C, where: A a finite set of atomic types (also noted C a finite set of constants (also noted and a mapping from set of built on a higher-order linear signature A(E) set of built on for that type we note is omitted when obvious from the context). categorial grammar a E two higher-order linear signawhich are called the vocabuthe respectively; L E a lexicon from the abstract vocabulary to the object vocabulary. It is a homomorphism that maps types and terms on types and terms built on follows: if = if u then = = = is then enough to define the atomic and on the constants of define it on all types and terms, provided that for any have : note = omit the subscript if obvious from the context. a type of the abstract vocabulary, is called the type the grammar. Table1provides an ACG example trees the abstract typed constants of encode the combinatorial properties of the associated the lexicon elementary trees. language an ACG = language the grammar = t instance, the term and its image, the derived tree for r´ecompense Jean rewards John). It is important to note that, from a purely mathematical point of view, there is no structural difference between the abstract and the object vocabulary: both are higher-order signatures. This allows for combining ACGs in different ways: • by having a same abstract vocabulary shared by several ACGs: this can be used to make two object terms (for instance a string and a logical formula) share the same underlying trees Fig.5illustrate such a composition. • by making the abstract vocabulary of one ACG the object vocabulary of another ACG, allowing for the control of the admissible of the former by the latter. trees Fig.5illustrate such a composition.</abstract>
<title confidence="0.916243166666667">Figure 5: ACG architecture for TAG S S PP Prep S Va V PP S Adv S NP V ite S NP V</title>
<abstract confidence="0.997412025069639">pour e ˆetre Prep r´ecompenser par ensuite fait une sieste Jean passer l’aspirateur trees 38 Crucial to our analysis is that ACG parsing of term to finding an abstract term that no matter whether a string, a tree, or a logical formula. This can be done in polynomial time for ACGs whose abstract constant types are at most of order 2: second order as(Kanazawa, 2007)The result relies on a reduction of the parsing problem to Datalog querying where the term to be parsed is stored in a database. Interestingly, this database can repa set of terms(Kanazawa, 2011,Section 4.2) and the query reduces to checking whether at least one of them can be retrieved. This allows the query associated with a term representing a logical formula to extend to all the terms that are equivalent modulo the associativity and the commutativity of the conjunction. 5 ACG Encoding 5.1 TAG as ACG Because ACG considers both the abstract language and the object language, the encoding of TAG into ACG makes (abstract) terms representing derivation trees primary. The encoding uses ACGs trees exemplify the of a TAG analyz- (2) in Fig. sites where no adjunction actually takes place in a TAG derivation. unique atomic type is type of Then, for any arity belonging to the ranked alphabet describing the elementary trees of the TAG, we have a constant : · · unique atomic type is type of strings. The constants are the terminal symof the TAG (with type the concatena- : the empty string Table1illustrates is defined as follows: • = for &gt; = for a terminal symand = Then, the derivation tree, the derived tree, and the of Fig.6are represented by: r (b) Derived tree 6: r´ecompense ensuite Jean Marie (a) Derivation tree S v np Jean This sentence is usually analyzed in TAG with a tree where the adverb adjoins at the node. The three higher-order signatures are: atomic types include where the stand for the catethe nodes where a substitution occur while the stand for the the nodes where an adjunction can occur. For each elementary tree entry contains a constant entry type is based on the adjunction and substitusites as Table1shows. It additionally constants are meant to provide a fake auxiliary tree on adjunction actually extends this result to object terms where variables with atomic type can be duplicated, as it commonly happens at the semantic level. corresponds to the systematic encoding of(Pogo- 2009)of TAG and its semantics into ACG. follow the grammar of(Abeill´e, 2002). = 5.2 G-TAG as ACG In order to model G-TAG in ACG, first we need to the abstract signature in which we can have entries for G-TAG. This entries will reflect the ideology that G-TAG is based on. For in G-TAG discourse level words like entake as its arguments texts and sentences and produces text. In order to model this, we types Then, we can define which means that two arguments of type returns a reof type As in G-TAG, take two = for any other type = r´ecompense ensuite Jean Mary rewards then John 39 constants of images by trees The corresponding TAG trees : n Jean v ( = ( ( np S v np r 1: A TAG as an ACG: trees texts as arguments and return text as well, we need to do have another entry for modeling this fact. makes us to introduce another constant then For the same kind of reason, we infollowing constants: S Other relations, like authen modeled in the same way as from there are as and that to be modeled differently from Inwhile in a text, placing side by side a text and a sentence separated with a pe- French combine in a single sentence a (full) clause and an infinitive clause with an implicit subject: the one of the first clause. is clear that in order to type one should use a type which looks as On the other hand, one needs to give the exact type to them. that in TAG and G-TAG two sentential arguments (labelled by the second argument bears a feature indicating it lacks the subject and that the latter has to be shared with first sentence. For instance: a fait une apr`es avoir pass´e l’aspirateur took a nap after having vacuumed), here the subject pass´e l’aspirateur vacuumed) is which comes from the sentence Jean a fait sieste (John took a nap). So, a fait une took a nap) can be seen as a sentence whose subject is shared by another sentence as well. In order to model this point, we use foltype: Indeed, the correspond to the type of sentences missing a subject. Furthermore, we to model which were inin order to lexicalize the in First, let us have a look at It can take as its arguments two complete (from a syntax point of view) sentences and results in a sentence in: travaille pour que vous puissiez which is an entry corresponding to can be assigned a syntactic difference between que highlighted in Section3:pour as arguments a complete sentence and an infinitive form of a sentence missing a subject whose subject comes from the first argument. Thus, in case, similarly to case of to be modeled as an entry that has type where for the type of an infinitive form of a clause missing a subject. We also need to deal with encoding different forms of a verb. For instance, r´ecompenser has an active and a passive form. In G-TAG derivation, both of them can be encountered. In order to model this fact, two different entries are introduced: one for the passive form and one for the active form, which is the canonical construction for r´ecompenser. So, we need to have two distinct both of them type Moreover,(Danlos, 2000)poses the problem that G- TAG cannot handle a text where the adverb adjoin the rather than on the as in: a pass´e l’aspirateur. Il a vacuumed. He to(Danlos, 2000)modelling such text production requires a formalism more powerful than TAG. In the ACG framework, this observations translates defining an entry is third order and that is, as such, beyond the TAC into ACG encoding (that only resecond-order also offers a there is no theoretical complexity result for such ACG fragments. However, in this particuune sieste took a nap.) According 40 general mechanism for providing constants encoding adverbial connectives with two arguments as discourse grammars such as D-STAG(Danlos, 2011),but contrary to D-LTAG where one of the arguments is anaphorically given from the preceddiscourse(Webber, 2004). Trees to Derivation Trees terms of which correspond to gderivation trees, into the TAG derivation tree landefined on using the lexicon Table2.It is interesting to see how to inter- = = = = = = = = 2: The this reason, we introduce in the followconstant: allows for combining two sentences with a period. Now, is possible to translate as fol- = means that interpreted as performing both the operation of combining two sentences a period and the adjunction of the of the second sentence. G-Derived Trees as Interpretation of G- Trees soon as g-derivation trees term built on are interpreted as term on we can map them to derived trees. by composing the two lexicons trees can get directly from G-TAG into derived trees 5.3 From G-TAG to Montague Style Semantics Using ACGs 2009)defines a signature and a fromtoThe entries in Montague like semantics. The lexicon translates a derivation tree into a corresponding formula. We will use the same kind of semantic language for conceptual representations. In other words, our language will produce the formulas lar case, we could use a second-order—and polynomial— encoding of multi-component TAG into ACG. that are used in the conceptual representation of G-TAG, while we will stick to the Montague style translations from syntax to semantics. we define a signature of conceptual that is similar to the one of(Pogo- 2009).defines two atomic types constants such as: of type the type the contype the constant type Moreover, we have constants type are able to translate into the help of the lexicon extension of the lexicon in(Pogodalla, 2009),because we are adding to the domain (i.e. abstract lanthe constants that are not in the = = = = = = = then S T = S ) = a O that the interpretation of using a non-linear implication (but almost linear). Typically, the sharing of the subby the two clauses related by de induces non linearity. and all are interpreted they denote clauses lacking a subject. Then we transthe constants and in the following way: = = 41 = 5.4 The G-TAG Process as a Morphism Composition We exemplify the whole process using the term type The terms representing the trees that generate this conceptual repare the antecedents of by = ... , all are of type They are given in Figure7.Each of these reterms ... , then mapped to terms representing TAG derivation trees, i.e. built on the lexicon They can be can in turn be interpreted as syntactic derived trees the lexicon and the latter can be as strings using the lexicon from can have eight surface forms: i Let us this process on the example of It ilthe generation of the example reward 7: Antecedents of 6 Related Work We can only quickly mention two related pieces work. On the one hand,(Gardent and Perez- 2010)also takes advantage of the formal properties underlying the tree language of derivation trees to propose a generation process using TAG grammars. On the other hand, and White, 2010)also includes discourse in the grammar with Combi- Categorial Grammar a type-theoretical framework to provide a text (rather than sentence) generation process. (3) a pass´e l’aspirateur. Marie Conclusion John vacuumed. Mary = = pass´e · And the surface forms is given by composing the interpretations: = pass´e recompens´e associated conceptual input is a simplified version of conceptual input of Equation1without the a replacement of the by the such that = the term as example at Section5.1. sake of simplicity we assume the adverb adjoins on the whole auxiliary+verb phrase rather than only on the auxiliary as it would be in French. This paper shows how G-TAG can be encoded as ACG. It relies on the fact that both G-TAG and the encoding of TAG within ACG make the derivation tree a primary notion. Then we can benefit from the polynomial reversibility of the ACG framework. It also offers a generalization of the process to all kinds of adjunctions, including the predicative ones. It also offers a new insight on discourse grammars for the adverbial connective encoding(Danlos, 2011).Note that contrary to an important part of G-TAG that offers a way (based on a semantic and a linguistic analysis) to rank the different realizations of a conceptual representation, we do not deal here with such preferences. As syntactic ambiguity treatment is not usually part of the syntactic formalism, we prefer the “realization ambiguity” treatment not to be part of the generation formalism. Finally, a crucial perspective is to integrate a theory of generation of referring expressions relying on type-theoretical apto dynamics semantics(de Groote, 2006; Groote and Lebedeva, 2010)that would ensure a large compatibility with the ACG framework. a r´ecompens´e ensuite Jean.</abstract>
<note confidence="0.738059064516129">rewarded afterwards John. 42 References Anne Abeill´e. 2002. grammaire du Sciences du langage. CNRS ´Editions. [Danlos et al.2001] Laurence Danlos, Bertrand Gaiffe, and Laurent Roussarie. 2001. Document sructuring a` la SDRT. In Helmut Horacek, Nicolas Nicolov, Leo Wanner, editors, of the ACL 2001 Eighth European Workshop on Natural Lan- Generation http://aclweb. [Danlos et al.2011] Laurence Danlos, Fr´ed´eric Meunier, and Vanessa Combet. 2011. EasyText: an NLG system. In 2011, 13th European Workshop on Natural Language Gener- September.http://hal.inria.fr/ [Danlos1998] Laurence Danlos. 1998. G-TAG : Un formalisme lexicalis´e pour la g´en´eration de inspir´e de TAG. Automatique 39(2).http://hal.inria.fr/ [Danlos2000] Laurence Danlos. 2000. G-TAG: A lexicalized formalism for text generation inspired by tree adjoining grammar. In Anne Abeill´e and Owen editors, Adjoining Grammars: For- Linguistic Analysis, and pages 343–370. CSLI Publications. [Danlos2011] Laurence Danlos. 2011. D-STAG: a formalism for discourse analysis based on SDRT and using synchronous TAG. In Philippe de Groote, Markus Egg, and Laura Kallmeyer, edconference on Formal Grammar - FG volume 5591 of pages 64–84. Springer.http://dx.doi.org/10.1007/ [de Groote and Lebedeva2010] Philippe de Groote and Ekaterina Lebedeva. 2010. Presupposition acas exception handling. In Proceedof the SIGDIAL 2010 pages 71–74, Tokyo, Japan, September. Association for Computa- Linguistics.http://www.aclweb.org/ [de Groote and Pogodalla2004] Philippe de Groote and Sylvain Pogodalla. 2004. On the expressive power of Abstract Categorial Grammars: Representing formalisms. of Logic, Lanand 13(4):421–438.http: [de Groote2001] Philippe de Groote. 2001. Towards Categorial Grammars. In for Computational Linguistics, 39th Annual Meeting and 10th Conference of the European Chap- Proceedings of the pages 148– 155.http://aclweb.org/anthology/P/ Groote2006] Philippe de Groote. 2006. Toa montagovian account of dynamics. In Masayuki Gibson and editors, of Semantics Linguistic Theory (SALT) //elanguage.net/journals/index. [Gardent and Perez-Beltrachini2010] Claire Gardent and Laura Perez-Beltrachini. 2010. RTG based surrealisation for TAG. In of the 23rd International Conference on Computational Lin- (COLING pages 367–375, Beijing,</note>
<address confidence="0.967532">China, August. Coling 2010 Organizing Committee.</address>
<web confidence="0.991877">http://www.aclweb.org/anthology/</web>
<note confidence="0.887702333333333">[Joshi and Schabes1997] Aravind K. Joshi and Yves Schabes. 1997. Tree-adjoining grammars. In Rozenberg and A. Salomaa, editors, volume 3, chapter 2. Springer. [Joshi et al.1975] Aravind K. Joshi, Leon S. Levy, and Masako Takahashi. 1975. Tree adjunct gramof Computer and System 10(1):136–163. [Kallmeyer and Romero2004] Laura Kallmeyer and Maribel Romero. 2004. LTAG semantics with unification. In of pages 155–162. [Kallmeyer and Romero2007] Laura Kallmeyer and Maribel Romero. 2007. Scope and situation for LTAG. on Language and 6(1):3–52. [Kanazawa2007] Makoto Kanazawa. 2007. Parsand generation as datalog queries. In Proceedings of the 45th Annual Meeting of the of Computational Linguistics 176–183.http://www.aclweb.org/ Makoto Kanazawa, 2011. generation as Datalog query Unreview.http://research.nii.ac.jp/ Fr´ed´eric Meunier. 1997. formalisme de g´en´eration Ph.D. thesis, Universit´e Paris 7 — Denis Diderot. [Nakatsu and White2010] Crytal Nakatsu and Michael 2010. Generating with discourse comcategorial grammar. Is-</note>
<title confidence="0.60906">in Language 4(1).http: [Nesson and Shieber2006] Rebecca Nesson and</title>
<author confidence="0.537226">Simpler TAG seman-</author>
<note confidence="0.52714575">through synchronization. In the 11th Conference on Formal Malaga, Spain, 29–30 July. CSLI Publications. 43</note>
<web confidence="0.810819">http://cslipublications.stanford.</web>
<note confidence="0.9167252">[Pogodalla2004] Sylvain Pogodalla. 2004. Computing Semantic Representation: Towards ACG Ab- Terms as Derivation Trees. In pages 64–71.http://hal.inria. [Pogodalla2009] Sylvain Pogodalla. 2009. Advances</note>
<title confidence="0.72471725">in Abstract Categorial Grammars: Language Theory and Linguistic Modeling. ESSLLI 2009 Lec- Notes, Part II.http://hal.inria.fr/ [Schabes and Shieber1994] Yves Schabes and Stu-</title>
<author confidence="0.717267">An alternative conception</author>
<abstract confidence="0.7228596">tree-adjoining derivation. Lin- 20(1):91–124.http://aclweb.org/ [Storoshenk and Frank2012] Dennis Ryan Storoshenk and Robert Frank. 2012. Deriving syntax-semantics mappings: node linking, type shifting and scope am-</abstract>
<note confidence="0.892061">In of pages 10–18. [Webber2004] Bonnie Webber. 2004. D-LTAG: Ex- :exicalized TAG to discourse. Sci- 28:751–779.http://dx.doi.org/0.</note>
<intro confidence="0.645794">44</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Anne Abeill´e</author>
</authors>
<title>Une grammaire ´electronique du franc¸ais. Sciences du langage.</title>
<date>2002</date>
<publisher>CNRS ´Editions.</publisher>
<marker>[Abeill´e2002]</marker>
<rawString>Anne Abeill´e. 2002. Une grammaire ´electronique du franc¸ais. Sciences du langage. CNRS ´Editions.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laurence Danlos</author>
<author>Bertrand Gaiffe</author>
<author>Laurent Roussarie</author>
</authors>
<title>Document sructuring a` la SDRT.</title>
<date>2001</date>
<booktitle>Proceedings of the ACL 2001 Eighth European Workshop on Natural Language Generation (EWNLG). http://aclweb.</booktitle>
<pages>01--01</pages>
<editor>In Helmut Horacek, Nicolas Nicolov, and Leo Wanner, editors,</editor>
<marker>[Danlos et al.2001]</marker>
<rawString>Laurence Danlos, Bertrand Gaiffe, and Laurent Roussarie. 2001. Document sructuring a` la SDRT. In Helmut Horacek, Nicolas Nicolov, and Leo Wanner, editors, Proceedings of the ACL 2001 Eighth European Workshop on Natural Language Generation (EWNLG). http://aclweb. org/anthology/W/W01/W01-0803.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laurence Danlos</author>
<author>Fr´ed´eric Meunier</author>
<author>Vanessa Combet</author>
</authors>
<title>EasyText: an operational NLG system.</title>
<date>2011</date>
<booktitle>In ENLG 2011, 13th European Workshop on Natural Language Generation,</booktitle>
<note>http://hal.inria.fr/ inria-00614760/en/.</note>
<marker>[Danlos et al.2011]</marker>
<rawString>Laurence Danlos, Fr´ed´eric Meunier, and Vanessa Combet. 2011. EasyText: an operational NLG system. In ENLG 2011, 13th European Workshop on Natural Language Generation, September. http://hal.inria.fr/ inria-00614760/en/.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laurence Danlos</author>
</authors>
<title>G-TAG : Un formalisme lexicalis´e pour la g´en´eration de textes inspir´e de TAG.</title>
<date>1998</date>
<booktitle>Traitement Automatique des Langues,</booktitle>
<volume>39</volume>
<issue>2</issue>
<note>http://hal.inria.fr/ inria-00098489.</note>
<marker>[Danlos1998]</marker>
<rawString>Laurence Danlos. 1998. G-TAG : Un formalisme lexicalis´e pour la g´en´eration de textes inspir´e de TAG. Traitement Automatique des Langues, 39(2). http://hal.inria.fr/ inria-00098489.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laurence Danlos</author>
</authors>
<title>G-TAG: A lexicalized formalism for text generation inspired by tree adjoining grammar.</title>
<date>2000</date>
<booktitle>In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars: Formalisms, Linguistic Analysis, and Processing,</booktitle>
<pages>343--370</pages>
<publisher>CSLI Publications.</publisher>
<marker>[Danlos2000]</marker>
<rawString>Laurence Danlos. 2000. G-TAG: A lexicalized formalism for text generation inspired by tree adjoining grammar. In Anne Abeill´e and Owen Rambow, editors, Tree Adjoining Grammars: Formalisms, Linguistic Analysis, and Processing, pages 343–370. CSLI Publications.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laurence Danlos</author>
</authors>
<title>D-STAG: a formalism for discourse analysis based on SDRT and using synchronous TAG.</title>
<date>2011</date>
<booktitle>14th conference on Formal Grammar - FG 2009, volume 5591 of LNCS/LNAI,</booktitle>
<volume>10</volume>
<pages>64--84</pages>
<editor>In Philippe de Groote, Markus Egg, and Laura Kallmeyer, editors,</editor>
<publisher>Springer.</publisher>
<marker>[Danlos2011]</marker>
<rawString>Laurence Danlos. 2011. D-STAG: a formalism for discourse analysis based on SDRT and using synchronous TAG. In Philippe de Groote, Markus Egg, and Laura Kallmeyer, editors, 14th conference on Formal Grammar - FG 2009, volume 5591 of LNCS/LNAI, pages 64–84. Springer. http://dx.doi.org/10.1007/ 978-3-642-20169-1_5.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philippe de Groote</author>
<author>Ekaterina Lebedeva</author>
</authors>
<title>Presupposition accommodation as exception handling.</title>
<date>2010</date>
<booktitle>In Proceedings of the SIGDIAL 2010 Conference,</booktitle>
<pages>71--74</pages>
<location>Tokyo, Japan,</location>
<marker>[de Groote and Lebedeva2010]</marker>
<rawString>Philippe de Groote and Ekaterina Lebedeva. 2010. Presupposition accommodation as exception handling. In Proceedings of the SIGDIAL 2010 Conference, pages 71–74, Tokyo, Japan, September. Association for Computational Linguistics. http://www.aclweb.org/ anthology/W/W10/W10-4313.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philippe de Groote</author>
<author>Sylvain Pogodalla</author>
</authors>
<title>On the expressive power of Abstract Categorial Grammars: Representing context-free formalisms.</title>
<date>2004</date>
<journal>Journal of Logic, Language and Information,</journal>
<volume>13</volume>
<issue>4</issue>
<pages>00112956</pages>
<marker>[de Groote and Pogodalla2004]</marker>
<rawString>Philippe de Groote and Sylvain Pogodalla. 2004. On the expressive power of Abstract Categorial Grammars: Representing context-free formalisms. Journal of Logic, Language and Information, 13(4):421–438. http: //hal.inria.fr/inria-00112956.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philippe de Groote</author>
</authors>
<title>Towards Abstract Categorial Grammars.</title>
<date>2001</date>
<booktitle>In Association for Computational Linguistics, 39th Annual Meeting and 10th Conference of the European Chapter, Proceedings of the Conference,</booktitle>
<pages>148--155</pages>
<marker>[de Groote2001]</marker>
<rawString>Philippe de Groote. 2001. Towards Abstract Categorial Grammars. In Association for Computational Linguistics, 39th Annual Meeting and 10th Conference of the European Chapter, Proceedings of the Conference, pages 148– 155. http://aclweb.org/anthology/P/ P01/P01-1033.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Philippe de Groote</author>
</authors>
<title>Towards a montagovian account of dynamics.</title>
<date>2006</date>
<booktitle>In Masayuki Gibson and Jonathan Howell, editors, Proceedings of Semantics and Linguistic Theory (SALT) 16. http:</booktitle>
<pages>16--1</pages>
<marker>[de Groote2006]</marker>
<rawString>Philippe de Groote. 2006. Towards a montagovian account of dynamics. In Masayuki Gibson and Jonathan Howell, editors, Proceedings of Semantics and Linguistic Theory (SALT) 16. http: //elanguage.net/journals/index. php/salt/article/view/16.1/1791.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Claire Gardent</author>
<author>Laura Perez-Beltrachini</author>
</authors>
<title>RTG based surface realisation for TAG.</title>
<date>2010</date>
<booktitle>In Proceedings of the 23rd International Conference on Computational Linguistics (COLING</booktitle>
<pages>367--375</pages>
<location>Beijing, China,</location>
<marker>[Gardent and Perez-Beltrachini2010]</marker>
<rawString>Claire Gardent and Laura Perez-Beltrachini. 2010. RTG based surface realisation for TAG. In Proceedings of the 23rd International Conference on Computational Linguistics (COLING 2010), pages 367–375, Beijing, China, August. Coling 2010 Organizing Committee. http://www.aclweb.org/anthology/ C10-1042.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Yves Schabes</author>
</authors>
<title>Tree-adjoining grammars.</title>
<date>1997</date>
<booktitle>Handbook offormal languages,</booktitle>
<volume>3</volume>
<editor>In G. Rozenberg and A. Salomaa, editors,</editor>
<publisher>Springer.</publisher>
<marker>[Joshi and Schabes1997]</marker>
<rawString>Aravind K. Joshi and Yves Schabes. 1997. Tree-adjoining grammars. In G. Rozenberg and A. Salomaa, editors, Handbook offormal languages, volume 3, chapter 2. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Aravind K Joshi</author>
<author>Leon S Levy</author>
<author>Masako Takahashi</author>
</authors>
<title>Tree adjunct grammars.</title>
<date>1975</date>
<journal>Journal of Computer and System Sciences,</journal>
<volume>10</volume>
<issue>1</issue>
<marker>[Joshi et al.1975]</marker>
<rawString>Aravind K. Joshi, Leon S. Levy, and Masako Takahashi. 1975. Tree adjunct grammars. Journal of Computer and System Sciences, 10(1):136–163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
<author>Maribel Romero</author>
</authors>
<title>LTAG semantics with semantic unification.</title>
<date>2004</date>
<booktitle>In Proceedings of TAG+7,</booktitle>
<pages>155--162</pages>
<marker>[Kallmeyer and Romero2004]</marker>
<rawString>Laura Kallmeyer and Maribel Romero. 2004. LTAG semantics with semantic unification. In Proceedings of TAG+7, pages 155–162.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Laura Kallmeyer</author>
<author>Maribel Romero</author>
</authors>
<title>Scope and situation binding for LTAG.</title>
<date>2007</date>
<journal>Research on Language and Computation,</journal>
<volume>6</volume>
<issue>1</issue>
<pages>10--1007</pages>
<marker>[Kallmeyer and Romero2007]</marker>
<rawString>Laura Kallmeyer and Maribel Romero. 2007. Scope and situation binding for LTAG. Research on Language and Computation, 6(1):3–52. http://dx.doi. org/10.1007/s11168-008-9046-6.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Makoto Kanazawa</author>
</authors>
<title>Parsing and generation as datalog queries.</title>
<date>2007</date>
<booktitle>In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics (ACL),</booktitle>
<pages>176--183</pages>
<marker>[Kanazawa2007]</marker>
<rawString>Makoto Kanazawa. 2007. Parsing and generation as datalog queries. In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics (ACL), pages 176–183. http://www.aclweb.org/ anthology/P/P07/P07-1023.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Makoto Kanazawa</author>
</authors>
<title>Parsing and generation as Datalog query evaluation. Under review.</title>
<date>2011</date>
<note>http://research.nii.ac.jp/ ˜kanazawa/publications/pagadqe.pdf.</note>
<marker>[Kanazawa2011]</marker>
<rawString>Makoto Kanazawa, 2011. Parsing and generation as Datalog query evaluation. Under review. http://research.nii.ac.jp/ ˜kanazawa/publications/pagadqe.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fr´ed´eric Meunier</author>
</authors>
<title>Implantation du formalisme de g´en´eration G-TAG.</title>
<date>1997</date>
<tech>Ph.D. thesis,</tech>
<institution>Universit´e Paris 7 — Denis Diderot.</institution>
<marker>[Meunier1997]</marker>
<rawString>Fr´ed´eric Meunier. 1997. Implantation du formalisme de g´en´eration G-TAG. Ph.D. thesis, Universit´e Paris 7 — Denis Diderot.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Crytal Nakatsu</author>
<author>Michael White</author>
</authors>
<title>Generating with discourse combinatory categorial grammar.</title>
<date>2010</date>
<journal>Linguistic Issues in Language Technology,</journal>
<volume>4</volume>
<issue>1</issue>
<pages>1277--871</pages>
<marker>[Nakatsu and White2010]</marker>
<rawString>Crytal Nakatsu and Michael White. 2010. Generating with discourse combinatory categorial grammar. Linguistic Issues in Language Technology, 4(1). http: //elanguage.net/journals/index. php/lilt/article/view/1277/871.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Nesson</author>
<author>Stuart M Shieber</author>
</authors>
<title>Simpler TAG semantics through synchronization.</title>
<date>2006</date>
<booktitle>In Proceedings of the 11th Conference on Formal Grammar, Malaga,</booktitle>
<publisher>CSLI Publications.</publisher>
<note>http://cslipublications.stanford. edu/FG/2006/nesson.pdf.</note>
<marker>[Nesson and Shieber2006]</marker>
<rawString>Rebecca Nesson and Stuart M. Shieber. 2006. Simpler TAG semantics through synchronization. In Proceedings of the 11th Conference on Formal Grammar, Malaga, Spain, 29–30 July. CSLI Publications. http://cslipublications.stanford. edu/FG/2006/nesson.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sylvain Pogodalla</author>
</authors>
<title>Computing Semantic Representation: Towards ACG Abstract Terms as Derivation Trees.</title>
<date>2004</date>
<booktitle>In Proceedings of TAG+7,</booktitle>
<pages>64--71</pages>
<marker>[Pogodalla2004]</marker>
<rawString>Sylvain Pogodalla. 2004. Computing Semantic Representation: Towards ACG Abstract Terms as Derivation Trees. In Proceedings of TAG+7, pages 64–71. http://hal.inria. fr/inria-00107768.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Sylvain Pogodalla</author>
</authors>
<date>2009</date>
<booktitle>Advances in Abstract Categorial Grammars: Language Theory and Linguistic Modeling. ESSLLI 2009 Lecture Notes, Part II. http://hal.inria.fr/ hal-00749297.</booktitle>
<marker>[Pogodalla2009]</marker>
<rawString>Sylvain Pogodalla. 2009. Advances in Abstract Categorial Grammars: Language Theory and Linguistic Modeling. ESSLLI 2009 Lecture Notes, Part II. http://hal.inria.fr/ hal-00749297.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yves Schabes</author>
<author>Stuart M Shieber</author>
</authors>
<title>An alternative conception of tree-adjoining derivation.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>1</issue>
<pages>94--94</pages>
<marker>[Schabes and Shieber1994]</marker>
<rawString>Yves Schabes and Stuart M. Shieber. 1994. An alternative conception of tree-adjoining derivation. Computational Linguistics, 20(1):91–124. http://aclweb.org/ anthology/J/J94/J94-1004.pdf.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dennis Ryan Storoshenk</author>
<author>Robert Frank</author>
</authors>
<title>Deriving syntax-semantics mappings: node linking, type shifting and scope ambiguity.</title>
<date>2012</date>
<booktitle>In Proceedings of TAG+11,</booktitle>
<pages>10--18</pages>
<marker>[Storoshenk and Frank2012]</marker>
<rawString>Dennis Ryan Storoshenk and Robert Frank. 2012. Deriving syntax-semantics mappings: node linking, type shifting and scope ambiguity. In Proceedings of TAG+11, pages 10–18.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bonnie Webber</author>
</authors>
<title>D-LTAG: Extending :exicalized TAG to discourse.</title>
<date>2004</date>
<journal>Cognitive Science,</journal>
<volume>28</volume>
<pages>1207--15516709</pages>
<marker>[Webber2004]</marker>
<rawString>Bonnie Webber. 2004. D-LTAG: Extending :exicalized TAG to discourse. Cognitive Science, 28:751–779. http://dx.doi.org/0. 1207/s15516709cog2805_6.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>