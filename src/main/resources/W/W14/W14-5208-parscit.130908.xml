<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000224">
<title confidence="0.9944365">
SSF: A Common Representation Scheme for Language Analysis for
Language Technology Infrastructure Development
</title>
<author confidence="0.382922">
Akshar Bharati Rajeev Sangal Dipti Sharma Anil Kumar Singh
</author>
<affiliation confidence="0.282683">
Akshar Bharati Group IIT (BHU), Varanasi IIIT, Hyderabad IIT (BHU), Varanasi
</affiliation>
<email confidence="0.588202">
Hyderabad sangal@iiit.ac.in dipti@iiit.ac.in nlprnd@gmail.com
sangal@iiit.ac.in
</email>
<sectionHeader confidence="0.992285" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.9997761">
We describe a representation scheme and an analysis engine using that scheme, both of which
have been used to develop infrastructure for HLT. The Shakti Standard Format is a readable and
robust representation scheme for analysis frameworks and other purposes. The representation
is highly extensible. This representation scheme, based on the blackboard architectural model,
allows a very wide variety of linguistic and non-linguistic information to be stored in one place
and operated upon by any number of processing modules. We show how it has been successfully
used for building machine translation systems for several language pairs using the same architec-
ture. It has also been used for creation of language resources such as treebanks and for different
kinds of annotation interfaces. There is even a query language designed for this representation.
Easily wrappable into XML, it can be used equally well for distributed computing.
</bodyText>
<sectionHeader confidence="0.9988" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9973701">
Building infrastructures for human language technology is a non-trivial task. There can be numerous
issues that have to be addressed, whether linguistic or non-linguistic. Unless carefully managed, the
overall complexity can easily get out of control and seriously threaten the sustainability of the system.
This may apply to all large software systems, but the complexities associated with humans languages
(both within and across languages) only add to the problem. To make it possible to build various compo-
nents of an infrastructure that scales within and across languages for a wide variety of purposes, and to
be able to do it by re-using the representation(s) and the code, deserves to be considered an achievement.
GATE1 (Cunningham et al., 2011; Li et al., 2009), UIMA2 (Ferrucci and Lally, 2004; Bari et al., 2013;
Noh and Pad´o, 2013) and NLTK3 (Bird, 2002) are well known achievements of this kind. This paper is
about one other such effort that has proved to be successful over the last decade or more.
</bodyText>
<sectionHeader confidence="0.999831" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.999789727272727">
GATE is designed to be an architecture, a framework and a development environment, quite like UIMA,
although the two differ in their realization of this goal. It enables users to develop and deploy robust
language engineering components and resources. It also comes bundled with several commonly used
baseline Natural Language Processing (NLP) applications. It makes strict distinction between data, al-
gorithms, and ways of visualising them, such that algorithms + data + GUI = applications. Consequently,
it has three types of components: language resources, processing resources and visual resources.GATE
uses an annotation format with stand-off markup.
UIMA is a middleware architecture for processing unstructured information (UIM) (Ferrucci and
Lally, 2004), with special focus on NLP. Its development originated in the realization that the ability
to quickly discover each other’s results and rapidly combine different technologies and approaches ac-
celerates scientific advance. It has powerful search capabilities and a data-driven framework for the
</bodyText>
<footnote confidence="0.8958738">
This work is licenced under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings
footer are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
1http://gate.ac.uk/
2https://uima.apache.org/
3http://www.nltk.org/ 66
</footnote>
<note confidence="0.9861155">
Proceedings of the Workshop on Open Infrastructures and Analysis Frameworks for HLT, pages 66–76,
Dublin, Ireland, August 23rd 2014.
</note>
<bodyText confidence="0.999725">
development, composition and distributed deployment of analysis engines. More than the development
of independent UIM applications, UIMA aims to enable accelerated development of integrated and ro-
bust applications, combining independent applications in diverse sub-areas of NLP, so as to accelerate
the research cycle as well as the production time. In UIMA, The original document and its analysis are
represented in a structure called the Common Analysis Structure, or CAS. Annotations in the CAS are
maintained separately from the document itself to allow greater flexibility than inline markup. There
is an XML specification for the CAS and it is possible to develop analysis engines that operate on and
output data in this XML format, which also (like GATE and NLTK) uses stand-off markup.
The Natural Language Toolkit (NLTK) is a suite of modules, data sets and tutorials (Bird, 2002). It
supports many NLP data types and can process many NLP tasks. It has a rich collection of educational
material (such as animated algorithms) for those who are learning NLP. It can also be used as a platform
for prototyping of research systems.
SSF and the Shakti Analyzer are similar to the above three but have a major difference when com-
pared with them. SSF is a “powerful” notation for representing the NLP analysis, at all stages, whether
morphological, part-of-speech level, chunk level, or sentence level parse. The notation is so designed
that it is flexible, as well as readable. The notation can be read by human beings and can also be loaded
in memory, so that it can be used efficiently. It also allows the architecture to consist of modules which
can be configured easily under different settings. The power of the notation and the flexibility of the
resulting architecture gives enormous power to the system framework.
The readability of the format allows it to be used directly with any plain text editors, without requiring
the use of any special tools or editors. Many users prefer the data in plain text format as it allows them to
use the editors they are familiar with. Such readability and simplicity has turned out, in our experience,
to be an advantage even for experts like software developers and (computer savvy) linguists.
It would be an interesting exercise to marry SSF notation and the Shakti way of doing things with the
GATE and UIMA architecture. Our own feeling is that the resulting system/framework with a powerful
notation like SSF and the comprehensive framework like UIMA/GATE would lead to a new even more
powerful framework with a principled notation.
</bodyText>
<sectionHeader confidence="0.98257" genericHeader="method">
3 Shakti Standard Format
</sectionHeader>
<bodyText confidence="0.999514857142857">
Shakti Standard Format (SSF) is a representation scheme (along with a corresponding format) that can be
used for most kinds of linguistically analyzed data. It allows information in a sentence to be represented
in the form of one or more trees together with a set of attribute-value pairs with nodes of the trees. The
attribute-value pairs allow features or properties to be specified with every node. Relations of different
types across nodes can also be specified using an attribute-value like representation. The representation is
specially designed to allow different levels and kinds of linguistic analyses to be stored. The developers
use APIs to store or access information regarding structure of trees and attribute-value pairs.
If a module is successful in its task, it adds a new analysis using trees and attribute values to the
representation. Thus, even though the format is fixed, it is extensible in terms of attributes or analyses.
This approach allows ready-made packages (such as, POS tagger, chunker, and parser) to be incorporated
easily using a wrapper (or a pair of converters). In order to interface such pre-existing packages to the
system, all that is required is to convert from (input) SSF to the input format required by that package and,
the output of the package to SSF. The rest of the modules of the system continue to operate seamlessly.
The format allows both in-memory representation as well as stream (or text) representation. They are
inter-convertible using a reader (stream to memory) and printer (memory to stream). The in-memory
representation is good in speed of processing, while the stream is good for portability, heterogenous
machines, and flexibility, in general.
SSF promotes the dictum: “Simplify globally, and if unavoidable, complicate only locally.” Even if
the number of modules is large and each module does a small job, the local complexity (of individual
modules) remains under tight control for most of the modules. At worst, complexity is introduced only
locally, without affecting the global simplicity. 67
</bodyText>
<subsectionHeader confidence="0.999321">
3.1 Text Level SSF
</subsectionHeader>
<bodyText confidence="0.99915">
In SSF, a text or a document has a sequence of sentences with some structure such as paragraphs and
headings. It also includes meta information related to title, author, publisher, year and other information
related to the origin of the text or the document. Usually, there is also the information related to encoding,
and version number of the tagging scheme, etc. The text level SSF has two parts, header and body:
</bodyText>
<figureCaption confidence="0.999618">
Figure 1: Document Structure in SSF
</figureCaption>
<figure confidence="0.995452571428571">
&lt;document docid=&amp;quot;...&amp;quot; docnumber=&amp;quot;...&amp;quot;&gt;
&lt;header&gt;
...
&lt;/header&gt;
&lt;body&gt;
...
&lt;/body&gt;
</figure>
<bodyText confidence="0.699740666666667">
The header contains meta information about the title, author, publisher, etc. as contained in the CML
(Corpus Markup Language) input4. The body contains sentences, each in SSF. The body of a text in SSF
contains text blocks given by the tag tb.
</bodyText>
<figure confidence="0.9668095">
&lt;body encode= ... &gt;
&lt;tb&gt;
...
&lt;/tb&gt;
...
&lt;/body&gt;
</figure>
<bodyText confidence="0.9195765">
A text block (tb) contains a sequence of sentences. Each sentence can be marked as a segment (to
indicate a heading, a partial sentence, etc.) or not a segment (to indicate a normal sentence).
</bodyText>
<subsectionHeader confidence="0.999859">
3.2 Sentence Level SSF
</subsectionHeader>
<bodyText confidence="0.983479818181818">
Several formalisms have been developed for such descriptions, but the two main ones in the field of
NLP are Phrase Structure Grammar (PSG) (Chomsky, 1957) and Dependency Grammar (DG) (Tesniere,
1959). In PSG, a set of phrase structure rules are given for the grammar of a language. It is constituency
based and order of elements are a part of the grammar, and the resulting tree. DG, on the other hand, is
relational and shows relations between words or elements of a sentence. It, usually, tries to capture the
syntactico-semantic relations of the elements in a sentence. The resulting dependency tree is a tree with
nodes and edges being labelled.
The difference in the two approaches are shown below with the help of the following English example:
Ram ate the banana.
The phrase structure tree is drawn in Fig. 2 using a set of phrase structure rules. Fig. 3 shows the
dependency tree representation for this sentence. SSF can represent both these formats.
</bodyText>
<footnote confidence="0.848965">
4Thus SSF becomes a part of CML. 68
</footnote>
<figureCaption confidence="0.999338">
Figure 2: Phrase structure tree Figure 3: Dependency tree
</figureCaption>
<bodyText confidence="0.9998786">
Sentence level SSF is used to store the analysis of a sentence. It occurs as part of text level SSF. The
analysis of a sentence may mark any or all of the following kinds of information as appropriate: part
of speech of the words in the sentence; morphological analysis of the words including properties such
as root, gender, number, person, tense, aspect, modality; phrase-structure or dependency structure of the
sentence; and properties of units such as chunks, phrases, local word groups, bags, etc. Note that SSF
is theory neutral and allows both phrase structure as well as dependency structure to be coded, and even
mixed in well defined ways.
Though the format in SSF is fixed, it is extensible to handle new features. It also has a text represen-
tation, which makes it easy to read the output. The following example illustrates the SSF. For example,
the following English sentence,
</bodyText>
<subsectionHeader confidence="0.473625">
Children are watching some programmes on television in the house. -- (1)
</subsectionHeader>
<bodyText confidence="0.9998142">
The representation for the above sentence is shown in SSF in Fig. 4. As shown in this figure, each line
represents a word/token or a group (except for lines with ‘))’ which only indicate the end of a group).
For each group, the symbol used is ‘((’. Each word or group has 3 parts. The first part stores the tree
address of each word or group, and is for human readability only. The word or group is in the second
part, with part of speech tag or group/phrase category in the third part.
</bodyText>
<figure confidence="0.391544692307692">
Attribute-value pairs
af=child,n,m,p,3,0,,&gt;
af=be,v,m,p,3,0,,&gt;
af=’watch,v,m,s,3,0,,’ aspect=PROG&gt;
af=some,det,m,s,3,0,,&gt;
af=programme,n,m,p,3,0,,&gt;
af=on,p,m,s,3,0,,&gt;
af=television,n,m,s,3,0,,&gt;
af=in,p,m,s,3,0,,&gt;
af=the,det,m,s,3,0,,&gt;
af=house,n,m,s,3,0,,&gt;
))
))
</figure>
<figureCaption confidence="0.999407">
Figure 4: Shakti Standard Format69
</figureCaption>
<figure confidence="0.987830260869565">
Address Token Category
1 (( NP
1.1 children NNS &lt;fs
))
2 (( VG
2.1 are VBP &lt;fs
2.2 watching VBG &lt;fs
))
3 (( NP
3.1 some DT &lt;fs
3.2 programmes NNS &lt;fs
))
4 (( PP
4.1 on IN &lt;fs
4.1.1 (( NP
4.1.2 television NN &lt;fs
))
))
5 (( PP
5.1 in IN &lt;fs
5.2 (( NP
5.2.1 the DT &lt;fs
5.2.2 house NN &lt;fs
</figure>
<bodyText confidence="0.999673666666667">
The example below shows the SSF for the first noun phrase where feature information is also shown, as
the fourth part on each line. Some frequently occurring attributes (such as root, cat, gend, etc.) may be
abbreviated using a special attribute called ‘af’ or abbreviated attributes, as follows:
</bodyText>
<equation confidence="0.992795333333333">
1 (( NP
1.1 children NNS &lt;fs af=’child,n,m,p,3,0,,’ &gt;

      ||\
root    pers |
   case
category  |number
|
gender
</equation>
<bodyText confidence="0.983329533333333">
The field for each attribute is at a fixed position, and a comma is used as a separater. Thus, in case no
value is given for a particular attribute, the field is left blank, e.g. last two fields in the above example.
Corresponding to the above SSF text stream, an in-memory data structure may be created using the
APIs. (However, note that value of the property Address is not stored in the in-memory data structure
explicitly. It is for human reference and readability only, and is computed when needed. A unique name,
however can be assigned to a node and saved in the memory, as mentioned later.)
There are two types of attributes: user defined or system defined. The convention that is used is that
a user defined attribute should not have an underscore at the end. System attribute may have a single
underscore at its end.
Values are of two types: simple and structured. Simple values are represented by alphanumeric strings,
with a possible underscore. Structured values have progressively more refined values separated by double
underscores. For example, if a value is:
vmod__varg__k1
it shows the value as ‘vmod’ (modifier of a verb), which is further refined as ‘varg’ (argument of the
verb) of type ‘k1’ (karta karaka).
</bodyText>
<subsectionHeader confidence="0.99974">
3.3 Interlinking of Nodes
</subsectionHeader>
<bodyText confidence="0.999848333333333">
Nodes might be interlinked with each other through directed edges. Usually, these edges have nothing
to do with phrase structure tree, and are concerned with dependency structure, thematic structure, etc.
These are specified using the attribute value syntax, however, they do not specify a property for a node,
rather a relation between two nodes.
For example, if a node is karta karaka of another node named ‘play1’ in the dependency structure (in
other words, if there is a directed edge from the latter to the former) it can be represented as follows:
</bodyText>
<equation confidence="0.8504485">
1 children NN &lt; fs drel =&apos; k1 : play1&apos; &gt;
2 played VB &lt; fs name = play1 &gt;
</equation>
<bodyText confidence="0.963044375">
The above says that there is an edge labelled with ‘k1’ from ‘played’ to ‘children’ in the ‘drel’ tree
(dependency relation tree). The node with token ‘played’ is named as ‘play1’ using a special attribute
called ‘name’.
So the syntax is as follows: if you associate an arc with a node C as follows:
&lt;treename&gt;=&lt;edgelabel&gt;:&lt;nodename&gt;
it means that there is an edge from &lt; nodename &gt; to C, and the edge is labelled with &lt; edgelabel &gt;.
Name of a node may be declared with the attribute ‘name’:
name=&lt;nodename&gt;
</bodyText>
<subsectionHeader confidence="0.986548">
3.4 Cross Linking across Sentences
</subsectionHeader>
<bodyText confidence="0.907131714285714">
There is a need to relate elements across sentences. A common case is that of co-reference of pronouns.
For example, in the following sentences:
Sita saw Ram in the house. He 70had come all by himself. -- (2)
the pronoun ‘he’ in the second sentence refers to the same person as referred to by ‘Ram’. Similarly
‘himself’ refers to same person as ‘he’ refers to. This is show by means of a co-reference link from ‘he’
to ‘Ram’, and from ‘himself’ to ’he’. SSF allows such cross-links to be marked.
The above text of two sentences is shown in SSF below.
</bodyText>
<figure confidence="0.995350875">
&lt;document docid=&amp;quot;gandhi-324&amp;quot; docnumber=&amp;quot;2&amp;quot;&gt;
&lt;header&gt; ... &lt;/header&gt;
&lt;body&gt;
&lt;tb&gt;
&lt;sentence num=1&gt;
...
2 Ram &lt;fs name=R&gt;
...
&lt;/sentence&gt;
&lt;sentence num=2&gt;
1 He &lt;fs coref=&amp;quot;..%R&amp;quot; name=he&gt;
...
6 himself &lt;fs coref=he&gt;
7 .
&lt;/sentence&gt;
&lt;/tb&gt;
</figure>
<bodyText confidence="0.971515222222222">
Note that ‘himself’ in sentence 2 co-refers to ‘he’ in the same sentence. This is shown using attribute
‘coref’ and value ‘he’. To show co-reference across sentences, a notation is used with ‘W. It is explained
next.
Name labels are defined at the level of a sentence: Scope of any name label is a sentence. It should be
unique within a sentence, and can be referred to within the sentence by using it directly.
To refer to a name label in another sentence in the same text block (paragraph), path has to be specified:
..%R
To refer to a name label R in a sentence in another text block numbered 3, refer to it as:
..%..%3%1%R
</bodyText>
<sectionHeader confidence="0.950308" genericHeader="method">
4 Shakti Natural Language Analyzer
</sectionHeader>
<bodyText confidence="0.999631916666667">
Shakti Analyzer has been designed for analyzing natural languages. Originally, it was available for
analyzing English as part of the Shakti5 English-Hindi machine translation system. It has now been
extended for analyzing a number of Indian languages as mentioned later (Section-6.1).
The Shakti Analyzer can incorporate new modules as black boxes or as open-source software. The
simplicity of the overall architecture makes it easy to do so. Different available English parsers have
been extensively adapted, and the version used by Shakti system runs using Collins parser.
Shakti analyzer combines rule-based approach with statistical approach. The SSF representation is
designed to keep both kinds of information. The rules are mostly linguistic in nature, and the statistical
approach tries to infer or use linguistic information. For example, statistical POS tagger tries to infer
linguistic (part-of-speech) tags, whereas WSD module uses grammatical relations together with statistics
to disambiguate the word sense.
The system has a number of innovative design principles which are described below.
</bodyText>
<subsectionHeader confidence="0.996656">
4.1 System Organization Principles
</subsectionHeader>
<bodyText confidence="0.999829333333333">
A number of system organization principles have been used which have led to the rapid development of
the system. While the principles by themselves might not appear to be new, their application is perhaps
new.
</bodyText>
<subsectionHeader confidence="0.74136">
4.1.1 Modularity
</subsectionHeader>
<bodyText confidence="0.982211">
The system consists of a large number of modules, each one of which typically performs a small logical
task. This allows the overall machine translation task to be broken up into a large number of small sub-
tasks, each of which can be accomplished separately. Currently the system (as used in the Shakti system)
</bodyText>
<footnote confidence="0.971955">
5http:/shakti.iiit.ac.in 71
</footnote>
<bodyText confidence="0.999875">
has 69 different modules. About 9 modules are used for analyzing the source language (English), 24
modules are used for performing bilingual tasks such as substituting target language roots and reordering
etc., and the remaining modules are used for generating target language.
</bodyText>
<subsectionHeader confidence="0.920226">
4.1.2 Simplicity of Organization
</subsectionHeader>
<bodyText confidence="0.999971166666667">
The overall system architecture is kept extremely simple. All modules operate on data in SSF . They
communicate with each other via SSF.
The attribute value pairs allow features or properties to be specified with every node. Relations of
different types across nodes can also be specified using an attribute-value like representation. The repre-
sentation is specially designed to allow different levels and kinds of linguistic analyses to be stored. The
developer uses APIs to store or access information regarding structure of trees and attribute value pairs.
</bodyText>
<subsectionHeader confidence="0.692494">
4.1.3 Designed to Deal with Failure
</subsectionHeader>
<bodyText confidence="0.999972136363636">
NLP analysis modules are known to have limited coverage. They are not always able to produce an out-
put. They fail to produce output either because of limits of the best known algorithms or incompleteness
of data or rules. For example, a sentential parser might fail to parse either because it does not know how
to deal with a construction or because a dictionary entry is missing. Similarly, a chunker or part of speech
tagger might fail, at times, to produce an analysis. The system is designed to deal with failure at every
step in the pipeline. This is facilitated by a common representation for the outputs of the POS tagger,
chunker and parser (all in SSF). The downstream modules continue to operate on the data stream, albeit
less effectively, when a more detailed analysis is not available. (If all modules were to fail, a default rule
of no-reordering and dictionary lookup would still be applied.)
As another example, if the word sense disambiguation (WSD) module fails to identify the sense of a
word in the input sentence, it does not put in the sense feature for the word. This only means that the
module which substitutes the target language root from the available equivalents from dictionary, will
use a default rule for selecting the sense because the detailed WSD was not successful (say, due to lack
of training data).
The SSF is designed to represent partial information, routinely. Appropriate modules know what to
do when their desired information is available and use defaults when it is not available. In fact, for many
modules, there are not just two but several levels at which they operate, depending on availability of
information corresponding to that level. Each level represents a graceful degradation of output quality.
The above flexibility is achieved by using two kinds of representation: constituent level representation
and feature-structure level representation. The former is used to store phrase level analysis (and partial
parse etc.) and the latter for outputs of many kinds of other tasks such as WSD, TAM computation, case
computation, dependency relations, etc.
</bodyText>
<sectionHeader confidence="0.537376" genericHeader="method">
4.1.4 Transparency for Developers
</sectionHeader>
<bodyText confidence="0.999940714285714">
An extremely important characteristic for the successful development of complex software such as a ma-
chine translation system is to expose the input and output produced by every module. This transparency
becomes even more important in a research environment where new ideas are constantly being tried with
a high turnover of student developers.
In the Shakti system, unprecedented transparency is achieved by using a highly readable textual nota-
tion for the SSF, and requiring every module to produce output in this format. In fact, the textual SSF
output of a module is not only for the human consumption, but is used by the subsequent module in
the data stream as its input. This ensures that no part of the resulting analysis is left hidden in some
global variables; all analysis is represented in readable SSF (otherwise it is not processed at all by the
subsequent modules).
Experience has shown that this methodology has made debugging as well as the development of the
system convenient for programmers and linguists alike. In case an output is not as expected, one can
quickly find out which module went wrong (that is, which module did not function as expected). In fact,
linguists are using the system quite effectively to72debug their linguistic data with ease.
</bodyText>
<sectionHeader confidence="0.990146" genericHeader="method">
5 Implementations
</sectionHeader>
<bodyText confidence="0.9999325">
A considerable repository of implementations (in code) has evolved around SSF and the analyzer. In this
section we consider two of the kinds of implementations that have accumulated so far.
</bodyText>
<subsectionHeader confidence="0.98375">
5.1 SSF API
</subsectionHeader>
<bodyText confidence="0.9997917">
Application Programming Interfaces (APIs) have been implemented in multiple programming languages
to allow programmers to transparently operate on any data stored in SSF. Of these, the better designed
APIs, such as those in Perl and Java, allow all kinds of operations to be performed on the SSF data.
These operation include basic operations such as reading, writing and modifying the data, as well as
for advanced operations such as search and bulk transformation of the data. The Java API is a part of
Sanchay 6, which is a collection of tools and APIs for language processing, specially tailored for the
needs of Indian languages which were not (till very recently) well supported on computers and operating
systems.
The availability of decently designed APIs for SSF allow programmers to use SSF for arbitrary pur-
poses. And they have used it successfully to build natural language systems and tools as described below.
</bodyText>
<subsectionHeader confidence="0.99737">
5.2 Sanchay Corpus Query Language
</subsectionHeader>
<bodyText confidence="0.999958733333333">
Trees have a quite constrained structure, whereas graphs have somewhat anarchic structure. Threaded
trees (Ait-Mokhtar et al., 2002; Larchevelque, 2002) provided a middle ground between the two. They
start with trees as the core structure, but they allow constrained links between the nodes of a tree that a
pure tree would not allow. This overlaying of constrained links over the core trees allows multiple layers
and/or types of annotation to be stored in the same structure. With a little more improvisation, we can
even have links across sentences, i.e., at the discourse level (see section-3.3). It is possible, for example,
to have a phrase structure tree (the core tree) overlaid with a dependency tree (via constrained links or
‘threads’), just as it is possible to have POS tagged and chunked data to be overlaid with named entities
and discourse relations.
The Sanchay Corpus Query Language (SCQL) (Singh, 2012) is a query language designed for
threaded trees. It so turns out that SSF is also a representation that can be viewed as threaded trees.
Thus, the SCQL can work over data in SSF. This language has a simple, intuitive and concise syntax and
high expressive power. It allows not only to search for complicated patterns with short queries but also
allows data manipulation and specification of arbitrary return values. Many of the commonly used tasks
that otherwise require writing programs, can be performed with one or more queries.
</bodyText>
<sectionHeader confidence="0.998526" genericHeader="method">
6 Applications
</sectionHeader>
<subsectionHeader confidence="0.999895">
6.1 Sampark Machine Translation Architecture
</subsectionHeader>
<bodyText confidence="0.9997392">
Overcoming the language barrier in the Indian sub-continent is a very challenging task7. Sampark8 is
an effort in this direction. Sampark has been developed as part of the consortium project called Indian
Language to India Language Machine translation (ILMT) funded by TDIL program of Department of In-
formation Technology, Government of India. Work on this project is contributed to by 11 major research
centres across India working on Natural Language Processing.
Sampark, or the ILMT project, has developed language technology for 9 Indian languages resulting
in MT for 18 language pairs. These are: 14 bi-directional systems between Hindi and Urdu / Punjabi /
Telugu / Bengali / Tamil / Marathi / Kannada and 4 bi-directional systems between Tamil and Malayalam
/ Telugu. Out of these, 8 pairs have been exposed via a web interface. A REST API is also available to
acess the machine translation system over the Internet.
</bodyText>
<footnote confidence="0.991693">
6http://sanchay.co.in
7There are 22 constitutionally recognized languages in India, and many more which are not recognized. Hindi, Bengali,
Telugu, Marathi, Tamil and Urdu are among the major languages of the world in terms of number of speakers, summing up to
a total of 850 million.
8http://sampark.org.in 73
</footnote>
<bodyText confidence="0.999784423076923">
The Sampark system uses Computational Paninian Grammar (CPG) (Bharati et al., 1995), in combina-
tion with machine learning. Thus, it is a hybrid system using both rule-based and statistical approaches.
There are 13 major modules that together form a hybrid system. The machine translation system is based
on the analyze-transfer-generate paradigm. It starts with an analysis of the source language sentence.
Then a transfer of structure and vocabulary to target language is carried out. Finally the target language
is generated. One of the benefits of this approach is that the language analyzer for a particular language
can be developed once and then be combined with generators for other languages, making it easier to
build a machine translation system for new pairs of languages.
Indian languages have a lot of similarities in grammatical structures, so only shallow parsing was found
to be adequate for the purposes of building a machine translation system. Transfer grammar component
has also been kept simple. Domain dictionaries are used to cover domain specific aspects.
At the core of the Sampark architecture is an enhanced version of the Shakti Natural Language Ana-
lyzer. The individual modules may, of course, be different for different language pairs, but the pipelined
architecture bears close resemblance to the Shakti machine translation system. And it uses the Shakti
Standard Format as the blackboard (Erman et al., 1980) on which the different modules (POS taggers,
chunkers, named entity recognzier, transfer grammar module etc.) operate, that is, read from and write
to. SSF thus becomes the glue that ties together all the modules in all the MT systems for the various
language pairs. The modules are not only written in different programming languages, some of them are
rule-based, whereas others are statistical.
The use of SSF as the underlying default representation helps to control the complexity of the overall
system. It also helps to achieve unprecedented transparency for input and output for every module.
Readability of SSF helps in development and debugging because the input and output of any module
can be easily seen and read by humans, whether linguists or programmers. Even if a module fails, SSF
helps to run the modules without any effect on normal operation of system. In such a case, the output
SSF would have unfilled value of an attribute and downstream modules continue to operate on the data
stream.
</bodyText>
<subsectionHeader confidence="0.999721">
6.2 Annotation Interfaces and Other Tools
</subsectionHeader>
<bodyText confidence="0.998201735294118">
Sanchay, mentioned above, has a syntactic annotation interface that has been used for development of
treebanks for Indian languages (Begum et al., 2008). These treebanks have been one of the primary
sources of information for the development the Sampark machine translation systems, among other
things. This syntactic annotation interface provides facilities for everything that is required to be done
to transform the selected data in the raw text format to the final annotated treebank. The usual stages of
annotation include POS tagging, morphological annotation, chunking and dependency annotation. This
interface has evolved over a period of several years based on the feedback received from the annotators
and other users. There are plans to use the interface for similar annotation for even more languages.
The underlying default format used in the above interface is SSF. The advantages of using SSF for this
purpose are similar to those mentioned earlier for purposes such as building machine translation systems.
The complete process of annotation required to build a full-fledged treebank is complicated and there are
numerous issues that have to be taken care of. The blackboard-like nature of SSF allows for a smooth
shifts between different stages of annotation, even going back to an earlier stage, if necessary, to correct
mistakes. It allows all the annotation information to be situated in one contiguous place.
The interface uses the Java API for SSF, which is perhaps the most developed among the different
APIs for SSF. The API (a part of Sanchay) again allows transparency for the programmer as far as
manipulating the data is concerned. It also ensures that there are fewer bugs when new programmers
work on any part of the system where SSF data is being used. One recent addition to the interface was a
GUI to correct mistakes in treebanks (Agarwal et al., 2012).
The syntactic annotation interface is not the only interface in Sanchay that uses SSF. Some other
interfaces do that too. For example, there are sentence alignment and word alignment interfaces, which
also use the same format for similar reasons. Thus, it is even possible to build parallel treebanks in SSF
using the Sanchay interfaces. 74
Then there are other tools in Sanchay such as the integrated tool for accessing language re-
sources (Singh and Ambati, 2010). This tool allows various kinds of language resources, including those
in SSF, to be accessed, searched and manipulated through the inter-connected annotation interfaces and
the SSF API. There is also a text editor in Sanchay that is specially tailored for Indian languages and it
can validate SSF (Singh, 2008).
The availability of a corpus query language (section-5.2) that is implemented in Sanchay and that can
be used for data in SSF is another big facilitator for anyone who wants to build new tools for language
processing and wants to operate on linguistic data.
Apart from these, a number of research projects have used SSF (the representation or the analyzer)
directly or indirectly, that is, either for theoretical frameworks or as part of the implementation (Bharati
et al., 2009; Gadde et al., 2010; Husain et al., 2011).
</bodyText>
<sectionHeader confidence="0.998373" genericHeader="conclusions">
7 Conclusion
</sectionHeader>
<bodyText confidence="0.999991">
We described a readable representation scheme called Shakti Standard Format (SSF). We showed how
this scheme (an instance of the blackboard architectural model), which is based on certain organizational
principles such as modularity, simplicity, robustness and transparency, can be used to create not only
a linguistic analysis engine (Shakti Natural Language Analyzer), but can be used for arbitrary other
purposes wherever linguistic analysis is one of the tasks. We briefly described the machine translation
systems (Shakti and Sampark) which use this scheme at their core level. Similarly, we described how
it can be used for creation of language resources (such as treebanks) and the annotation interfaces used
to create these resources. It has also figured in several research projects so far. We mentioned one
query language (Sanchay Corpus Query Language) that operates on this representation scheme and has
been integrated with the annotation interfaces. Overall, the representation scheme has been successful at
building infrastructure for language technology over the last more than a decade. The scheme is theory
neutral and can be used for both phrase structure grammar and for dependency grammar.
</bodyText>
<sectionHeader confidence="0.999256" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999728346938776">
Rahul Agarwal, Bharat Ram Ambati, and Anil Kumar Singh. 2012. A GUI to Detect and Correct Errors in Hindi
Dependency Treebank. In Proceedings of the Eighth International Conference on Language Resources and
Evaluation (LREC), Instanbul, Turkey. ELRA.
S. Ait-Mokhtar, J.P. Chanod, and C. Roux. 2002. Robustness beyond shallowness: incremental deep parsing.
Natural Language Engineering, 8(2-3):121144, January.
Alessandro Di Bari, Alessandro Faraotti, Carmela Gambardella, and Guido Vetere. 2013. A Model-driven ap-
proach to NLP programming with UIMA. In UIMA@GSCL, pages 2–9.
Rafiya Begum, Samar Husain, Arun Dhwaj, Dipti Misra Sharma, Lakshmi Bai, and Rajeev Sangal. 2008. Depen-
dency Annotation Scheme for Indian Languages. In Proceedings of The Third International Joint Conference
on Natural Language Processing (IJCNLP), Hyderabad, India.
Ashkar Bharati, Vineet Chaitanya, and Rajeev Sangal. 1995. Natural Language Processing: A Paninian Perspec-
tive. Prentice-Hall of India Pvt. Ltd.
Akshar Bharati, Samar Husain, Phani Gadde, Bharat Ambati, Dipti M Sharma, and Rajeev Sangal. 2009. A
Modular Cascaded Approach to Complete Parsing. In Proceedings of the COLIPS International Conference on
Asian Language Processing 2009 (IALP), Singapore.
Steven Bird. 2002. NLTK: The Natural Language Toolkit. In In Proceedings of the ACL Workshop on Effective
Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics. Philadel-
phia: Association for Computational Linguistics.
Noam Chomsky. 1957. Syntactic Structures. The Hague/Paris: Mouton.
Hamish Cunningham, Diana Maynard, Kalina Bontcheva, Valentin Tablan, Niraj Aswani, Ian Roberts, Genevieve
Gorrell, Adam Funk, Angus Roberts, Danica Daml,�&apos; ovic, Thomas Heitz, Mark A. Greenwood, Horacio Sag-
gion, Johann Petrak, Yaoyong Li, and Wim Peters.72011. Text Processing with GATE (Version 6).
Lee D. Erman, Frederick Hayes-Roth, Victor R. Lesser, and D. Raj Reddy. 1980. The Hearsay-II Speech-
Understanding System: Integrating Knowledge to Resolve Uncertainty. ACM Comput. Surv., 12(2):213–253,
June.
D. Ferrucci and A. Lally. 2004. UIMA: an architectural approach to unstructured information processing in the
corporate research environment. Natural Language Engineering, 10(3-4):327–348.
Phani Gadde, Karan Jindal, Samar Husain, Dipti Misra Sharma, and Rajeev Sangal. 2010. Improving Data
Driven Dependency Parsing using Clausal Information. In Proceedings of 11th Annual Conference of the North
American Chapter of the Association for Computational Linguistics (NAACL-HLT), Los Angeles.
Samar Husain, Phani Gadde, Joakim Nivre, and Rajeev Sangal. 2011. Clausal Parsing Helps Data-driven De-
pendency Parsing: Experiments with Hindi. In Proceedings of Fifth International Joint Conference on Natural
Language Processing (IJCNLP), Thailand.
J.M. Larchevelque. 2002. Optimal Incremental Parsing. ACM Transactions on Programing Languages and
Systems, 17(1):115, January.
Yaoyong Li, Kalina Bontcheva, and Hamish Cunningham. 2009. Adapting SVM for Data Sparseness and Imbal-
ance: A Case Study on Information Extraction. Natural Language Engineering, 15(2):241–271.
Tae-Gil Noh and Sebastian Pad´o. 2013. Using UIMA to Structure An Open Platform for Textual Entailment. In
UIMA@GSCL, pages 26–33.
Anil Kumar Singh and Bharat Ambati. 2010. An Integrated Digital Tool for Accessing Language Resources. In
Proceedings of the Seventh International Conference on Language Resources and Evaluation (LREC), Malta.
ELRA.
Anil Kumar Singh. 2008. A Mechanism to Provide Language-Encoding Support and an NLP Friendly Editor. In
Proceedings of the Third International Joint Conference on Natural Language Processing (IJCNLP), Hyder-
abad, India. AFNLP.
Anil Kumar Singh. 2012. A Concise Query Language with Search and Transform Operations for Corpora with
Multiple Levels of Annotation. In Proceedings of the Eighth International Conference on Language Resources
and Evaluation (LREC), Instanbul, Turkey. ELRA.
L. Tesniere. 1959. Elements de syntaxe structurale. Paris: Klincksieck.
</reference>
<page confidence="0.991761">
76
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.128867">
<title confidence="0.999499">SSF: A Common Representation Scheme for Language Analysis Language Technology Infrastructure Development</title>
<author confidence="0.766725">Akshar Bharati Rajeev Sangal Dipti Sharma Anil Kumar Singh Akshar Bharati Group IIT</author>
<email confidence="0.5260965">dipti@iiit.ac.insangal@iiit.ac.in</email>
<abstract confidence="0.955047636363636">We describe a representation scheme and an analysis engine using that scheme, both of which have been used to develop infrastructure for HLT. The Shakti Standard Format is a readable and robust representation scheme for analysis frameworks and other purposes. The representation is highly extensible. This representation scheme, based on the blackboard architectural model, allows a very wide variety of linguistic and non-linguistic information to be stored in one place and operated upon by any number of processing modules. We show how it has been successfully used for building machine translation systems for several language pairs using the same architecture. It has also been used for creation of language resources such as treebanks and for different kinds of annotation interfaces. There is even a query language designed for this representation. Easily wrappable into XML, it can be used equally well for distributed computing.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Rahul Agarwal</author>
<author>Bharat Ram Ambati</author>
<author>Anil Kumar Singh</author>
</authors>
<title>A GUI to Detect and Correct Errors in Hindi Dependency Treebank.</title>
<date>2012</date>
<booktitle>In Proceedings of the Eighth International Conference on Language Resources and Evaluation (LREC), Instanbul,</booktitle>
<location>Turkey. ELRA.</location>
<contexts>
<context position="31216" citStr="Agarwal et al., 2012" startWordPosition="5033" endWordPosition="5036">annotation, even going back to an earlier stage, if necessary, to correct mistakes. It allows all the annotation information to be situated in one contiguous place. The interface uses the Java API for SSF, which is perhaps the most developed among the different APIs for SSF. The API (a part of Sanchay) again allows transparency for the programmer as far as manipulating the data is concerned. It also ensures that there are fewer bugs when new programmers work on any part of the system where SSF data is being used. One recent addition to the interface was a GUI to correct mistakes in treebanks (Agarwal et al., 2012). The syntactic annotation interface is not the only interface in Sanchay that uses SSF. Some other interfaces do that too. For example, there are sentence alignment and word alignment interfaces, which also use the same format for similar reasons. Thus, it is even possible to build parallel treebanks in SSF using the Sanchay interfaces. 74 Then there are other tools in Sanchay such as the integrated tool for accessing language resources (Singh and Ambati, 2010). This tool allows various kinds of language resources, including those in SSF, to be accessed, searched and manipulated through the i</context>
</contexts>
<marker>Agarwal, Ambati, Singh, 2012</marker>
<rawString>Rahul Agarwal, Bharat Ram Ambati, and Anil Kumar Singh. 2012. A GUI to Detect and Correct Errors in Hindi Dependency Treebank. In Proceedings of the Eighth International Conference on Language Resources and Evaluation (LREC), Instanbul, Turkey. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Ait-Mokhtar</author>
<author>J P Chanod</author>
<author>C Roux</author>
</authors>
<title>Robustness beyond shallowness: incremental deep parsing.</title>
<date>2002</date>
<journal>Natural Language Engineering,</journal>
<pages>8--2</pages>
<contexts>
<context position="24221" citStr="Ait-Mokhtar et al., 2002" startWordPosition="3911" endWordPosition="3914"> of the data. The Java API is a part of Sanchay 6, which is a collection of tools and APIs for language processing, specially tailored for the needs of Indian languages which were not (till very recently) well supported on computers and operating systems. The availability of decently designed APIs for SSF allow programmers to use SSF for arbitrary purposes. And they have used it successfully to build natural language systems and tools as described below. 5.2 Sanchay Corpus Query Language Trees have a quite constrained structure, whereas graphs have somewhat anarchic structure. Threaded trees (Ait-Mokhtar et al., 2002; Larchevelque, 2002) provided a middle ground between the two. They start with trees as the core structure, but they allow constrained links between the nodes of a tree that a pure tree would not allow. This overlaying of constrained links over the core trees allows multiple layers and/or types of annotation to be stored in the same structure. With a little more improvisation, we can even have links across sentences, i.e., at the discourse level (see section-3.3). It is possible, for example, to have a phrase structure tree (the core tree) overlaid with a dependency tree (via constrained link</context>
</contexts>
<marker>Ait-Mokhtar, Chanod, Roux, 2002</marker>
<rawString>S. Ait-Mokhtar, J.P. Chanod, and C. Roux. 2002. Robustness beyond shallowness: incremental deep parsing. Natural Language Engineering, 8(2-3):121144, January.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Alessandro Di Bari</author>
<author>Alessandro Faraotti</author>
<author>Carmela Gambardella</author>
<author>Guido Vetere</author>
</authors>
<title>A Model-driven approach to NLP programming with UIMA. In</title>
<date>2013</date>
<booktitle>UIMA@GSCL,</booktitle>
<pages>2--9</pages>
<marker>Di Bari, Faraotti, Gambardella, Vetere, 2013</marker>
<rawString>Alessandro Di Bari, Alessandro Faraotti, Carmela Gambardella, and Guido Vetere. 2013. A Model-driven approach to NLP programming with UIMA. In UIMA@GSCL, pages 2–9.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rafiya Begum</author>
<author>Samar Husain</author>
<author>Arun Dhwaj</author>
<author>Dipti Misra Sharma</author>
<author>Lakshmi Bai</author>
<author>Rajeev Sangal</author>
</authors>
<title>Dependency Annotation Scheme for Indian Languages.</title>
<date>2008</date>
<booktitle>In Proceedings of The Third International Joint Conference on Natural Language Processing (IJCNLP),</booktitle>
<location>Hyderabad, India.</location>
<contexts>
<context position="29482" citStr="Begum et al., 2008" startWordPosition="4753" endWordPosition="4756">r every module. Readability of SSF helps in development and debugging because the input and output of any module can be easily seen and read by humans, whether linguists or programmers. Even if a module fails, SSF helps to run the modules without any effect on normal operation of system. In such a case, the output SSF would have unfilled value of an attribute and downstream modules continue to operate on the data stream. 6.2 Annotation Interfaces and Other Tools Sanchay, mentioned above, has a syntactic annotation interface that has been used for development of treebanks for Indian languages (Begum et al., 2008). These treebanks have been one of the primary sources of information for the development the Sampark machine translation systems, among other things. This syntactic annotation interface provides facilities for everything that is required to be done to transform the selected data in the raw text format to the final annotated treebank. The usual stages of annotation include POS tagging, morphological annotation, chunking and dependency annotation. This interface has evolved over a period of several years based on the feedback received from the annotators and other users. There are plans to use </context>
</contexts>
<marker>Begum, Husain, Dhwaj, Sharma, Bai, Sangal, 2008</marker>
<rawString>Rafiya Begum, Samar Husain, Arun Dhwaj, Dipti Misra Sharma, Lakshmi Bai, and Rajeev Sangal. 2008. Dependency Annotation Scheme for Indian Languages. In Proceedings of The Third International Joint Conference on Natural Language Processing (IJCNLP), Hyderabad, India.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ashkar Bharati</author>
<author>Vineet Chaitanya</author>
<author>Rajeev Sangal</author>
</authors>
<title>Natural Language Processing: A Paninian Perspective. Prentice-Hall of India</title>
<date>1995</date>
<publisher>Pvt. Ltd.</publisher>
<contexts>
<context position="26922" citStr="Bharati et al., 1995" startWordPosition="4345" endWordPosition="4348"> / Kannada and 4 bi-directional systems between Tamil and Malayalam / Telugu. Out of these, 8 pairs have been exposed via a web interface. A REST API is also available to acess the machine translation system over the Internet. 6http://sanchay.co.in 7There are 22 constitutionally recognized languages in India, and many more which are not recognized. Hindi, Bengali, Telugu, Marathi, Tamil and Urdu are among the major languages of the world in terms of number of speakers, summing up to a total of 850 million. 8http://sampark.org.in 73 The Sampark system uses Computational Paninian Grammar (CPG) (Bharati et al., 1995), in combination with machine learning. Thus, it is a hybrid system using both rule-based and statistical approaches. There are 13 major modules that together form a hybrid system. The machine translation system is based on the analyze-transfer-generate paradigm. It starts with an analysis of the source language sentence. Then a transfer of structure and vocabulary to target language is carried out. Finally the target language is generated. One of the benefits of this approach is that the language analyzer for a particular language can be developed once and then be combined with generators for</context>
</contexts>
<marker>Bharati, Chaitanya, Sangal, 1995</marker>
<rawString>Ashkar Bharati, Vineet Chaitanya, and Rajeev Sangal. 1995. Natural Language Processing: A Paninian Perspective. Prentice-Hall of India Pvt. Ltd.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Akshar Bharati</author>
<author>Samar Husain</author>
<author>Phani Gadde</author>
<author>Bharat Ambati</author>
<author>Dipti M Sharma</author>
<author>Rajeev Sangal</author>
</authors>
<title>A Modular Cascaded Approach to Complete Parsing.</title>
<date>2009</date>
<booktitle>In Proceedings of the COLIPS International Conference on Asian Language Processing</booktitle>
<contexts>
<context position="32474" citStr="Bharati et al., 2009" startWordPosition="5237" endWordPosition="5240">nd the SSF API. There is also a text editor in Sanchay that is specially tailored for Indian languages and it can validate SSF (Singh, 2008). The availability of a corpus query language (section-5.2) that is implemented in Sanchay and that can be used for data in SSF is another big facilitator for anyone who wants to build new tools for language processing and wants to operate on linguistic data. Apart from these, a number of research projects have used SSF (the representation or the analyzer) directly or indirectly, that is, either for theoretical frameworks or as part of the implementation (Bharati et al., 2009; Gadde et al., 2010; Husain et al., 2011). 7 Conclusion We described a readable representation scheme called Shakti Standard Format (SSF). We showed how this scheme (an instance of the blackboard architectural model), which is based on certain organizational principles such as modularity, simplicity, robustness and transparency, can be used to create not only a linguistic analysis engine (Shakti Natural Language Analyzer), but can be used for arbitrary other purposes wherever linguistic analysis is one of the tasks. We briefly described the machine translation systems (Shakti and Sampark) whi</context>
</contexts>
<marker>Bharati, Husain, Gadde, Ambati, Sharma, Sangal, 2009</marker>
<rawString>Akshar Bharati, Samar Husain, Phani Gadde, Bharat Ambati, Dipti M Sharma, and Rajeev Sangal. 2009. A Modular Cascaded Approach to Complete Parsing. In Proceedings of the COLIPS International Conference on Asian Language Processing 2009 (IALP), Singapore.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Steven Bird</author>
</authors>
<title>NLTK: The Natural Language Toolkit. In</title>
<date>2002</date>
<booktitle>In Proceedings of the ACL Workshop on Effective Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics. Philadelphia: Association for Computational Linguistics. Noam Chomsky.</booktitle>
<publisher>Mouton.</publisher>
<contexts>
<context position="2155" citStr="Bird, 2002" startWordPosition="322" endWordPosition="323">riously threaten the sustainability of the system. This may apply to all large software systems, but the complexities associated with humans languages (both within and across languages) only add to the problem. To make it possible to build various components of an infrastructure that scales within and across languages for a wide variety of purposes, and to be able to do it by re-using the representation(s) and the code, deserves to be considered an achievement. GATE1 (Cunningham et al., 2011; Li et al., 2009), UIMA2 (Ferrucci and Lally, 2004; Bari et al., 2013; Noh and Pad´o, 2013) and NLTK3 (Bird, 2002) are well known achievements of this kind. This paper is about one other such effort that has proved to be successful over the last decade or more. 2 Related Work GATE is designed to be an architecture, a framework and a development environment, quite like UIMA, although the two differ in their realization of this goal. It enables users to develop and deploy robust language engineering components and resources. It also comes bundled with several commonly used baseline Natural Language Processing (NLP) applications. It makes strict distinction between data, algorithms, and ways of visualising t</context>
<context position="4680" citStr="Bird, 2002" startWordPosition="690" endWordPosition="691"> so as to accelerate the research cycle as well as the production time. In UIMA, The original document and its analysis are represented in a structure called the Common Analysis Structure, or CAS. Annotations in the CAS are maintained separately from the document itself to allow greater flexibility than inline markup. There is an XML specification for the CAS and it is possible to develop analysis engines that operate on and output data in this XML format, which also (like GATE and NLTK) uses stand-off markup. The Natural Language Toolkit (NLTK) is a suite of modules, data sets and tutorials (Bird, 2002). It supports many NLP data types and can process many NLP tasks. It has a rich collection of educational material (such as animated algorithms) for those who are learning NLP. It can also be used as a platform for prototyping of research systems. SSF and the Shakti Analyzer are similar to the above three but have a major difference when compared with them. SSF is a “powerful” notation for representing the NLP analysis, at all stages, whether morphological, part-of-speech level, chunk level, or sentence level parse. The notation is so designed that it is flexible, as well as readable. The nota</context>
</contexts>
<marker>Bird, 2002</marker>
<rawString>Steven Bird. 2002. NLTK: The Natural Language Toolkit. In In Proceedings of the ACL Workshop on Effective Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics. Philadelphia: Association for Computational Linguistics. Noam Chomsky. 1957. Syntactic Structures. The Hague/Paris: Mouton.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Hamish Cunningham</author>
<author>Diana Maynard</author>
<author>Kalina Bontcheva</author>
<author>Valentin Tablan</author>
<author>Niraj Aswani</author>
<author>Ian Roberts</author>
<author>Genevieve Gorrell</author>
<author>Adam Funk</author>
<author>Angus Roberts</author>
<author>Danica Daml</author>
</authors>
<title>Horacio Saggion, Johann Petrak, Yaoyong Li, and Wim Peters.72011. Text Processing with</title>
<journal>GATE (Version</journal>
<volume>6</volume>
<marker>Cunningham, Maynard, Bontcheva, Tablan, Aswani, Roberts, Gorrell, Funk, Roberts, Daml, </marker>
<rawString>Hamish Cunningham, Diana Maynard, Kalina Bontcheva, Valentin Tablan, Niraj Aswani, Ian Roberts, Genevieve Gorrell, Adam Funk, Angus Roberts, Danica Daml,�&apos; ovic, Thomas Heitz, Mark A. Greenwood, Horacio Saggion, Johann Petrak, Yaoyong Li, and Wim Peters.72011. Text Processing with GATE (Version 6).</rawString>
</citation>
<citation valid="true">
<authors>
<author>Lee D Erman</author>
<author>Frederick Hayes-Roth</author>
<author>Victor R Lesser</author>
<author>D Raj Reddy</author>
</authors>
<title>The Hearsay-II SpeechUnderstanding System: Integrating Knowledge to Resolve Uncertainty.</title>
<date>1980</date>
<journal>ACM Comput. Surv.,</journal>
<volume>12</volume>
<issue>2</issue>
<contexts>
<context position="28279" citStr="Erman et al., 1980" startWordPosition="4558" endWordPosition="4561">rities in grammatical structures, so only shallow parsing was found to be adequate for the purposes of building a machine translation system. Transfer grammar component has also been kept simple. Domain dictionaries are used to cover domain specific aspects. At the core of the Sampark architecture is an enhanced version of the Shakti Natural Language Analyzer. The individual modules may, of course, be different for different language pairs, but the pipelined architecture bears close resemblance to the Shakti machine translation system. And it uses the Shakti Standard Format as the blackboard (Erman et al., 1980) on which the different modules (POS taggers, chunkers, named entity recognzier, transfer grammar module etc.) operate, that is, read from and write to. SSF thus becomes the glue that ties together all the modules in all the MT systems for the various language pairs. The modules are not only written in different programming languages, some of them are rule-based, whereas others are statistical. The use of SSF as the underlying default representation helps to control the complexity of the overall system. It also helps to achieve unprecedented transparency for input and output for every module. </context>
</contexts>
<marker>Erman, Hayes-Roth, Lesser, Reddy, 1980</marker>
<rawString>Lee D. Erman, Frederick Hayes-Roth, Victor R. Lesser, and D. Raj Reddy. 1980. The Hearsay-II SpeechUnderstanding System: Integrating Knowledge to Resolve Uncertainty. ACM Comput. Surv., 12(2):213–253, June.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Ferrucci</author>
<author>A Lally</author>
</authors>
<title>UIMA: an architectural approach to unstructured information processing in the corporate research environment.</title>
<date>2004</date>
<journal>Natural Language Engineering,</journal>
<pages>10--3</pages>
<contexts>
<context position="2091" citStr="Ferrucci and Lally, 2004" startWordPosition="308" endWordPosition="311">arefully managed, the overall complexity can easily get out of control and seriously threaten the sustainability of the system. This may apply to all large software systems, but the complexities associated with humans languages (both within and across languages) only add to the problem. To make it possible to build various components of an infrastructure that scales within and across languages for a wide variety of purposes, and to be able to do it by re-using the representation(s) and the code, deserves to be considered an achievement. GATE1 (Cunningham et al., 2011; Li et al., 2009), UIMA2 (Ferrucci and Lally, 2004; Bari et al., 2013; Noh and Pad´o, 2013) and NLTK3 (Bird, 2002) are well known achievements of this kind. This paper is about one other such effort that has proved to be successful over the last decade or more. 2 Related Work GATE is designed to be an architecture, a framework and a development environment, quite like UIMA, although the two differ in their realization of this goal. It enables users to develop and deploy robust language engineering components and resources. It also comes bundled with several commonly used baseline Natural Language Processing (NLP) applications. It makes strict</context>
</contexts>
<marker>Ferrucci, Lally, 2004</marker>
<rawString>D. Ferrucci and A. Lally. 2004. UIMA: an architectural approach to unstructured information processing in the corporate research environment. Natural Language Engineering, 10(3-4):327–348.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Phani Gadde</author>
<author>Karan Jindal</author>
<author>Samar Husain</author>
<author>Dipti Misra Sharma</author>
<author>Rajeev Sangal</author>
</authors>
<title>Improving Data Driven Dependency Parsing using Clausal Information.</title>
<date>2010</date>
<booktitle>In Proceedings of 11th Annual Conference of the North American Chapter of the Association for Computational Linguistics (NAACL-HLT),</booktitle>
<location>Los Angeles.</location>
<contexts>
<context position="32494" citStr="Gadde et al., 2010" startWordPosition="5241" endWordPosition="5244">is also a text editor in Sanchay that is specially tailored for Indian languages and it can validate SSF (Singh, 2008). The availability of a corpus query language (section-5.2) that is implemented in Sanchay and that can be used for data in SSF is another big facilitator for anyone who wants to build new tools for language processing and wants to operate on linguistic data. Apart from these, a number of research projects have used SSF (the representation or the analyzer) directly or indirectly, that is, either for theoretical frameworks or as part of the implementation (Bharati et al., 2009; Gadde et al., 2010; Husain et al., 2011). 7 Conclusion We described a readable representation scheme called Shakti Standard Format (SSF). We showed how this scheme (an instance of the blackboard architectural model), which is based on certain organizational principles such as modularity, simplicity, robustness and transparency, can be used to create not only a linguistic analysis engine (Shakti Natural Language Analyzer), but can be used for arbitrary other purposes wherever linguistic analysis is one of the tasks. We briefly described the machine translation systems (Shakti and Sampark) which use this scheme a</context>
</contexts>
<marker>Gadde, Jindal, Husain, Sharma, Sangal, 2010</marker>
<rawString>Phani Gadde, Karan Jindal, Samar Husain, Dipti Misra Sharma, and Rajeev Sangal. 2010. Improving Data Driven Dependency Parsing using Clausal Information. In Proceedings of 11th Annual Conference of the North American Chapter of the Association for Computational Linguistics (NAACL-HLT), Los Angeles.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Samar Husain</author>
<author>Phani Gadde</author>
<author>Joakim Nivre</author>
<author>Rajeev Sangal</author>
</authors>
<title>Clausal Parsing Helps Data-driven Dependency Parsing: Experiments with Hindi.</title>
<date>2011</date>
<booktitle>In Proceedings of Fifth International Joint Conference on Natural Language Processing (IJCNLP),</booktitle>
<contexts>
<context position="32516" citStr="Husain et al., 2011" startWordPosition="5245" endWordPosition="5248">r in Sanchay that is specially tailored for Indian languages and it can validate SSF (Singh, 2008). The availability of a corpus query language (section-5.2) that is implemented in Sanchay and that can be used for data in SSF is another big facilitator for anyone who wants to build new tools for language processing and wants to operate on linguistic data. Apart from these, a number of research projects have used SSF (the representation or the analyzer) directly or indirectly, that is, either for theoretical frameworks or as part of the implementation (Bharati et al., 2009; Gadde et al., 2010; Husain et al., 2011). 7 Conclusion We described a readable representation scheme called Shakti Standard Format (SSF). We showed how this scheme (an instance of the blackboard architectural model), which is based on certain organizational principles such as modularity, simplicity, robustness and transparency, can be used to create not only a linguistic analysis engine (Shakti Natural Language Analyzer), but can be used for arbitrary other purposes wherever linguistic analysis is one of the tasks. We briefly described the machine translation systems (Shakti and Sampark) which use this scheme at their core level. Si</context>
</contexts>
<marker>Husain, Gadde, Nivre, Sangal, 2011</marker>
<rawString>Samar Husain, Phani Gadde, Joakim Nivre, and Rajeev Sangal. 2011. Clausal Parsing Helps Data-driven Dependency Parsing: Experiments with Hindi. In Proceedings of Fifth International Joint Conference on Natural Language Processing (IJCNLP), Thailand.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J M Larchevelque</author>
</authors>
<title>Optimal Incremental Parsing.</title>
<date>2002</date>
<journal>ACM Transactions on Programing Languages and Systems,</journal>
<volume>17</volume>
<issue>1</issue>
<contexts>
<context position="24242" citStr="Larchevelque, 2002" startWordPosition="3915" endWordPosition="3916"> is a part of Sanchay 6, which is a collection of tools and APIs for language processing, specially tailored for the needs of Indian languages which were not (till very recently) well supported on computers and operating systems. The availability of decently designed APIs for SSF allow programmers to use SSF for arbitrary purposes. And they have used it successfully to build natural language systems and tools as described below. 5.2 Sanchay Corpus Query Language Trees have a quite constrained structure, whereas graphs have somewhat anarchic structure. Threaded trees (Ait-Mokhtar et al., 2002; Larchevelque, 2002) provided a middle ground between the two. They start with trees as the core structure, but they allow constrained links between the nodes of a tree that a pure tree would not allow. This overlaying of constrained links over the core trees allows multiple layers and/or types of annotation to be stored in the same structure. With a little more improvisation, we can even have links across sentences, i.e., at the discourse level (see section-3.3). It is possible, for example, to have a phrase structure tree (the core tree) overlaid with a dependency tree (via constrained links or ‘threads’), just</context>
</contexts>
<marker>Larchevelque, 2002</marker>
<rawString>J.M. Larchevelque. 2002. Optimal Incremental Parsing. ACM Transactions on Programing Languages and Systems, 17(1):115, January.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yaoyong Li</author>
<author>Kalina Bontcheva</author>
<author>Hamish Cunningham</author>
</authors>
<title>Adapting SVM for Data Sparseness and Imbalance: A Case Study on Information Extraction.</title>
<date>2009</date>
<journal>Natural Language Engineering,</journal>
<volume>15</volume>
<issue>2</issue>
<contexts>
<context position="2058" citStr="Li et al., 2009" startWordPosition="303" endWordPosition="306"> non-linguistic. Unless carefully managed, the overall complexity can easily get out of control and seriously threaten the sustainability of the system. This may apply to all large software systems, but the complexities associated with humans languages (both within and across languages) only add to the problem. To make it possible to build various components of an infrastructure that scales within and across languages for a wide variety of purposes, and to be able to do it by re-using the representation(s) and the code, deserves to be considered an achievement. GATE1 (Cunningham et al., 2011; Li et al., 2009), UIMA2 (Ferrucci and Lally, 2004; Bari et al., 2013; Noh and Pad´o, 2013) and NLTK3 (Bird, 2002) are well known achievements of this kind. This paper is about one other such effort that has proved to be successful over the last decade or more. 2 Related Work GATE is designed to be an architecture, a framework and a development environment, quite like UIMA, although the two differ in their realization of this goal. It enables users to develop and deploy robust language engineering components and resources. It also comes bundled with several commonly used baseline Natural Language Processing (N</context>
</contexts>
<marker>Li, Bontcheva, Cunningham, 2009</marker>
<rawString>Yaoyong Li, Kalina Bontcheva, and Hamish Cunningham. 2009. Adapting SVM for Data Sparseness and Imbalance: A Case Study on Information Extraction. Natural Language Engineering, 15(2):241–271.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tae-Gil Noh</author>
<author>Sebastian Pad´o</author>
</authors>
<title>Using UIMA to Structure An Open Platform for Textual Entailment. In</title>
<date>2013</date>
<booktitle>UIMA@GSCL,</booktitle>
<pages>26--33</pages>
<marker>Noh, Pad´o, 2013</marker>
<rawString>Tae-Gil Noh and Sebastian Pad´o. 2013. Using UIMA to Structure An Open Platform for Textual Entailment. In UIMA@GSCL, pages 26–33.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anil Kumar Singh</author>
<author>Bharat Ambati</author>
</authors>
<title>An Integrated Digital Tool for Accessing Language Resources.</title>
<date>2010</date>
<booktitle>In Proceedings of the Seventh International Conference on Language Resources and Evaluation (LREC),</booktitle>
<publisher>ELRA.</publisher>
<contexts>
<context position="31682" citStr="Singh and Ambati, 2010" startWordPosition="5109" endWordPosition="5112">n any part of the system where SSF data is being used. One recent addition to the interface was a GUI to correct mistakes in treebanks (Agarwal et al., 2012). The syntactic annotation interface is not the only interface in Sanchay that uses SSF. Some other interfaces do that too. For example, there are sentence alignment and word alignment interfaces, which also use the same format for similar reasons. Thus, it is even possible to build parallel treebanks in SSF using the Sanchay interfaces. 74 Then there are other tools in Sanchay such as the integrated tool for accessing language resources (Singh and Ambati, 2010). This tool allows various kinds of language resources, including those in SSF, to be accessed, searched and manipulated through the inter-connected annotation interfaces and the SSF API. There is also a text editor in Sanchay that is specially tailored for Indian languages and it can validate SSF (Singh, 2008). The availability of a corpus query language (section-5.2) that is implemented in Sanchay and that can be used for data in SSF is another big facilitator for anyone who wants to build new tools for language processing and wants to operate on linguistic data. Apart from these, a number o</context>
</contexts>
<marker>Singh, Ambati, 2010</marker>
<rawString>Anil Kumar Singh and Bharat Ambati. 2010. An Integrated Digital Tool for Accessing Language Resources. In Proceedings of the Seventh International Conference on Language Resources and Evaluation (LREC), Malta. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anil Kumar Singh</author>
</authors>
<title>A Mechanism to Provide Language-Encoding Support and an NLP Friendly Editor.</title>
<date>2008</date>
<booktitle>In Proceedings of the Third International Joint Conference on Natural Language Processing (IJCNLP),</booktitle>
<publisher>AFNLP.</publisher>
<location>Hyderabad, India.</location>
<contexts>
<context position="31994" citStr="Singh, 2008" startWordPosition="5160" endWordPosition="5161">and word alignment interfaces, which also use the same format for similar reasons. Thus, it is even possible to build parallel treebanks in SSF using the Sanchay interfaces. 74 Then there are other tools in Sanchay such as the integrated tool for accessing language resources (Singh and Ambati, 2010). This tool allows various kinds of language resources, including those in SSF, to be accessed, searched and manipulated through the inter-connected annotation interfaces and the SSF API. There is also a text editor in Sanchay that is specially tailored for Indian languages and it can validate SSF (Singh, 2008). The availability of a corpus query language (section-5.2) that is implemented in Sanchay and that can be used for data in SSF is another big facilitator for anyone who wants to build new tools for language processing and wants to operate on linguistic data. Apart from these, a number of research projects have used SSF (the representation or the analyzer) directly or indirectly, that is, either for theoretical frameworks or as part of the implementation (Bharati et al., 2009; Gadde et al., 2010; Husain et al., 2011). 7 Conclusion We described a readable representation scheme called Shakti Sta</context>
</contexts>
<marker>Singh, 2008</marker>
<rawString>Anil Kumar Singh. 2008. A Mechanism to Provide Language-Encoding Support and an NLP Friendly Editor. In Proceedings of the Third International Joint Conference on Natural Language Processing (IJCNLP), Hyderabad, India. AFNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Anil Kumar Singh</author>
</authors>
<title>A Concise Query Language with Search and Transform Operations for Corpora with Multiple Levels of Annotation.</title>
<date>2012</date>
<booktitle>In Proceedings of the Eighth International Conference on Language Resources and Evaluation (LREC), Instanbul,</booktitle>
<location>Turkey. ELRA.</location>
<contexts>
<context position="25011" citStr="Singh, 2012" startWordPosition="4043" endWordPosition="4044">ure tree would not allow. This overlaying of constrained links over the core trees allows multiple layers and/or types of annotation to be stored in the same structure. With a little more improvisation, we can even have links across sentences, i.e., at the discourse level (see section-3.3). It is possible, for example, to have a phrase structure tree (the core tree) overlaid with a dependency tree (via constrained links or ‘threads’), just as it is possible to have POS tagged and chunked data to be overlaid with named entities and discourse relations. The Sanchay Corpus Query Language (SCQL) (Singh, 2012) is a query language designed for threaded trees. It so turns out that SSF is also a representation that can be viewed as threaded trees. Thus, the SCQL can work over data in SSF. This language has a simple, intuitive and concise syntax and high expressive power. It allows not only to search for complicated patterns with short queries but also allows data manipulation and specification of arbitrary return values. Many of the commonly used tasks that otherwise require writing programs, can be performed with one or more queries. 6 Applications 6.1 Sampark Machine Translation Architecture Overcom</context>
</contexts>
<marker>Singh, 2012</marker>
<rawString>Anil Kumar Singh. 2012. A Concise Query Language with Search and Transform Operations for Corpora with Multiple Levels of Annotation. In Proceedings of the Eighth International Conference on Language Resources and Evaluation (LREC), Instanbul, Turkey. ELRA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Tesniere</author>
</authors>
<title>Elements de syntaxe structurale.</title>
<date>1959</date>
<location>Paris: Klincksieck.</location>
<contexts>
<context position="9726" citStr="Tesniere, 1959" startWordPosition="1516" endWordPosition="1517">n the CML (Corpus Markup Language) input4. The body contains sentences, each in SSF. The body of a text in SSF contains text blocks given by the tag tb. &lt;body encode= ... &gt; &lt;tb&gt; ... &lt;/tb&gt; ... &lt;/body&gt; A text block (tb) contains a sequence of sentences. Each sentence can be marked as a segment (to indicate a heading, a partial sentence, etc.) or not a segment (to indicate a normal sentence). 3.2 Sentence Level SSF Several formalisms have been developed for such descriptions, but the two main ones in the field of NLP are Phrase Structure Grammar (PSG) (Chomsky, 1957) and Dependency Grammar (DG) (Tesniere, 1959). In PSG, a set of phrase structure rules are given for the grammar of a language. It is constituency based and order of elements are a part of the grammar, and the resulting tree. DG, on the other hand, is relational and shows relations between words or elements of a sentence. It, usually, tries to capture the syntactico-semantic relations of the elements in a sentence. The resulting dependency tree is a tree with nodes and edges being labelled. The difference in the two approaches are shown below with the help of the following English example: Ram ate the banana. The phrase structure tree is</context>
</contexts>
<marker>Tesniere, 1959</marker>
<rawString>L. Tesniere. 1959. Elements de syntaxe structurale. Paris: Klincksieck.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>